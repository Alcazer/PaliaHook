#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterSelection_Windmill_NoBlade

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterSelection_Windmill_NoBlade.BP_CharacterSelection_Windmill_NoBlade_C
// 0x00E0 (0x0380 - 0x02A0)
class ABP_CharacterSelection_Windmill_NoBlade_C final  : public AActor
{
public:
	class USceneComponent*                        AkPistonLoc;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkCulledComponent*                     AkWindmillLoop;                                    // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_generic_awningRainDripA_line_6;                 // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_generic_awningRainDripA_line_5;                 // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_windmill_awningRainDripA_line_4;                // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_windmill_awningRainDripA_line_3;                // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_windmill_awningRainDripA_line_2;                // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_windmill_awningRainDripA_line_1;                // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_steam;                                          // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Root_vfx;                                          // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_pump;                          // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill;                               // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Root_visual;                                       // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_012;                      // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_011;                      // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_010;                      // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_09;                       // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_08;                       // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_07;                       // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_01;                       // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_05;                       // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_04;                       // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_03;                       // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_02;                       // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Valtech_Windmill_Knot_06;                       // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Spin_curr;                                         // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spin_rate;                                         // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterSelection_Windmill_NoBlade_C">();
	}
	static class ABP_CharacterSelection_Windmill_NoBlade_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharacterSelection_Windmill_NoBlade_C>();
	}
};
static_assert(alignof(ABP_CharacterSelection_Windmill_NoBlade_C) == 0x000008, "Wrong alignment on ABP_CharacterSelection_Windmill_NoBlade_C");
static_assert(sizeof(ABP_CharacterSelection_Windmill_NoBlade_C) == 0x000380, "Wrong size on ABP_CharacterSelection_Windmill_NoBlade_C");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, AkPistonLoc) == 0x0002A0, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::AkPistonLoc' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, AkWindmillLoop) == 0x0002A8, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::AkWindmillLoop' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, NS_generic_awningRainDripA_line_6) == 0x0002B0, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::NS_generic_awningRainDripA_line_6' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, NS_generic_awningRainDripA_line_5) == 0x0002B8, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::NS_generic_awningRainDripA_line_5' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, NS_windmill_awningRainDripA_line_4) == 0x0002C0, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::NS_windmill_awningRainDripA_line_4' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, NS_windmill_awningRainDripA_line_3) == 0x0002C8, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::NS_windmill_awningRainDripA_line_3' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, NS_windmill_awningRainDripA_line_2) == 0x0002D0, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::NS_windmill_awningRainDripA_line_2' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, NS_windmill_awningRainDripA_line_1) == 0x0002D8, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::NS_windmill_awningRainDripA_line_1' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, NS_steam) == 0x0002E0, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::NS_steam' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, Root_vfx) == 0x0002E8, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::Root_vfx' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_pump) == 0x0002F0, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_pump' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill) == 0x0002F8, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, Root_visual) == 0x000300, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::Root_visual' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_012) == 0x000308, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_012' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_011) == 0x000310, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_011' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_010) == 0x000318, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_010' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_09) == 0x000320, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_09' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_08) == 0x000328, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_08' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_07) == 0x000330, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_07' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_01) == 0x000338, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_01' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_05) == 0x000340, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_05' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_04) == 0x000348, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_04' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_03) == 0x000350, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_03' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_02) == 0x000358, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_02' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, SM_Valtech_Windmill_Knot_06) == 0x000360, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::SM_Valtech_Windmill_Knot_06' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, DefaultSceneRoot) == 0x000368, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, Spin_curr) == 0x000370, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::Spin_curr' has a wrong offset!");
static_assert(offsetof(ABP_CharacterSelection_Windmill_NoBlade_C, Spin_rate) == 0x000378, "Member 'ABP_CharacterSelection_Windmill_NoBlade_C::Spin_rate' has a wrong offset!");

}

