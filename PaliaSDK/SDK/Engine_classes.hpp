#pragma once

// Dumped with Dumper-7!

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0x268 (0x290 - 0x28)
// Class Engine.Actor
class AActor : public UObject
{
public:
	struct FActorTickFunction                    PrimaryActorTick;                                  // 0x28(0x30)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                        bNetTemporary : 1;                                 // Mask: 0x1, PropSize: 0x10x58(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bOnlyRelevantToOwner : 1;                          // Mask: 0x4, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysRelevant : 1;                               // Mask: 0x8, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReplicateMovement : 1;                            // Mask: 0x10, PropSize: 0x10x58(0x1)(Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bCallPreReplication : 1;                           // Mask: 0x20, PropSize: 0x10x58(0x1)(Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bCallPreReplicationForReplay : 1;                  // Mask: 0x40, PropSize: 0x10x58(0x1)(Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bHidden : 1;                                       // Mask: 0x80, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bTearOff : 1;                                      // Mask: 0x1, PropSize: 0x10x59(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bForceNetAddressable : 1;                          // Mask: 0x2, PropSize: 0x10x59(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bExchangedRoles : 1;                               // Mask: 0x4, PropSize: 0x10x59(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetLoadOnClient : 1;                              // Mask: 0x8, PropSize: 0x10x59(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetUseOwnerRelevancy : 1;                         // Mask: 0x10, PropSize: 0x10x59(0x1)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRelevantForNetworkReplays : 1;                    // Mask: 0x20, PropSize: 0x10x59(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRelevantForLevelBounds : 1;                       // Mask: 0x40, PropSize: 0x10x59(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReplayRewindable : 1;                             // Mask: 0x80, PropSize: 0x10x59(0x1)(Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowTickBeforeBeginPlay : 1;                     // Mask: 0x1, PropSize: 0x10x5A(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoDestroyWhenFinished : 1;                      // Mask: 0x2, PropSize: 0x10x5A(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bCanBeDamaged : 1;                                 // Mask: 0x4, PropSize: 0x10x5A(0x1)(Edit, BlueprintVisible, Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bBlockInput : 1;                                   // Mask: 0x8, PropSize: 0x10x5A(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCollideWhenPlacing : 1;                           // Mask: 0x10, PropSize: 0x10x5A(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFindCameraComponentWhenViewTarget : 1;            // Mask: 0x20, PropSize: 0x10x5A(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateOverlapEventsDuringLevelStreaming : 1;    // Mask: 0x40, PropSize: 0x10x5A(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoresOriginShifting : 1;                        // Mask: 0x80, PropSize: 0x10x5A(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableAutoLODGeneration : 1;                      // Mask: 0x1, PropSize: 0x10x5B(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsEditorOnlyActor : 1;                            // Mask: 0x2, PropSize: 0x10x5B(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bActorSeamlessTraveled : 1;                        // Mask: 0x4, PropSize: 0x10x5B(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReplicates : 1;                                   // Mask: 0x8, PropSize: 0x10x5B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCanBeInCluster : 1;                               // Mask: 0x10, PropSize: 0x10x5B(0x1)(Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bAllowReceiveTickEventOnDedicatedServer : 1;       // Mask: 0x20, PropSize: 0x10x5B(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_16 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bReplicateUsingRegisteredSubObjectList : 1;        // Mask: 0x80, PropSize: 0x10x5B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_17 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bActorEnableCollision : 1;                         // Mask: 0x80, PropSize: 0x10x5C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bActorIsBeingDestroyed : 1;                        // Mask: 0x1, PropSize: 0x10x5D(0x1)(Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_18 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAsyncPhysicsTickEnabled : 1;                      // Mask: 0x20, PropSize: 0x10x5D(0x1)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_19 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EActorUpdateOverlapsMethod        UpdateOverlapsMethodDuringLevelStreaming;          // 0x5E(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EActorUpdateOverlapsMethod        DefaultUpdateOverlapsMethodDuringLevelStreaming;   // 0x5F(0x1)(Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        InitialLifeSpan;                                   // 0x60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CustomTimeDilation;                                // 0x64(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENetRole                          RemoteRole;                                        // 0x68(0x1)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_24D[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RayTracingGroupId;                                 // 0x6C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRepAttachment                        AttachmentReplication;                             // 0x70(0x60)(Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FRepMovement                          ReplicatedMovement;                                // 0xD0(0x70)(Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPrivate)
	class AActor*                                Owner;                                             // 0x140(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  NetDriverName;                                     // 0x148(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ENetRole                          Role;                                              // 0x150(0x1)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class ENetDormancy                      NetDormancy;                                       // 0x151(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod;                      // 0x152(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAutoReceiveInput                 AutoReceiveInput;                                  // 0x153(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        InputPriority;                                     // 0x154(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_252[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UInputComponent*                       InputComponent;                                    // 0x160(0x8)(ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetCullDistanceSquared;                            // 0x168(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NetTag;                                            // 0x16C(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetUpdateFrequency;                                // 0x170(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinNetUpdateFrequency;                             // 0x174(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetPriority;                                       // 0x178(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_258[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class APawn*                                 Instigator;                                        // 0x180(0x8)(BlueprintVisible, Net, ZeroConstructor, RepNotify, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                        Children;                                          // 0x188(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	class USceneComponent*                       RootComponent;                                     // 0x198(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_25A[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          Layers;                                            // 0x1A8(0x10)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UChildActorComponent>   ParentComponent;                                   // 0x1B8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class FName>                          Tags;                                              // 0x1C0(0x10)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnTakeAnyDamage;                                   // 0x1D0(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnTakePointDamage;                                 // 0x1D1(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnTakeRadialDamage;                                // 0x1D2(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnActorBeginOverlap;                               // 0x1D3(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnActorEndOverlap;                                 // 0x1D4(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnBeginCursorOver;                                 // 0x1D5(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnEndCursorOver;                                   // 0x1D6(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnClicked;                                         // 0x1D7(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnReleased;                                        // 0x1D8(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnInputTouchBegin;                                 // 0x1D9(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnInputTouchEnd;                                   // 0x1DA(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnInputTouchEnter;                                 // 0x1DB(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnInputTouchLeave;                                 // 0x1DC(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnActorHit;                                        // 0x1DD(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnDestroyed;                                       // 0x1DE(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnEndPlay;                                         // 0x1DF(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_25F[0x80];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UActorComponent*>               InstanceComponents;                                // 0x260(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>               BlueprintCreatedComponents;                        // 0x270(0x10)(ExportObject, ZeroConstructor, NonTransactional, ContainsInstancedReference, TextExportTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_260[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Actor");
		return Clss;
	}

	bool WasRecentlyRendered(float InTolerance);
	void UserConstructionScript();
	void TearOff();
	void SetTickGroup(enum class ETickingGroup InNewTickGroup);
	void SetTickableWhenPaused(bool InbTickableWhenPaused);
	void SetReplicates(bool InbInReplicates);
	void SetReplicateMovement(bool InbInReplicateMovement);
	void SetRayTracingGroupId(int32 InInRaytracingGroupId);
	void SetOwner(class AActor* InNewOwner);
	void SetNetDormancy(enum class ENetDormancy InNewDormancy);
	void SetLifeSpan(float InInLifespan);
	void SetAutoDestroyWhenFinished(bool InbVal);
	void SetActorTickInterval(float InTickInterval);
	void SetActorTickEnabled(bool InbEnabled);
	void SetActorScale3D(const struct FVector& InNewScale3D);
	void SetActorRelativeScale3D(const struct FVector& InNewRelativeScale);
	void SetActorHiddenInGame(bool InbNewHidden);
	void SetActorEnableCollision(bool InbNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* InPrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* InPrerequisiteActor);
	void ReceiveTick(float InDeltaSeconds);
	void ReceiveRadialDamage(float InDamageReceived, class UDamageType* InDamageType, const struct FVector& InOrigin, struct FHitResult& InHitInfo, class AController* InInstigatedBy, class AActor* InDamageCauser);
	void ReceivePointDamage(float InDamage, class UDamageType* InDamageType, const struct FVector& InHitLocation, const struct FVector& InHitNormal, class UPrimitiveComponent* InHitComponent, class FName InBoneName, const struct FVector& InShotFromDirection, class AController* InInstigatedBy, class AActor* InDamageCauser, struct FHitResult& InHitInfo);
	void ReceiveHit(class UPrimitiveComponent* InMyComp, class AActor* InOther, class UPrimitiveComponent* InOtherComp, bool InbSelfMoved, const struct FVector& InHitLocation, const struct FVector& InHitNormal, const struct FVector& InNormalImpulse, struct FHitResult& InHit);
	void ReceiveEndPlay(enum class EEndPlayReason InEndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAsyncPhysicsTick(float InDeltaSeconds, float InSimSeconds);
	void ReceiveAnyDamage(float InDamage, class UDamageType* InDamageType, class AController* InInstigatedBy, class AActor* InDamageCauser);
	void ReceiveActorOnReleased(const struct FKey& InButtonReleased);
	void ReceiveActorOnInputTouchLeave(enum class ETouchIndex InFingerIndex);
	void ReceiveActorOnInputTouchEnter(enum class ETouchIndex InFingerIndex);
	void ReceiveActorOnInputTouchEnd(enum class ETouchIndex InFingerIndex);
	void ReceiveActorOnInputTouchBegin(enum class ETouchIndex InFingerIndex);
	void ReceiveActorOnClicked(const struct FKey& InButtonPressed);
	void ReceiveActorEndOverlap(class AActor* InOtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* InOtherActor);
	void ReceiveActorBeginCursorOver();
	void PrestreamTextures(float InSeconds, bool InbEnableStreaming, int32 InCinematicTextureGroups);
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float InLoudness, class APawn* InNoiseInstigator, const struct FVector& InNoiseLocation, float InMaxRange, class FName InTag);
	bool K2_TeleportTo(const struct FVector& InDestLocation, const struct FRotator& InDestRotation);
	bool K2_SetActorTransform(struct FTransform& InNewTransform, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	bool K2_SetActorRotation(const struct FRotator& InNewRotation, bool InbTeleportPhysics);
	void K2_SetActorRelativeTransform(struct FTransform& InNewRelativeTransform, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_SetActorRelativeRotation(const struct FRotator& InNewRelativeRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_SetActorRelativeLocation(const struct FVector& InNewRelativeLocation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	bool K2_SetActorLocationAndRotation(const struct FVector& InNewLocation, const struct FRotator& InNewRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	bool K2_SetActorLocation(const struct FVector& InNewLocation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* InPC);
	void K2_OnBecomeViewTarget(class APlayerController* InPC);
	class USceneComponent* K2_GetRootComponent();
	TArray<class UActorComponent*> K2_GetComponentsByClass(TSubclassOf<class UActorComponent> InComponentClass);
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor(enum class EDetachmentRule InLocationRule, enum class EDetachmentRule InRotationRule, enum class EDetachmentRule InScaleRule);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* InParent, class FName InSocketName, enum class EAttachmentRule InLocationRule, enum class EAttachmentRule InRotationRule, enum class EAttachmentRule InScaleRule, bool InbWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* InParentActor, class FName InSocketName, enum class EAttachmentRule InLocationRule, enum class EAttachmentRule InRotationRule, enum class EAttachmentRule InScaleRule, bool InbWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InInParentActor, class FName InInSocketName, enum class EAttachLocation InAttachLocationType, bool InbWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InInParent, class FName InInSocketName, enum class EAttachLocation InAttachLocationType, bool InbWeldSimulatedBodies);
	void K2_AddActorWorldTransformKeepScale(struct FTransform& InDeltaTransform, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddActorWorldTransform(struct FTransform& InDeltaTransform, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddActorWorldRotation(const struct FRotator& InDeltaRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddActorWorldOffset(const struct FVector& InDeltaLocation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddActorLocalTransform(struct FTransform& InNewTransform, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddActorLocalRotation(const struct FRotator& InDeltaRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddActorLocalOffset(const struct FVector& InDeltaLocation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	bool IsOverlappingActor(class AActor* InOther);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* InOtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredHorizontalDistanceTo(class AActor* InOtherActor);
	float GetSquaredDistanceTo(class AActor* InOtherActor);
	enum class ENetRole GetRemoteRole();
	int32 GetRayTracingGroupId();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents);
	void GetOverlappingActors(TArray<class AActor*>* InOverlappingActors, TSubclassOf<class AActor> InClassFilter);
	enum class ENetRole GetLocalRole();
	float GetLifeSpan();
	struct FTransform GetLevelTransform();
	class ULevel* GetLevel();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InInputAxisKey);
	float GetInputAxisValue(class FName InInputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InInputAxisKey);
	float GetHorizontalDotProductTo(class AActor* InOtherActor);
	float GetHorizontalDistanceTo(class AActor* InOtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* InOtherActor);
	float GetDistanceTo(class AActor* InOtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(TSubclassOf<class UActorComponent> InComponentClass, class FName InTag);
	TArray<class UActorComponent*> GetComponentsByInterface(TSubclassOf<class IInterface> InInterface);
	class UActorComponent* GetComponentByClass(TSubclassOf<class UActorComponent> InComponentClass);
	class FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* InOutActors, bool InbResetArray, bool InbRecursivelyIncludeAttachedActors);
	void GetAllChildActors(TArray<class AActor*>* InChildActors, bool InbIncludeDescendants);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* InOutLocation, struct FRotator* InOutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool InbOnlyCollidingComponents, struct FVector* InOrigin, struct FVector* InBoxExtent, bool InbIncludeFromChildActors);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void FinishAddComponent(class UActorComponent* InComponent, bool InbManualAttachment, struct FTransform& InRelativeTransform);
	void EnableInput(class APlayerController* InPlayerController);
	void DisableInput(class APlayerController* InPlayerController);
	void DetachRootComponentFromParent(bool InbMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* InPrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* InPrerequisiteActor);
	class UActorComponent* AddComponentByClass(TSubclassOf<class UActorComponent> InClass, bool InbManualAttachment, struct FTransform& InRelativeTransform, bool InbDeferredFinish);
	class UActorComponent* AddComponent(class FName InTemplateName, bool InbManualAttachment, struct FTransform& InRelativeTransform, class UObject* InComponentTemplateContext, bool InbDeferredFinish);
	bool ActorHasTag(class FName InTag);
};

// 0xF0 (0x380 - 0x290)
// Class Engine.HUD
class AHUD : public AActor
{
public:
	class APlayerController*                     PlayerOwner;                                       // 0x290(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLostFocusPaused : 1;                              // Mask: 0x1, PropSize: 0x10x298(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowHUD : 1;                                      // Mask: 0x2, PropSize: 0x10x298(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowDebugInfo : 1;                                // Mask: 0x4, PropSize: 0x10x298(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1A : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2D2[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CurrentTargetIndex;                                // 0x29C(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowHitBoxDebugInfo : 1;                          // Mask: 0x1, PropSize: 0x10x2A0(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowOverlays : 1;                                 // Mask: 0x2, PropSize: 0x10x2A0(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableDebugTextShadow : 1;                        // Mask: 0x4, PropSize: 0x10x2A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1B : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2D3[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        PostRenderedActors;                                // 0x2A8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D4[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          DebugDisplay;                                      // 0x2C0(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<class FName>                          ToggledDebugCategories;                            // 0x2D0(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class UCanvas*                               Canvas;                                            // 0x2E0(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvas*                               DebugCanvas;                                       // 0x2E8(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDebugTextInfo>                DebugTextList;                                     // 0x2F0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                    ShowDebugTargetDesiredClass;                       // 0x300(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                ShowDebugTargetActor;                              // 0x308(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2D5[0x70];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HUD");
		return Clss;
	}

	void ShowHUD();
	void ShowDebugToggleSubCategory(class FName InCategory);
	void ShowDebugForReticleTargetToggle(TSubclassOf<class AActor> InDesiredClass);
	void ShowDebug(class FName InDebugType);
	void RemoveDebugText(class AActor* InSrcActor, bool InbLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(class FName InBoxName);
	void ReceiveHitBoxEndCursorOver(class FName InBoxName);
	void ReceiveHitBoxClick(class FName InBoxName);
	void ReceiveHitBoxBeginCursorOver(class FName InBoxName);
	void ReceiveDrawHUD(int32 InSizeX, int32 InSizeY);
	struct FVector Project(const struct FVector& InLocation, bool InbClampToZeroPlane);
	void PreviousDebugTarget();
	void NextDebugTarget();
	void GetTextSize(const class FString& InText, float* InOutWidth, float* InOutHeight, class UFont* InFont, float InScale);
	class APlayerController* GetOwningPlayerController();
	class APawn* GetOwningPawn();
	void GetActorsInSelectionRectangle(TSubclassOf<class AActor> InClassFilter, struct FVector2D& InFirstPoint, struct FVector2D& InSecondPoint, TArray<class AActor*>* InOutActors, bool InbIncludeNonCollidingComponents, bool InbActorMustBeFullyEnclosed);
	void DrawTextureSimple(class UTexture* InTexture, float InScreenX, float InScreenY, float InScale, bool InbScalePosition);
	void DrawTexture(class UTexture* InTexture, float InScreenX, float InScreenY, float InScreenW, float InScreenH, float InTextureU, float InTextureV, float InTextureUWidth, float InTextureVHeight, const struct FLinearColor& InTintColor, enum class EBlendMode InBlendMode, float InScale, bool InbScalePosition, float InRotation, const struct FVector2D& InRotPivot);
	void DrawText(const class FString& InText, const struct FLinearColor& InTextColor, float InScreenX, float InScreenY, class UFont* InFont, float InScale, bool InbScalePosition);
	void DrawRect(const struct FLinearColor& InRectColor, float InScreenX, float InScreenY, float InScreenW, float InScreenH);
	void DrawMaterialTriangle(class UMaterialInterface* InMaterial, const struct FVector2D& InV0_Pos, const struct FVector2D& InV1_Pos, const struct FVector2D& InV2_Pos, const struct FVector2D& InV0_UV, const struct FVector2D& InV1_UV, const struct FVector2D& InV2_UV, const struct FLinearColor& InV0_Color, const struct FLinearColor& InV1_Color, const struct FLinearColor& InV2_Color);
	void DrawMaterialSimple(class UMaterialInterface* InMaterial, float InScreenX, float InScreenY, float InScreenW, float InScreenH, float InScale, bool InbScalePosition);
	void DrawMaterial(class UMaterialInterface* InMaterial, float InScreenX, float InScreenY, float InScreenW, float InScreenH, float InMaterialU, float InMaterialV, float InMaterialUWidth, float InMaterialVHeight, float InScale, bool InbScalePosition, float InRotation, const struct FVector2D& InRotPivot);
	void DrawLine(float InStartScreenX, float InStartScreenY, float InEndScreenX, float InEndScreenY, const struct FLinearColor& InLineColor, float InLineThickness);
	void Deproject(float InScreenX, float InScreenY, struct FVector* InWorldPosition, struct FVector* InWorldDirection);
	void AddHitBox(const struct FVector2D& InPosition, const struct FVector2D& InSize, class FName InInName, bool InbConsumesInput, int32 InPriority);
	void AddDebugText(const class FString& InDebugText, class AActor* InSrcActor, float InDuration, const struct FVector& InOffset, const struct FVector& InDesiredOffset, const struct FColor& InTextColor, bool InbSkipOverwriteCheck, bool InbAbsoluteLocation, bool InbKeepAttachedToActor, class UFont* InInFont, float InFontScale, bool InbDrawShadow);
};

// 0x8 (0x30 - 0x28)
// Class Engine.BlueprintAsyncActionBase
class UBlueprintAsyncActionBase : public UObject
{
public:
	uint8                                        Pad_2DB[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintAsyncActionBase");
		return Clss;
	}

	void Activate();
};

// 0x0 (0x30 - 0x30)
// Class Engine.CancellableAsyncAction
class UCancellableAsyncAction : public UBlueprintAsyncActionBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CancellableAsyncAction");
		return Clss;
	}

	bool IsActive();
	void Cancel();
};

// 0x8 (0x30 - 0x28)
// Class Engine.DataAsset
class UDataAsset : public UObject
{
public:
	TSubclassOf<class UDataAsset>                NativeClass;                                       // 0x28(0x8)(ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataAsset");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintFunctionLibrary
class UBlueprintFunctionLibrary : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintFunctionLibrary");
		return Clss;
	}

};

// 0x78 (0xA0 - 0x28)
// Class Engine.ActorComponent
class UActorComponent : public UObject
{
public:
	uint8                                        Pad_2F2[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FActorComponentTickFunction           PrimaryComponentTick;                              // 0x30(0x30)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                          ComponentTags;                                     // 0x60(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x70(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_2F3[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        UCSSerializationIndex;                             // 0x84(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_1E : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNetAddressable : 1;                               // Mask: 0x8, PropSize: 0x10x88(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bReplicateUsingRegisteredSubObjectList : 1;        // Mask: 0x10, PropSize: 0x10x88(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bReplicates : 1;                                   // Mask: 0x20, PropSize: 0x10x88(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_1F : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2F4[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_20 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAutoActivate : 1;                                 // Mask: 0x2, PropSize: 0x10x8A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsActive : 1;                                     // Mask: 0x4, PropSize: 0x10x8A(0x1)(Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bEditableWhenInherited : 1;                        // Mask: 0x8, PropSize: 0x10x8A(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_21 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCanEverAffectNavigation : 1;                      // Mask: 0x20, PropSize: 0x10x8A(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_22 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsEditorOnly : 1;                                 // Mask: 0x80, PropSize: 0x10x8A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F8[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EComponentCreationMethod          CreationMethod;                                    // 0x8D(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnComponentActivated;                              // 0x8E(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnComponentDeactivated;                            // 0x8F(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2F9[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorComponent");
		return Clss;
	}

	void ToggleActive();
	void SetTickGroup(enum class ETickingGroup InNewTickGroup);
	void SetTickableWhenPaused(bool InbTickableWhenPaused);
	void SetIsReplicated(bool InShouldReplicate);
	void SetComponentTickIntervalAndCooldown(float InTickInterval);
	void SetComponentTickInterval(float InTickInterval);
	void SetComponentTickEnabled(bool InbEnabled);
	void SetAutoActivate(bool InbNewAutoActivate);
	void SetActive(bool InbNewActive, bool InbReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* InPrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* InPrerequisiteActor);
	void ReceiveTick(float InDeltaSeconds);
	void ReceiveEndPlay(enum class EEndPlayReason InEndPlayReason);
	void ReceiveBeginPlay();
	void ReceiveAsyncPhysicsTick(float InDeltaSeconds, float InSimSeconds);
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* InObject);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(class FName InTag);
	void AddTickPrerequisiteComponent(class UActorComponent* InPrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* InPrerequisiteActor);
	void Activate(bool InbReset);
};

// 0x88 (0x318 - 0x290)
// Class Engine.Pawn
class APawn : public AActor
{
public:
	uint8                                        Pad_324[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseControllerRotationPitch : 1;                   // Mask: 0x1, PropSize: 0x10x298(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseControllerRotationYaw : 1;                     // Mask: 0x2, PropSize: 0x10x298(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseControllerRotationRoll : 1;                    // Mask: 0x4, PropSize: 0x10x298(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanAffectNavigationGeneration : 1;                // Mask: 0x8, PropSize: 0x10x298(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_28 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsLocalViewTarget : 1;                            // Mask: 0x40, PropSize: 0x10x298(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_29 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_325[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseEyeHeight;                                     // 0x29C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAutoReceiveInput                 AutoPossessPlayer;                                 // 0x2A0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAutoPossessAI                    AutoPossessAI;                                     // 0x2A1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        RemoteViewPitch;                                   // 0x2A2(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_32A[0x5];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AController>               AIControllerClass;                                 // 0x2A8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                          PlayerState;                                       // 0x2B0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_330[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class AController*                           LastHitBy;                                         // 0x2C0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                           Controller;                                        // 0x2C8(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                           PreviousController;                                // 0x2D0(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_332[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastSparseDelegateProperty_            ReceiveControllerChangedDelegate;                  // 0x2DC(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            ReceiveRestartedDelegate;                          // 0x2DD(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_333[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ControlInputVector;                                // 0x2E0(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LastControlInputVector;                            // 0x2F8(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UInputComponent>           OverrideInputComponentClass;                       // 0x310(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Pawn");
		return Clss;
	}

	void SpawnDefaultController();
	void SetCanAffectNavigationGeneration(bool InbNewValue, bool InbForceUpdate);
	void ReceiveUnpossessed(class AController* InOldController);
	void ReceiveRestarted();
	void ReceivePossessed(class AController* InNewController);
	void ReceiveControllerChanged(class AController* InOldController, class AController* InNewController);
	void PawnMakeNoise(float InLoudness, const struct FVector& InNoiseLocation, bool InbUseNoiseMakerLocation, class AActor* InNoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	bool IsPlayerControlled();
	bool IsPawnControlled();
	bool IsMoveInputIgnored();
	bool IsLocallyViewed();
	bool IsLocallyControlled();
	bool IsControlled();
	bool IsBotControlled();
	struct FVector GetPendingMovementInputVector();
	TSubclassOf<class UInputComponent> GetOverrideInputComponentClass();
	struct FVector GetNavAgentLocation();
	class UPawnMovementComponent* GetMovementComponent();
	class AActor* GetMovementBaseActor(class APawn* InPawn);
	class APlayerController* GetLocalViewingPlayerController();
	struct FVector GetLastMovementInputVector();
	struct FRotator GetControlRotation();
	class AController* GetController();
	struct FRotator GetBaseAimRotation();
	void DetachFromControllerPendingDestroy();
	struct FVector ConsumeMovementInputVector();
	void AddMovementInput(const struct FVector& InWorldDirection, float InScaleValue, bool InbForce);
	void AddControllerYawInput(float InVal);
	void AddControllerRollInput(float InVal);
	void AddControllerPitchInput(float InVal);
};

// 0x28 (0x340 - 0x318)
// Class Engine.DefaultPawn
class ADefaultPawn : public APawn
{
public:
	float                                        BaseTurnRate;                                      // 0x318(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BaseLookUpRate;                                    // 0x31C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPawnMovementComponent*                MovementComponent;                                 // 0x320(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                      CollisionComponent;                                // 0x328(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                  MeshComponent;                                     // 0x330(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bAddDefaultMovementBindings : 1;                   // Mask: 0x1, PropSize: 0x10x338(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_33E[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DefaultPawn");
		return Clss;
	}

	void TurnAtRate(float InRate);
	void MoveUp_World(float InVal);
	void MoveRight(float InVal);
	void MoveForward(float InVal);
	void LookUpAtRate(float InRate);
};

// 0x10 (0x38 - 0x28)
// Class Engine.AnimNotify
class UAnimNotify : public UObject
{
public:
	uint8                                        Pad_341[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify");
		return Clss;
	}

	bool Received_Notify(class USkeletalMeshComponent* InMeshComp, class UAnimSequenceBase* InAnimation, struct FAnimNotifyEventReference& InEventReference);
	class FString GetNotifyName();
	float GetDefaultTriggerWeightThreshold();
};

// 0x8 (0x30 - 0x28)
// Class Engine.AnimNotifyState
class UAnimNotifyState : public UObject
{
public:
	uint8                                        Pad_34C[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyState");
		return Clss;
	}

	bool Received_NotifyTick(class USkeletalMeshComponent* InMeshComp, class UAnimSequenceBase* InAnimation, float InFrameDeltaTime, struct FAnimNotifyEventReference& InEventReference);
	bool Received_NotifyEnd(class USkeletalMeshComponent* InMeshComp, class UAnimSequenceBase* InAnimation, struct FAnimNotifyEventReference& InEventReference);
	bool Received_NotifyBegin(class USkeletalMeshComponent* InMeshComp, class UAnimSequenceBase* InAnimation, float InTotalDuration, struct FAnimNotifyEventReference& InEventReference);
	class FString GetNotifyName();
	float GetDefaultTriggerWeightThreshold();
};

// 0x28 (0x50 - 0x28)
// Class Engine.BlueprintCore
class UBlueprintCore : public UObject
{
public:
	TSubclassOf<class UObject>                   SkeletonGeneratedClass;                            // 0x28(0x8)(ZeroConstructor, Transient, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                   GeneratedClass;                                    // 0x30(0x8)(ZeroConstructor, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLegacyNeedToPurgeSkelRefs;                        // 0x38(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_34D[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 BlueprintGuid;                                     // 0x3C(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_34E[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintCore");
		return Clss;
	}

};

// 0x58 (0xA8 - 0x50)
// Class Engine.Blueprint
class UBlueprint : public UBlueprintCore
{
public:
	uint8                                        Pad_34F[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UObject>                   ParentClass;                                       // 0x58(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EBlueprintType                    BlueprintType;                                     // 0x60(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRecompileOnLoad : 1;                              // Mask: 0x1, PropSize: 0x10x61(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasBeenRegenerated : 1;                           // Mask: 0x2, PropSize: 0x10x61(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsRegeneratingOnLoad : 1;                         // Mask: 0x4, PropSize: 0x10x61(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_2B : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_351[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BlueprintSystemVersion;                            // 0x64(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USimpleConstructionScript*             SimpleConstructionScript;                          // 0x68(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>               ComponentTemplates;                                // 0x70(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UTimelineTemplate*>             Timelines;                                         // 0x80(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FBPComponentClassOverride>     ComponentClassOverrides;                           // 0x90(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UInheritableComponentHandler*          InheritableComponentHandler;                       // 0xA0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Blueprint");
		return Clss;
	}

};

// 0x200 (0x2A0 - 0xA0)
// Class Engine.SceneComponent
class USceneComponent : public UActorComponent
{
public:
	uint8                                        Pad_3D5[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class APhysicsVolume>         PhysicsVolume;                                     // 0xA8(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       AttachParent;                                      // 0xB0(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  AttachSocketName;                                  // 0xB8(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>               AttachChildren;                                    // 0xC0(0x10)(ExportObject, Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>               ClientAttachedChildren;                            // 0xD0(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3D8[0x48];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RelativeLocation;                                  // 0x128(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                              RelativeRotation;                                  // 0x140(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                               RelativeScale3D;                                   // 0x158(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                               ComponentVelocity;                                 // 0x170(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bComponentToWorldUpdated : 1;                      // Mask: 0x1, PropSize: 0x10x188(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_31 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAbsoluteLocation : 1;                             // Mask: 0x4, PropSize: 0x10x188(0x1)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bAbsoluteRotation : 1;                             // Mask: 0x8, PropSize: 0x10x188(0x1)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bAbsoluteScale : 1;                                // Mask: 0x10, PropSize: 0x10x188(0x1)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bVisible : 1;                                      // Mask: 0x20, PropSize: 0x10x188(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bShouldBeAttached : 1;                             // Mask: 0x40, PropSize: 0x10x188(0x1)(Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bShouldSnapLocationWhenAttached : 1;               // Mask: 0x80, PropSize: 0x10x188(0x1)(Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bShouldSnapRotationWhenAttached : 1;               // Mask: 0x1, PropSize: 0x10x189(0x1)(Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bShouldSnapScaleWhenAttached : 1;                  // Mask: 0x2, PropSize: 0x10x189(0x1)(Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bShouldUpdatePhysicsVolume : 1;                    // Mask: 0x4, PropSize: 0x10x189(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bHiddenInGame : 1;                                 // Mask: 0x8, PropSize: 0x10x189(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBoundsChangeTriggersStreamingDataRebuild : 1;     // Mask: 0x10, PropSize: 0x10x189(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseAttachParentBound : 1;                         // Mask: 0x20, PropSize: 0x10x189(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bComputeFastLocalBounds : 1;                       // Mask: 0x40, PropSize: 0x10x189(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bComputeBoundsOnceForGame : 1;                     // Mask: 0x80, PropSize: 0x10x189(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bComputedBoundsOnceForGame : 1;                    // Mask: 0x1, PropSize: 0x10x18A(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsNotRenderAttachmentRoot : 1;                    // Mask: 0x2, PropSize: 0x10x18A(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_32 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EComponentMobility                Mobility;                                          // 0x18B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDetailMode                       DetailMode;                                        // 0x18C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            PhysicsVolumeChangedDelegate;                      // 0x18D(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_3DB[0x112];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneComponent");
		return Clss;
	}

	void ToggleVisibility(bool InbPropagateToChildren);
	void SetWorldScale3D(const struct FVector& InNewScale);
	void SetVisibility(bool InbNewVisibility, bool InbPropagateToChildren);
	void SetShouldUpdatePhysicsVolume(bool InbInShouldUpdatePhysicsVolume);
	void SetRelativeScale3D(const struct FVector& InNewScale3D);
	void SetMobility(enum class EComponentMobility InNewMobility);
	void SetHiddenInGame(bool InNewHidden, bool InbPropagateToChildren);
	void SetAbsolute(bool InbNewAbsoluteLocation, bool InbNewAbsoluteRotation, bool InbNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool InOldValue);
	void OnRep_Transform();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(struct FTransform& InNewTransform, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_SetWorldRotation(const struct FRotator& InNewRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_SetWorldLocationAndRotation(const struct FVector& InNewLocation, const struct FRotator& InNewRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_SetWorldLocation(const struct FVector& InNewLocation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_SetRelativeTransform(struct FTransform& InNewTransform, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_SetRelativeRotation(const struct FRotator& InNewRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_SetRelativeLocationAndRotation(const struct FVector& InNewLocation, const struct FRotator& InNewRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_SetRelativeLocation(const struct FVector& InNewLocation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(enum class EDetachmentRule InLocationRule, enum class EDetachmentRule InRotationRule, enum class EDetachmentRule InScaleRule, bool InbCallModify);
	bool K2_AttachToComponent(class USceneComponent* InParent, class FName InSocketName, enum class EAttachmentRule InLocationRule, enum class EAttachmentRule InRotationRule, enum class EAttachmentRule InScaleRule, bool InbWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent* InInParent, class FName InInSocketName, enum class EAttachLocation InAttachType, bool InbWeldSimulatedBodies);
	void K2_AddWorldTransformKeepScale(struct FTransform& InDeltaTransform, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddWorldTransform(struct FTransform& InDeltaTransform, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddWorldRotation(const struct FRotator& InDeltaRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddWorldOffset(const struct FVector& InDeltaLocation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddRelativeRotation(const struct FRotator& InDeltaRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddRelativeLocation(const struct FVector& InDeltaLocation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddLocalTransform(struct FTransform& InDeltaTransform, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddLocalRotation(const struct FRotator& InDeltaRotation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	void K2_AddLocalOffset(const struct FVector& InDeltaLocation, bool InbSweep, struct FHitResult* InSweepHitResult, bool InbTeleport);
	bool IsVisible();
	bool IsSimulatingPhysics(class FName InBoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(class FName InInSocketName, enum class ERelativeTransformSpace InTransformSpace);
	struct FRotator GetSocketRotation(class FName InInSocketName);
	struct FQuat GetSocketQuaternion(class FName InInSocketName);
	struct FVector GetSocketLocation(class FName InInSocketName);
	bool GetShouldUpdatePhysicsVolume();
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* InParents);
	int32 GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool InbIncludeAllDescendants, TArray<class USceneComponent*>* InChildren);
	class USceneComponent* GetChildComponent(int32 InChildIndex);
	class FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<class FName> GetAllSocketNames();
	bool DoesSocketExist(class FName InInSocketName);
	void DetachFromParent(bool InbMaintainWorldPosition, bool InbCallModify);
};

// 0x298 (0x538 - 0x2A0)
// Class Engine.PrimitiveComponent
class UPrimitiveComponent : public USceneComponent
{
public:
	uint8                                        Pad_53D[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinDrawDistance;                                   // 0x2B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LDMaxDrawDistance;                                 // 0x2B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CachedMaxDrawDistance;                             // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESceneDepthPriorityGroup          DepthPriorityGroup;                                // 0x2BC(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESceneDepthPriorityGroup          ViewOwnerDepthPriorityGroup;                       // 0x2BD(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EIndirectLightingCacheQuality     IndirectLightingCacheQuality;                      // 0x2BE(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ELightmapType                     LightmapType;                                      // 0x2BF(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsValidTextureStreamingBuiltData : 1;             // Mask: 0x1, PropSize: 0x10x2C0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNeverDistanceCull : 1;                            // Mask: 0x2, PropSize: 0x10x2C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_4D : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAlwaysCreatePhysicsState : 1;                     // Mask: 0x80, PropSize: 0x10x2C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateOverlapEvents : 1;                        // Mask: 0x1, PropSize: 0x10x2C1(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bMultiBodyOverlap : 1;                             // Mask: 0x2, PropSize: 0x10x2C1(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTraceComplexOnMove : 1;                           // Mask: 0x4, PropSize: 0x10x2C1(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReturnMaterialOnMove : 1;                         // Mask: 0x8, PropSize: 0x10x2C1(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseViewOwnerDepthPriorityGroup : 1;               // Mask: 0x10, PropSize: 0x10x2C1(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowCullDistanceVolume : 1;                      // Mask: 0x20, PropSize: 0x10x2C1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVisibleInReflectionCaptures : 1;                  // Mask: 0x40, PropSize: 0x10x2C1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVisibleInRealTimeSkyCaptures : 1;                 // Mask: 0x80, PropSize: 0x10x2C1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVisibleInRayTracing : 1;                          // Mask: 0x1, PropSize: 0x10x2C2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderInMainPass : 1;                             // Mask: 0x2, PropSize: 0x10x2C2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderInDepthPass : 1;                            // Mask: 0x4, PropSize: 0x10x2C2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReceivesDecals : 1;                               // Mask: 0x8, PropSize: 0x10x2C2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOwnerNoSee : 1;                                   // Mask: 0x10, PropSize: 0x10x2C2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOnlyOwnerSee : 1;                                 // Mask: 0x20, PropSize: 0x10x2C2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTreatAsBackgroundForOcclusion : 1;                // Mask: 0x40, PropSize: 0x10x2C2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseAsOccluder : 1;                                // Mask: 0x80, PropSize: 0x10x2C2(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSelectable : 1;                                   // Mask: 0x1, PropSize: 0x10x2C3(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceMipStreaming : 1;                            // Mask: 0x2, PropSize: 0x10x2C3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasPerInstanceHitProxies : 1;                     // Mask: 0x4, PropSize: 0x10x2C3(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastShadow : 1;                                    // Mask: 0x8, PropSize: 0x10x2C3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEmissiveLightSource : 1;                          // Mask: 0x10, PropSize: 0x10x2C3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectDynamicIndirectLighting : 1;                // Mask: 0x20, PropSize: 0x10x2C3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectIndirectLightingWhileHidden : 1;            // Mask: 0x40, PropSize: 0x10x2C3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectDistanceFieldLighting : 1;                  // Mask: 0x80, PropSize: 0x10x2C3(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastDynamicShadow : 1;                            // Mask: 0x1, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastStaticShadow : 1;                             // Mask: 0x2, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastVolumetricTranslucentShadow : 1;              // Mask: 0x4, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastContactShadow : 1;                            // Mask: 0x8, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSelfShadowOnly : 1;                               // Mask: 0x10, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastFarShadow : 1;                                // Mask: 0x20, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastInsetShadow : 1;                              // Mask: 0x40, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastCinematicShadow : 1;                          // Mask: 0x80, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastHiddenShadow : 1;                             // Mask: 0x1, PropSize: 0x10x2C5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastShadowAsTwoSided : 1;                         // Mask: 0x2, PropSize: 0x10x2C5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLightAsIfStatic : 1;                              // Mask: 0x4, PropSize: 0x10x2C5(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLightAttachmentsAsGroup : 1;                      // Mask: 0x8, PropSize: 0x10x2C5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bExcludeFromLightAttachmentGroup : 1;              // Mask: 0x10, PropSize: 0x10x2C5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReceiveMobileCSMShadows : 1;                      // Mask: 0x20, PropSize: 0x10x2C5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSingleSampleShadowFromStationaryLights : 1;       // Mask: 0x40, PropSize: 0x10x2C5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreRadialImpulse : 1;                          // Mask: 0x80, PropSize: 0x10x2C5(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreRadialForce : 1;                            // Mask: 0x1, PropSize: 0x10x2C6(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyImpulseOnDamage : 1;                         // Mask: 0x2, PropSize: 0x10x2C6(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReplicatePhysicsToAutonomousProxy : 1;            // Mask: 0x4, PropSize: 0x10x2C6(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFillCollisionUnderneathForNavmesh : 1;            // Mask: 0x8, PropSize: 0x10x2C6(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        AlwaysLoadOnClient : 1;                            // Mask: 0x10, PropSize: 0x10x2C6(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        AlwaysLoadOnServer : 1;                            // Mask: 0x20, PropSize: 0x10x2C6(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseEditorCompositing : 1;                         // Mask: 0x40, PropSize: 0x10x2C6(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsBeingMovedByEditor : 1;                         // Mask: 0x80, PropSize: 0x10x2C6(0x1)(Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderCustomDepth : 1;                            // Mask: 0x1, PropSize: 0x10x2C7(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVisibleInSceneCaptureOnly : 1;                    // Mask: 0x2, PropSize: 0x10x2C7(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHiddenInSceneCapture : 1;                         // Mask: 0x4, PropSize: 0x10x2C7(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRayTracingFarField : 1;                           // Mask: 0x8, PropSize: 0x10x2C7(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_4E : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHasNoStreamableTextures : 1;                      // Mask: 0x20, PropSize: 0x10x2C7(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_4F : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EHasCustomNavigableGeometry       bHasCustomNavigableGeometry;                       // 0x2C8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_55D[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ECanBeCharacterBase               CanCharacterStepUpOn;                              // 0x2CA(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                     LightingChannels;                                  // 0x2CB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                        RayTracingGroupId;                                 // 0x2CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        VisibilityId;                                      // 0x2D0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CustomDepthStencilValue;                           // 0x2D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomPrimitiveData                  CustomPrimitiveData;                               // 0x2D8(0x10)(Edit, NativeAccessSpecifierPrivate)
	struct FCustomPrimitiveData                  CustomPrimitiveDataInternal;                       // 0x2E8(0x10)(Transient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_55F[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TranslucencySortPriority;                          // 0x300(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucencySortDistanceOffset;                    // 0x304(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URuntimeVirtualTexture*>        RuntimeVirtualTextures;                            // 0x308(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int8                                         VirtualTextureLodBias;                             // 0x318(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                         VirtualTextureCullMips;                            // 0x319(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                         VirtualTextureMinCoverage;                         // 0x31A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType;                      // 0x31B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_560[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BoundsScale;                                       // 0x32C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_561[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        MoveIgnoreActors;                                  // 0x340(0x10)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>           MoveIgnoreComponents;                              // 0x350(0x10)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_562[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBodyInstance                         BodyInstance;                                      // 0x370(0x190)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnComponentHit;                                    // 0x500(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnComponentBeginOverlap;                           // 0x501(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnComponentEndOverlap;                             // 0x502(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnComponentWake;                                   // 0x503(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnComponentSleep;                                  // 0x504(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_564[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastSparseDelegateProperty_            OnComponentPhysicsStateChanged;                    // 0x506(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnBeginCursorOver;                                 // 0x507(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnEndCursorOver;                                   // 0x508(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnClicked;                                         // 0x509(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnReleased;                                        // 0x50A(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnInputTouchBegin;                                 // 0x50B(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnInputTouchEnd;                                   // 0x50C(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnInputTouchEnter;                                 // 0x50D(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_            OnInputTouchLeave;                                 // 0x50E(0x1)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	enum class ERayTracingGroupCullingPriority   RayTracingGroupCullingPriority;                    // 0x50F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERendererStencilMask              CustomDepthStencilWriteMask;                       // 0x510(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_565[0x1F];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimitiveComponent*                   LODParentPrimitive;                                // 0x530(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PrimitiveComponent");
		return Clss;
	}

	bool WasRecentlyRendered(float InTolerance);
	void WakeRigidBody(class FName InBoneName);
	void WakeAllRigidBodies();
	void SetWalkableSlopeOverride(struct FWalkableSlopeOverride& InNewOverride);
	void SetVisibleInSceneCaptureOnly(bool InbValue);
	void SetVisibleInRayTracing(bool InbNewVisibleInRayTracing);
	void SetVectorParameterForDefaultCustomPrimitiveData(class FName InParameterName, const struct FVector4& InValue);
	void SetVectorParameterForCustomPrimitiveData(class FName InParameterName, const struct FVector4& InValue);
	void SetUseCCD(bool InInUseCCD, class FName InBoneName);
	void SetTranslucentSortPriority(int32 InNewTranslucentSortPriority);
	void SetTranslucencySortDistanceOffset(float InNewTranslucencySortDistanceOffset);
	void SetSingleSampleShadowFromStationaryLights(bool InbNewSingleSampleShadowFromStationaryLights);
	void SetSimulatePhysics(bool InbSimulate);
	void SetScalarParameterForDefaultCustomPrimitiveData(class FName InParameterName, float InValue);
	void SetScalarParameterForCustomPrimitiveData(class FName InParameterName, float InValue);
	void SetRenderInMainPass(bool InbValue);
	void SetRenderInDepthPass(bool InbValue);
	void SetRenderCustomDepth(bool InbValue);
	void SetReceivesDecals(bool InbNewReceivesDecals);
	void SetPhysMaterialOverride(class UPhysicalMaterial* InNewPhysMaterial);
	void SetPhysicsMaxAngularVelocityInRadians(float InNewMaxAngVel, bool InbAddToCurrent, class FName InBoneName);
	void SetPhysicsMaxAngularVelocityInDegrees(float InNewMaxAngVel, bool InbAddToCurrent, class FName InBoneName);
	void SetPhysicsLinearVelocity(const struct FVector& InNewVel, bool InbAddToCurrent, class FName InBoneName);
	void SetPhysicsAngularVelocityInRadians(const struct FVector& InNewAngVel, bool InbAddToCurrent, class FName InBoneName);
	void SetPhysicsAngularVelocityInDegrees(const struct FVector& InNewAngVel, bool InbAddToCurrent, class FName InBoneName);
	void SetOwnerNoSee(bool InbNewOwnerNoSee);
	void SetOnlyOwnerSee(bool InbNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool InbNewNotifyRigidBodyCollision);
	void SetMaterialByName(class FName InMaterialSlotName, class UMaterialInterface* InMaterial);
	void SetMaterial(int32 InElementIndex, class UMaterialInterface* InMaterial);
	void SetMassScale(class FName InBoneName, float InInMassScale);
	void SetMassOverrideInKg(class FName InBoneName, float InMassInKg, bool InbOverrideMass);
	void SetLinearDamping(float InInDamping);
	void SetLightingChannels(bool InbChannel0, bool InbChannel1, bool InbChannel2);
	void SetLightAttachmentsAsGroup(bool InbInLightAttachmentsAsGroup);
	void SetHiddenInSceneCapture(bool InbValue);
	void SetGenerateOverlapEvents(bool InbInGenerateOverlapEvents);
	void SetExcludeFromLightAttachmentGroup(bool InbInExcludeFromLightAttachmentGroup);
	void SetEnableGravity(bool InbGravityEnabled);
	void SetEmissiveLightSource(bool InNewEmissiveLightSource);
	void SetDefaultCustomPrimitiveDataVector4(int32 InDataIndex, const struct FVector4& InValue);
	void SetDefaultCustomPrimitiveDataVector3(int32 InDataIndex, const struct FVector& InValue);
	void SetDefaultCustomPrimitiveDataVector2(int32 InDataIndex, const struct FVector2D& InValue);
	void SetDefaultCustomPrimitiveDataFloat(int32 InDataIndex, float InValue);
	void SetCustomPrimitiveDataVector4(int32 InDataIndex, const struct FVector4& InValue);
	void SetCustomPrimitiveDataVector3(int32 InDataIndex, const struct FVector& InValue);
	void SetCustomPrimitiveDataVector2(int32 InDataIndex, const struct FVector2D& InValue);
	void SetCustomPrimitiveDataFloat(int32 InDataIndex, float InValue);
	void SetCustomDepthStencilWriteMask(enum class ERendererStencilMask InWriteMaskBit);
	void SetCustomDepthStencilValue(int32 InValue);
	void SetCullDistance(float InNewCullDistance);
	void SetConstraintMode(enum class EDOFMode InConstraintMode);
	void SetCollisionResponseToChannel(enum class ECollisionChannel InChannel, enum class ECollisionResponse InNewResponse);
	void SetCollisionResponseToAllChannels(enum class ECollisionResponse InNewResponse);
	void SetCollisionProfileName(class FName InInCollisionProfileName, bool InbUpdateOverlaps);
	void SetCollisionObjectType(enum class ECollisionChannel InChannel);
	void SetCollisionEnabled(enum class ECollisionEnabled InNewType);
	void SetCenterOfMass(const struct FVector& InCenterOfMassOffset, class FName InBoneName);
	void SetCastShadow(bool InNewCastShadow);
	void SetCastInsetShadow(bool InbInCastInsetShadow);
	void SetCastHiddenShadow(bool InNewCastHiddenShadow);
	void SetCastContactShadow(bool InbInCastContactShadow);
	void SetBoundsScale(float InNewBoundsScale);
	void SetAngularDamping(float InInDamping);
	void SetAllUseCCD(bool InInUseCCD);
	void SetAllPhysicsLinearVelocity(const struct FVector& InNewVel, bool InbAddToCurrent);
	void SetAllPhysicsAngularVelocityInRadians(struct FVector& InNewAngVel, bool InbAddToCurrent);
	void SetAllPhysicsAngularVelocityInDegrees(struct FVector& InNewAngVel, bool InbAddToCurrent);
	void SetAllMassScale(float InInMassScale);
	struct FVector ScaleByMomentOfInertia(const struct FVector& InInputVector, class FName InBoneName);
	void PutRigidBodyToSleep(class FName InBoneName);
	bool K2_SphereTraceComponent(const struct FVector& InTraceStart, const struct FVector& InTraceEnd, float InSphereRadius, bool InbTraceComplex, bool InbShowTrace, bool InbPersistentShowTrace, struct FVector* InHitLocation, struct FVector* InHitNormal, class FName* InBoneName, struct FHitResult* InOutHit);
	bool K2_SphereOverlapComponent(const struct FVector& InInSphereCentre, float InInSphereRadius, bool InbTraceComplex, bool InbShowTrace, bool InbPersistentShowTrace, struct FVector* InHitLocation, struct FVector* InHitNormal, class FName* InBoneName, struct FHitResult* InOutHit);
	bool K2_LineTraceComponent(const struct FVector& InTraceStart, const struct FVector& InTraceEnd, bool InbTraceComplex, bool InbShowTrace, bool InbPersistentShowTrace, struct FVector* InHitLocation, struct FVector* InHitNormal, class FName* InBoneName, struct FHitResult* InOutHit);
	bool K2_IsQueryCollisionEnabled();
	bool K2_IsPhysicsCollisionEnabled();
	bool K2_IsCollisionEnabled();
	bool K2_BoxOverlapComponent(const struct FVector& InInBoxCentre, const struct FBox& InInbox, bool InbTraceComplex, bool InbShowTrace, bool InbPersistentShowTrace, struct FVector* InHitLocation, struct FVector* InHitNormal, class FName* InBoneName, struct FHitResult* InOutHit);
	bool IsOverlappingComponent(class UPrimitiveComponent* InOtherComp);
	bool IsOverlappingActor(class AActor* InOther);
	bool IsGravityEnabled();
	bool IsAnyRigidBodyAwake();
	void InvalidateLumenSurfaceCache();
	void IgnoreComponentWhenMoving(class UPrimitiveComponent* InComponent, bool InbShouldIgnore);
	void IgnoreActorWhenMoving(class AActor* InActor, bool InbShouldIgnore);
	struct FWalkableSlopeOverride GetWalkableSlopeOverride();
	struct FVector GetPhysicsLinearVelocityAtPoint(const struct FVector& InPoint, class FName InBoneName);
	struct FVector GetPhysicsLinearVelocity(class FName InBoneName);
	struct FVector GetPhysicsAngularVelocityInRadians(class FName InBoneName);
	struct FVector GetPhysicsAngularVelocityInDegrees(class FName InBoneName);
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOutOverlappingComponents);
	void GetOverlappingActors(TArray<class AActor*>* InOverlappingActors, TSubclassOf<class AActor> InClassFilter);
	int32 GetNumMaterials();
	class UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32 InFaceIndex, int32* InSectionIndex);
	class UMaterialInterface* GetMaterial(int32 InElementIndex);
	float GetMassScale(class FName InBoneName);
	float GetMass();
	float GetLinearDamping();
	struct FVector GetInertiaTensor(class FName InBoneName);
	bool GetGenerateOverlapEvents();
	int32 GetCustomPrimitiveDataIndexForVectorParameter(class FName InParameterName);
	int32 GetCustomPrimitiveDataIndexForScalarParameter(class FName InParameterName);
	enum class ECollisionResponse GetCollisionResponseToChannel(enum class ECollisionChannel InChannel);
	class FName GetCollisionProfileName();
	enum class ECollisionChannel GetCollisionObjectType();
	enum class ECollisionEnabled GetCollisionEnabled();
	float GetClosestPointOnCollision(struct FVector& InPoint, struct FVector* InOutPointOnBody, class FName InBoneName);
	struct FVector GetCenterOfMass(class FName InBoneName);
	struct FBodyInstanceAsyncPhysicsTickHandle GetBodyInstanceAsyncPhysicsTickHandle(class FName InBoneName, bool InbGetWelded, int32 InIndex);
	float GetAngularDamping();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32 InElementIndex, class UMaterialInterface* InSourceMaterial, class FName InOptionalName);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32 InElementIndex, class UMaterialInterface* InParent);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32 InElementIndex);
	TArray<class UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();
	TArray<class AActor*> CopyArrayOfMoveIgnoreActors();
	void ClearMoveIgnoreComponents();
	void ClearMoveIgnoreActors();
	bool CanCharacterStepUp(class APawn* InPawn);
	void AddVelocityChangeImpulseAtLocation(const struct FVector& InImpulse, const struct FVector& InLocation, class FName InBoneName);
	void AddTorqueInRadians(const struct FVector& InTorque, class FName InBoneName, bool InbAccelChange);
	void AddTorqueInDegrees(const struct FVector& InTorque, class FName InBoneName, bool InbAccelChange);
	void AddRadialImpulse(const struct FVector& InOrigin, float InRadius, float InStrength, enum class ERadialImpulseFalloff InFalloff, bool InbVelChange);
	void AddRadialForce(const struct FVector& InOrigin, float InRadius, float InStrength, enum class ERadialImpulseFalloff InFalloff, bool InbAccelChange);
	void AddImpulseAtLocation(const struct FVector& InImpulse, const struct FVector& InLocation, class FName InBoneName);
	void AddImpulse(const struct FVector& InImpulse, class FName InBoneName, bool InbVelChange);
	void AddForceAtLocationLocal(const struct FVector& InForce, const struct FVector& InLocation, class FName InBoneName);
	void AddForceAtLocation(const struct FVector& InForce, const struct FVector& InLocation, class FName InBoneName);
	void AddForce(const struct FVector& InForce, class FName InBoneName, bool InbAccelChange);
	void AddAngularImpulseInRadians(const struct FVector& InImpulse, class FName InBoneName, bool InbVelChange);
	void AddAngularImpulseInDegrees(const struct FVector& InImpulse, class FName InBoneName, bool InbVelChange);
};

// 0x0 (0x538 - 0x538)
// Class Engine.FXSystemComponent
class UFXSystemComponent : public UPrimitiveComponent
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("FXSystemComponent");
		return Clss;
	}

	void SetVectorParameter(class FName InParameterName, const struct FVector& InParam);
	void SetUseAutoManageAttachment(bool InbAutoManage);
	void SetIntParameter(class FName InParameterName, int32 InParam);
	void SetFloatParameter(class FName InParameterName, float InParam);
	void SetEmitterEnable(class FName InEmitterName, bool InbNewEnableState);
	void SetColorParameter(class FName InParameterName, const struct FLinearColor& InParam);
	void SetBoolParameter(class FName InParameterName, bool InParam);
	void SetAutoAttachmentParameters(class USceneComponent* InParent, class FName InSocketName, enum class EAttachmentRule InLocationRule, enum class EAttachmentRule InRotationRule, enum class EAttachmentRule InScaleRule);
	void SetActorParameter(class FName InParameterName, class AActor* InParam);
	void ReleaseToPool();
	class UFXSystemAsset* GetFXSystemAsset();
};

// 0x8 (0x30 - 0x28)
// Class Engine.FXSystemAsset
class UFXSystemAsset : public UObject
{
public:
	uint32                                       MaxPoolSize;                                       // 0x28(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       PoolPrimeSize;                                     // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("FXSystemAsset");
		return Clss;
	}

};

// 0x38 (0x2C8 - 0x290)
// Class Engine.Brush
class ABrush : public AActor
{
public:
	enum class EBrushType                        BrushType;                                         // 0x290(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_57E[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                BrushColor;                                        // 0x294(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PolyFlags;                                         // 0x298(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bColored : 1;                                      // Mask: 0x1, PropSize: 0x10x29C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSolidWhenSelected : 1;                            // Mask: 0x2, PropSize: 0x10x29C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPlaceableFromClassBrowser : 1;                    // Mask: 0x4, PropSize: 0x10x29C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNotForClientOrServer : 1;                         // Mask: 0x8, PropSize: 0x10x29C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_50 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_580[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UModel*                                Brush;                                             // 0x2A0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrushComponent*                       BrushComponent;                                    // 0x2A8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bInManipulation : 1;                               // Mask: 0x1, PropSize: 0x10x2B0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_51 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_581[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGeomSelection>                SavedSelections;                                   // 0x2B8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Brush");
		return Clss;
	}

};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.Volume
class AVolume : public ABrush
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Volume");
		return Clss;
	}

};

// 0x870 (0x898 - 0x28)
// Class Engine.World
class UWorld : public UObject
{
public:
	uint8                                        Pad_585[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevel*                                PersistentLevel;                                   // 0x30(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                            NetDriver;                                         // 0x38(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                   LineBatcher;                                       // 0x40(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                   PersistentLineBatcher;                             // 0x48(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                   ForegroundLineBatcher;                             // 0x50(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameNetworkManager*                   NetworkManager;                                    // 0x58(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsCollisionHandler*              PhysicsCollisionHandler;                           // 0x60(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                       ExtraReferencedObjects;                            // 0x68(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UObject*>                       PerModuleDataObjects;                              // 0x78(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class ULevelStreaming*>               StreamingLevels;                                   // 0x88(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FStreamingLevelsToConsider            StreamingLevelsToConsider;                         // 0x98(0x28)(Transient, DuplicateTransient, NativeAccessSpecifierPrivate)
	class AServerStreamingLevelsVisibility*      ServerStreamingLevelsVisibility;                   // 0xC0(0x8)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                StreamingLevelsPrefix;                             // 0xC8(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_588[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevel*                                CurrentLevelPendingVisibility;                     // 0xE0(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevel*                                CurrentLevelPendingInvisibility;                   // 0xE8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDemoNetDriver*                        DemoNetDriver;                                     // 0xF0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AParticleEventManager*                 MyParticleEventManager;                            // 0xF8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APhysicsVolume*                        DefaultPhysicsVolume;                              // 0x100(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_58A[0x36];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_52 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAreConstraintsDirty : 1;                          // Mask: 0x4, PropSize: 0x10x13E(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_53 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_58D[0x9];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UNavigationSystemBase*                 NavigationSystem;                                  // 0x148(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameModeBase*                         AuthorityGameMode;                                 // 0x150(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameStateBase*                        GameState;                                         // 0x158(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAISystemBase*                         AISystem;                                          // 0x160(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAvoidanceManager*                     AvoidanceManager;                                  // 0x168(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ULevel*>                        Levels;                                            // 0x170(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FLevelCollection>              LevelCollections;                                  // 0x180(0x10)(ZeroConstructor, Transient, NonTransactional, NativeAccessSpecifierPrivate)
	uint8                                        Pad_591[0x28];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UGameInstance*                         OwningGameInstance;                                // 0x1B8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                      // 0x1C0(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UCanvas*                               CanvasForRenderingToTarget;                        // 0x1D0(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvas*                               CanvasForDrawMaterialToRenderTarget;               // 0x1D8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_594[0x70];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicsFieldComponent*                PhysicsField;                                      // 0x250(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       LWILastAssignedUID;                                // 0x258(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_595[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<class UActorComponent*>                 ComponentsThatNeedPreEndOfFrameSync;               // 0x260(0x50)(ExportObject, Transient, NonTransactional, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>               ComponentsThatNeedEndOfFrameUpdate;                // 0x2B0(0x10)(ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>               ComponentsThatNeedEndOfFrameUpdate_OnGameThread;   // 0x2C0(0x10)(ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_599[0x3F8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorldComposition*                     WorldComposition;                                  // 0x6C8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UContentBundleManager*                 ContentBundleManager;                              // 0x6D0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_59B[0xA8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FWorldPSCPool                         PSCPool;                                           // 0x780(0x58)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_59C[0xC0];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("World");
		return Clss;
	}

	class AWorldSettings* K2_GetWorldSettings();
	void HandleTimelineScrubbed();
};

// 0x8 (0x30 - 0x28)
// Class Engine.Subsystem
class USubsystem : public UObject
{
public:
	uint8                                        Pad_59F[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Subsystem");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.DynamicSubsystem
class UDynamicSubsystem : public USubsystem
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DynamicSubsystem");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.EngineSubsystem
class UEngineSubsystem : public UDynamicSubsystem
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineSubsystem");
		return Clss;
	}

};

// 0x198 (0x1C0 - 0x28)
// Class Engine.GameInstance
class UGameInstance : public UObject
{
public:
	uint8                                        Pad_5AB[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ULocalPlayer*>                  LocalPlayers;                                      // 0x38(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UOnlineSession*                        OnlineSession;                                     // 0x48(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UObject*>                       ReferencedObjects;                                 // 0x50(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_5AD[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPawnControllerChangedDelegates;                  // 0x78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_5AE[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnInputDeviceConnectionChange;                     // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnUserInputDevicePairingChange;                    // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_5AF[0x100];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameInstance");
		return Clss;
	}

	void ReceiveShutdown();
	void ReceiveInit();
	void HandleTravelError(enum class ETravelFailure InFailureType);
	void HandleNetworkError(enum class ENetworkFailure InFailureType, bool InbIsServer);
	void DebugRemovePlayer(int32 InControllerId);
	void DebugCreatePlayer(int32 InControllerId);
};

// 0x0 (0x30 - 0x30)
// Class Engine.GameInstanceSubsystem
class UGameInstanceSubsystem : public USubsystem
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameInstanceSubsystem");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.OnlineBlueprintCallProxyBase
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("OnlineBlueprintCallProxyBase");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.Player
class UPlayer : public UObject
{
public:
	uint8                                        Pad_5B0[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerController*                     PlayerController;                                  // 0x30(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CurrentNetSpeed;                                   // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ConfiguredInternetSpeed;                           // 0x3C(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ConfiguredLanSpeed;                                // 0x40(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5B1[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Player");
		return Clss;
	}

};

// 0x32C0 (0x3308 - 0x48)
// Class Engine.NetConnection
class UNetConnection : public UPlayer
{
public:
	TArray<class UChildConnection*>              Children;                                          // 0x48(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	class UNetDriver*                            Driver;                                            // 0x58(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPackageMap>               PackageMapClass;                                   // 0x60(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackageMap*                           PackageMap;                                        // 0x68(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UChannel*>                      OpenChannels;                                      // 0x70(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        SentTemporaries;                                   // 0x80(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class AActor*                                ViewTarget;                                        // 0x90(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                OwningActor;                                       // 0x98(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxPacket;                                         // 0xA0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        InternalAck : 1;                                   // Mask: 0x1, PropSize: 0x10xA4(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_54 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_5B2[0xBB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FUniqueNetIdRepl                      PlayerId;                                          // 0x160(0x30)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5B3[0x48];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastReceiveTime;                                   // 0x1D8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5B4[0x11E0];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DefaultMaxChannelSize;                             // 0x13C0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5B5[0x284];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UChannel*>                      ChannelsToTick;                                    // 0x1648(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5B6[0x1CB0];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetConnection");
		return Clss;
	}

};

// 0x768 (0x790 - 0x28)
// Class Engine.NetDriver
class UNetDriver : public UObject
{
public:
	uint8                                        Pad_5B9[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                NetConnectionClassName;                            // 0x30(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ReplicationDriverClassName;                        // 0x40(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ReplicationBridgeClassName;                        // 0x50(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxDownloadSize;                                   // 0x60(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClampListenServerTickRate : 1;                    // Mask: 0x1, PropSize: 0x10x64(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_55 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_5BA[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NetServerMaxTickRate;                              // 0x68(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxNetTickRate;                                    // 0x6C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxInternetClientRate;                             // 0x70(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxClientRate;                                     // 0x74(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ServerTravelPause;                                 // 0x78(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpawnPrioritySeconds;                              // 0x7C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RelevantTimeout;                                   // 0x80(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        KeepAliveTime;                                     // 0x84(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialConnectTimeout;                             // 0x88(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConnectionTimeout;                                 // 0x8C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeoutMultiplierForUnoptimizedBuilds;             // 0x90(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5BB[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UNetConnection*                        ServerConnection;                                  // 0x98(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNetConnection*>                ClientConnections;                                 // 0xA0(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_5BC[0x60];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RecentlyDisconnectedTrackingTime;                  // 0x110(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5BD[0x3C];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                World;                                             // 0x150(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackage*                              WorldPackage;                                      // 0x158(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5BE[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UObject>                   NetConnectionClass;                                // 0x180(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                   ReplicationDriverClass;                            // 0x188(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                   ReplicationBridgeClass;                            // 0x190(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5BF[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  NetDriverName;                                     // 0x1A8(0x8)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChannelDefinition>            ChannelDefinitions;                                // 0x1B0(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<class FName, struct FChannelDefinition> ChannelDefinitionMap;                              // 0x1C0(0x50)(NativeAccessSpecifierPublic)
	TArray<class UChannel*>                      ActorChannelPool;                                  // 0x210(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5C0[0x21];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_56 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNoTimeouts : 1;                                   // Mask: 0x40, PropSize: 0x10x241(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNeverApplyNetworkEmulationSettings : 1;           // Mask: 0x80, PropSize: 0x10x241(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5C1[0x4DE];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UReplicationDriver*                    ReplicationDriver;                                 // 0x720(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_5C2[0x68];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetDriver");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.OnlineEngineInterface
class UOnlineEngineInterface : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("OnlineEngineInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.OnlineSession
class UOnlineSession : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("OnlineSession");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ReplicationDriver
class UReplicationDriver : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReplicationDriver");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ReplicationConnectionDriver
class UReplicationConnectionDriver : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReplicationConnectionDriver");
		return Clss;
	}

};

// 0x20 (0x558 - 0x538)
// Class Engine.ShapeComponent
class UShapeComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                            ShapeBodySetup;                                    // 0x538(0x8)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                ShapeColor;                                        // 0x540(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawOnlyIfSelected : 1;                           // Mask: 0x1, PropSize: 0x10x544(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldCollideWhenPlacing : 1;                     // Mask: 0x2, PropSize: 0x10x544(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDynamicObstacle : 1;                              // Mask: 0x4, PropSize: 0x10x544(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_57 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_5C3[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UNavAreaBase>              AreaClassOverride;                                 // 0x548(0x8)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUseSystemDefaultObstacleAreaClass : 1;            // Mask: 0x1, PropSize: 0x10x550(0x1)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5C4[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ShapeComponent");
		return Clss;
	}

};

// 0x28 (0x580 - 0x558)
// Class Engine.BoxComponent
class UBoxComponent : public UShapeComponent
{
public:
	struct FVector                               BoxExtent;                                         // 0x558(0x18)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LineThickness;                                     // 0x570(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5C7[0xC];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BoxComponent");
		return Clss;
	}

	void SetLineThickness(float InThickness);
	void SetBoxExtent(const struct FVector& InInBoxExtent, bool InbUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
};

// 0x10 (0x2D8 - 0x2C8)
// Class Engine.PhysicsVolume
class APhysicsVolume : public AVolume
{
public:
	float                                        TerminalVelocity;                                  // 0x2C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Priority;                                          // 0x2CC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FluidFriction;                                     // 0x2D0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWaterVolume : 1;                                  // Mask: 0x1, PropSize: 0x10x2D4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPhysicsOnContact : 1;                             // Mask: 0x2, PropSize: 0x10x2D4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5C9[0x3];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.HLODBuilder
class UHLODBuilder : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HLODBuilder");
		return Clss;
	}

};

// 0x38 (0x570 - 0x538)
// Class Engine.MeshComponent
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>            OverrideMaterials;                                 // 0x538(0x10)(Edit, ZeroConstructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    OverlayMaterial;                                   // 0x548(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OverlayMaterialMaxDrawDistance;                    // 0x550(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_5CF[0x14];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnableMaterialParameterCaching : 1;               // Mask: 0x1, PropSize: 0x10x568(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_5D0[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshComponent");
		return Clss;
	}

	void SetVectorParameterValueOnMaterials(class FName InParameterName, const struct FVector& InParameterValue);
	void SetScalarParameterValueOnMaterials(class FName InParameterName, float InParameterValue);
	void SetOverlayMaterialMaxDrawDistance(float InInMaxDrawDistance);
	void SetOverlayMaterial(class UMaterialInterface* InNewOverlayMaterial);
	void PrestreamTextures(float InSeconds, bool InbPrioritizeCharacterTextures, int32 InCinematicTextureGroups);
	bool IsMaterialSlotNameValid(class FName InMaterialSlotName);
	class UMaterialInterface* GetOverlayMaterial();
	TArray<class FName> GetMaterialSlotNames();
	TArray<class UMaterialInterface*> GetMaterials();
	int32 GetMaterialIndex(class FName InMaterialSlotName);
};

// 0x100 (0x638 - 0x538)
// Class Engine.SplineComponent
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FSplineCurves                         SplineCurves;                                      // 0x538(0x70)(Edit, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                    SplineInfo;                                        // 0x5A8(0x18)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveQuat                      SplineRotInfo;                                     // 0x5C0(0x18)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                    SplineScaleInfo;                                   // 0x5D8(0x18)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                     SplineReparamTable;                                // 0x5F0(0x18)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowSplineEditingPerInstance;                    // 0x608(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_98F[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ReparamStepsPerSegment;                            // 0x60C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Duration;                                          // 0x610(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStationaryEndpoints;                              // 0x614(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSplineHasBeenEdited;                              // 0x615(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bModifiedByConstructionScript;                     // 0x616(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInputSplinePointsToConstructionScript;            // 0x617(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDrawDebug;                                        // 0x618(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bClosedLoop;                                       // 0x619(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bLoopPositionOverride;                             // 0x61A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_99C[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LoopPosition;                                      // 0x61C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                               DefaultUpVector;                                   // 0x620(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SplineComponent");
		return Clss;
	}

	void UpdateSpline();
	void SetWorldLocationAtSplinePoint(int32 InPointIndex, struct FVector& InInLocation);
	void SetUpVectorAtSplinePoint(int32 InPointIndex, struct FVector& InInUpVector, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUpdateSpline);
	void SetUnselectedSplineSegmentColor(struct FLinearColor& InSegmentColor);
	void SetTangentsAtSplinePoint(int32 InPointIndex, struct FVector& InInArriveTangent, struct FVector& InInLeaveTangent, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUpdateSpline);
	void SetTangentColor(struct FLinearColor& InTangentColor);
	void SetTangentAtSplinePoint(int32 InPointIndex, struct FVector& InInTangent, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUpdateSpline);
	void SetSplineWorldPoints(TArray<struct FVector>& InPoints);
	void SetSplinePointType(int32 InPointIndex, enum class ESplinePointType InType, bool InbUpdateSpline);
	void SetSplinePoints(TArray<struct FVector>& InPoints, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUpdateSpline);
	void SetSplineLocalPoints(TArray<struct FVector>& InPoints);
	void SetSelectedSplineSegmentColor(struct FLinearColor& InSegmentColor);
	void SetScaleAtSplinePoint(int32 InPointIndex, struct FVector& InInScaleVector, bool InbUpdateSpline);
	void SetRotationAtSplinePoint(int32 InPointIndex, struct FRotator& InInRotation, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUpdateSpline);
	void SetLocationAtSplinePoint(int32 InPointIndex, struct FVector& InInLocation, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUpdateSpline);
	void SetDrawDebug(bool InbShow);
	void SetDefaultUpVector(struct FVector& InUpVector, enum class ESplineCoordinateSpace InCoordinateSpace);
	void SetClosedLoopAtPosition(bool InbInClosedLoop, float InKey, bool InbUpdateSpline);
	void SetClosedLoop(bool InbInClosedLoop, bool InbUpdateSpline);
	void RemoveSplinePoint(int32 InIndex, bool InbUpdateSpline);
	bool IsClosedLoop();
	struct FVector GetWorldTangentAtDistanceAlongSpline(float InDistance);
	struct FRotator GetWorldRotationAtTime(float InTime, bool InbUseConstantVelocity);
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float InDistance);
	struct FVector GetWorldLocationAtTime(float InTime, bool InbUseConstantVelocity);
	struct FVector GetWorldLocationAtSplinePoint(int32 InPointIndex);
	struct FVector GetWorldLocationAtDistanceAlongSpline(float InDistance);
	struct FVector GetWorldDirectionAtTime(float InTime, bool InbUseConstantVelocity);
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float InDistance);
	struct FVector GetVectorPropertyAtSplinePoint(int32 InIndex, class FName InPropertyName);
	struct FVector GetVectorPropertyAtSplineInputKey(float InInKey, class FName InPropertyName);
	struct FVector GetUpVectorAtTime(float InTime, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseConstantVelocity);
	struct FVector GetUpVectorAtSplinePoint(int32 InPointIndex, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetUpVectorAtSplineInputKey(float InInKey, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetUpVectorAtDistanceAlongSpline(float InDistance, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FTransform GetTransformAtTime(float InTime, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseConstantVelocity, bool InbUseScale);
	struct FTransform GetTransformAtSplinePoint(int32 InPointIndex, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseScale);
	struct FTransform GetTransformAtSplineInputKey(float InInKey, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseScale);
	struct FTransform GetTransformAtDistanceAlongSpline(float InDistance, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseScale);
	float GetTimeAtDistanceAlongSpline(float InDistance);
	struct FVector GetTangentAtTime(float InTime, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseConstantVelocity);
	struct FVector GetTangentAtSplinePoint(int32 InPointIndex, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetTangentAtSplineInputKey(float InInKey, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetTangentAtDistanceAlongSpline(float InDistance, enum class ESplineCoordinateSpace InCoordinateSpace);
	enum class ESplinePointType GetSplinePointType(int32 InPointIndex);
	float GetSplineLength();
	struct FVector GetScaleAtTime(float InTime, bool InbUseConstantVelocity);
	struct FVector GetScaleAtSplinePoint(int32 InPointIndex);
	struct FVector GetScaleAtSplineInputKey(float InInKey);
	struct FVector GetScaleAtDistanceAlongSpline(float InDistance);
	struct FRotator GetRotationAtTime(float InTime, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseConstantVelocity);
	struct FRotator GetRotationAtSplinePoint(int32 InPointIndex, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FRotator GetRotationAtSplineInputKey(float InInKey, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FRotator GetRotationAtDistanceAlongSpline(float InDistance, enum class ESplineCoordinateSpace InCoordinateSpace);
	float GetRollAtTime(float InTime, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseConstantVelocity);
	float GetRollAtSplinePoint(int32 InPointIndex, enum class ESplineCoordinateSpace InCoordinateSpace);
	float GetRollAtSplineInputKey(float InInKey, enum class ESplineCoordinateSpace InCoordinateSpace);
	float GetRollAtDistanceAlongSpline(float InDistance, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetRightVectorAtTime(float InTime, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseConstantVelocity);
	struct FVector GetRightVectorAtSplinePoint(int32 InPointIndex, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetRightVectorAtSplineInputKey(float InInKey, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetRightVectorAtDistanceAlongSpline(float InDistance, enum class ESplineCoordinateSpace InCoordinateSpace);
	int32 GetNumberOfSplineSegments();
	int32 GetNumberOfSplinePoints();
	struct FVector GetLocationAtTime(float InTime, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseConstantVelocity);
	struct FVector GetLocationAtSplinePoint(int32 InPointIndex, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetLocationAtSplineInputKey(float InInKey, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetLocationAtDistanceAlongSpline(float InDistance, enum class ESplineCoordinateSpace InCoordinateSpace);
	void GetLocationAndTangentAtSplinePoint(int32 InPointIndex, struct FVector* InLocation, struct FVector* InTangent, enum class ESplineCoordinateSpace InCoordinateSpace);
	void GetLocalLocationAndTangentAtSplinePoint(int32 InPointIndex, struct FVector* InLocalLocation, struct FVector* InLocalTangent);
	struct FVector GetLeaveTangentAtSplinePoint(int32 InPointIndex, enum class ESplineCoordinateSpace InCoordinateSpace);
	float GetInputKeyValueAtDistanceAlongSpline(float InDistance);
	float GetInputKeyAtDistanceAlongSpline(float InDistance);
	float GetFloatPropertyAtSplinePoint(int32 InIndex, class FName InPropertyName);
	float GetFloatPropertyAtSplineInputKey(float InInKey, class FName InPropertyName);
	float GetDistanceAlongSplineAtSplinePoint(int32 InPointIndex);
	float GetDistanceAlongSplineAtSplineInputKey(float InInKey);
	struct FVector GetDirectionAtTime(float InTime, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseConstantVelocity);
	struct FVector GetDirectionAtSplinePoint(int32 InPointIndex, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetDirectionAtSplineInputKey(float InInKey, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetDirectionAtDistanceAlongSpline(float InDistance, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetDefaultUpVector(enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector GetArriveTangentAtSplinePoint(int32 InPointIndex, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector FindUpVectorClosestToWorldLocation(struct FVector& InWorldLocation, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FTransform FindTransformClosestToWorldLocation(struct FVector& InWorldLocation, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUseScale);
	struct FVector FindTangentClosestToWorldLocation(struct FVector& InWorldLocation, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector FindScaleClosestToWorldLocation(struct FVector& InWorldLocation);
	struct FRotator FindRotationClosestToWorldLocation(struct FVector& InWorldLocation, enum class ESplineCoordinateSpace InCoordinateSpace);
	float FindRollClosestToWorldLocation(struct FVector& InWorldLocation, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector FindRightVectorClosestToWorldLocation(struct FVector& InWorldLocation, enum class ESplineCoordinateSpace InCoordinateSpace);
	struct FVector FindLocationClosestToWorldLocation(struct FVector& InWorldLocation, enum class ESplineCoordinateSpace InCoordinateSpace);
	float FindInputKeyClosestToWorldLocation(struct FVector& InWorldLocation);
	struct FVector FindDirectionClosestToWorldLocation(struct FVector& InWorldLocation, enum class ESplineCoordinateSpace InCoordinateSpace);
	bool DivideSplineIntoPolylineRecursiveWithDistances(float InStartDistanceAlongSpline, float InEndDistanceAlongSpline, enum class ESplineCoordinateSpace InCoordinateSpace, float InMaxSquareDistanceFromSpline, TArray<struct FVector>* InOutPoints, TArray<double>* InOutDistancesAlongSpline);
	bool DivideSplineIntoPolylineRecursive(float InStartDistanceAlongSpline, float InEndDistanceAlongSpline, enum class ESplineCoordinateSpace InCoordinateSpace, float InMaxSquareDistanceFromSpline, TArray<struct FVector>* InOutPoints);
	bool ConvertSplineToPolyLine(enum class ESplineCoordinateSpace InCoordinateSpace, float InMaxSquareDistanceFromSpline, TArray<struct FVector>* InOutPoints);
	bool ConvertSplineSegmentToPolyLine(int32 InSplinePointStartIndex, enum class ESplineCoordinateSpace InCoordinateSpace, float InMaxSquareDistanceFromSpline, TArray<struct FVector>* InOutPoints);
	void ClearSplinePoints(bool InbUpdateSpline);
	void AddSplineWorldPoint(struct FVector& InPosition);
	void AddSplinePointAtIndex(struct FVector& InPosition, int32 InIndex, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUpdateSpline);
	void AddSplinePoint(struct FVector& InPosition, enum class ESplineCoordinateSpace InCoordinateSpace, bool InbUpdateSpline);
	void AddSplineLocalPoint(struct FVector& InPosition);
	void AddPoints(TArray<struct FSplinePoint>& InPoints, bool InbUpdateSpline);
	void AddPoint(struct FSplinePoint& InPoint, bool InbUpdateSpline);
};

// 0x0 (0x28 - 0x28)
// Class Engine.SplineMetadata
class USplineMetadata : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SplineMetadata");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.WorldSubsystem
class UWorldSubsystem : public USubsystem
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldSubsystem");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.TickableWorldSubsystem
class UTickableWorldSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_9DB[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TickableWorldSubsystem");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.DynamicBlueprintBinding
class UDynamicBlueprintBinding : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DynamicBlueprintBinding");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.InputDelegateBinding
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputDelegateBinding");
		return Clss;
	}

};

// 0x88 (0x128 - 0xA0)
// Class Engine.InputComponent
class UInputComponent : public UActorComponent
{
public:
	uint8                                        Pad_A1B[0x70];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FCachedKeyToActionInfo>        CachedKeyToActionInfo;                             // 0x110(0x10)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_A1C[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputComponent");
		return Clss;
	}

	bool WasControllerKeyJustReleased(const struct FKey& InKey);
	bool WasControllerKeyJustPressed(const struct FKey& InKey);
	void OnInputOwnerEndPlayed(class AActor* InInOwner, enum class EEndPlayReason InEndPlayReason);
	bool IsControllerKeyDown(const struct FKey& InKey);
	void GetTouchState(int32 InFingerIndex, float* InLocationX, float* InLocationY, bool* InbIsCurrentlyPressed);
	struct FVector GetControllerVectorKeyState(const struct FKey& InKey);
	void GetControllerMouseDelta(float* InDeltaX, float* InDeltaY);
	float GetControllerKeyTimeDown(const struct FKey& InKey);
	void GetControllerAnalogStickState(enum class EControllerAnalogStick InWhichStick, float* InStickX, float* InStickY);
	float GetControllerAnalogKeyState(const struct FKey& InKey);
};

// 0x1028 (0x1050 - 0x28)
// Class Engine.Engine
class UEngine : public UObject
{
public:
	uint8                                        Pad_A26[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UFont*                                 TinyFont;                                          // 0x30(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                       TinyFontName;                                      // 0x38(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 SmallFont;                                         // 0x58(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                       SmallFontName;                                     // 0x60(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 MediumFont;                                        // 0x80(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                       MediumFontName;                                    // 0x88(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 LargeFont;                                         // 0xA8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                       LargeFontName;                                     // 0xB0(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 SubtitleFont;                                      // 0xD0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                       SubtitleFontName;                                  // 0xD8(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFont*>                         AdditionalFonts;                                   // 0xF8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class FString>                        AdditionalFontNames;                               // 0x108(0x10)(Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, NativeAccessSpecifierPublic)
	TSubclassOf<class UConsole>                  ConsoleClass;                                      // 0x118(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        ConsoleClassName;                                  // 0x120(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameViewportClient>       GameViewportClientClass;                           // 0x140(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        GameViewportClientClassName;                       // 0x148(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalPlayer>              LocalPlayerClass;                                  // 0x168(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        LocalPlayerClassName;                              // 0x170(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWorldSettings>            WorldSettingsClass;                                // 0x190(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        WorldSettingsClassName;                            // 0x198(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        NavigationSystemClassName;                         // 0x1B8(0x20)(ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationSystemBase>     NavigationSystemClass;                             // 0x1D8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        NavigationSystemConfigClassName;                   // 0x1E0(0x20)(ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationSystemConfig>   NavigationSystemConfigClass;                       // 0x200(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        AvoidanceManagerClassName;                         // 0x208(0x20)(ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAvoidanceManager>         AvoidanceManagerClass;                             // 0x228(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        AIControllerClassName;                             // 0x230(0x20)(ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPhysicsCollisionHandler>  PhysicsCollisionHandlerClass;                      // 0x250(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        PhysicsCollisionHandlerClassName;                  // 0x258(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        GameUserSettingsClassName;                         // 0x278(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameUserSettings>         GameUserSettingsClass;                             // 0x298(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameUserSettings*                     GameUserSettings;                                  // 0x2A0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ALevelScriptActor>         LevelScriptActorClass;                             // 0x2A8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        LevelScriptActorClassName;                         // 0x2B0(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        DefaultBlueprintBaseClassName;                     // 0x2D0(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        GameSingletonClassName;                            // 0x2F0(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                               GameSingleton;                                     // 0x310(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        AssetManagerClassName;                             // 0x318(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAssetManager*                         AssetManager;                                      // 0x338(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultTexture;                                    // 0x340(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultTextureName;                                // 0x348(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                              DefaultDiffuseTexture;                             // 0x368(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultDiffuseTextureName;                         // 0x370(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultBSPVertexTexture;                           // 0x390(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultBSPVertexTextureName;                       // 0x398(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            HighFrequencyNoiseTexture;                         // 0x3B8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       HighFrequencyNoiseTextureName;                     // 0x3C0(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultBokehTexture;                               // 0x3E0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultBokehTextureName;                           // 0x3E8(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultBloomKernelTexture;                         // 0x408(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultBloomKernelTextureName;                     // 0x410(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultFilmGrainTexture;                           // 0x430(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultFilmGrainTextureName;                       // 0x438(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             WireframeMaterial;                                 // 0x458(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                WireframeMaterialName;                             // 0x460(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             DebugMeshMaterial;                                 // 0x470(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DebugMeshMaterialName;                             // 0x478(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             EmissiveMeshMaterial;                              // 0x498(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       EmissiveMeshMaterialName;                          // 0x4A0(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             LevelColorationLitMaterial;                        // 0x4C0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LevelColorationLitMaterialName;                    // 0x4C8(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             LevelColorationUnlitMaterial;                      // 0x4D8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LevelColorationUnlitMaterialName;                  // 0x4E0(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             LightingTexelDensityMaterial;                      // 0x4F0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LightingTexelDensityName;                          // 0x4F8(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             ShadedLevelColorationLitMaterial;                  // 0x508(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ShadedLevelColorationLitMaterialName;              // 0x510(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             ShadedLevelColorationUnlitMaterial;                // 0x520(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ShadedLevelColorationUnlitMaterialName;            // 0x528(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             RemoveSurfaceMaterial;                             // 0x538(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       RemoveSurfaceMaterialName;                         // 0x540(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorMaterial;                               // 0x560(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorMaterialName;                           // 0x568(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorViewModeMaterial_ColorOnly;             // 0x578(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorViewModeMaterialName_ColorOnly;         // 0x580(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorViewModeMaterial_AlphaAsColor;          // 0x590(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorViewModeMaterialName_AlphaAsColor;      // 0x598(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorViewModeMaterial_RedOnly;               // 0x5A8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorViewModeMaterialName_RedOnly;           // 0x5B0(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorViewModeMaterial_GreenOnly;             // 0x5C0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorViewModeMaterialName_GreenOnly;         // 0x5C8(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorViewModeMaterial_BlueOnly;              // 0x5D8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorViewModeMaterialName_BlueOnly;          // 0x5E0(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DebugEditorMaterialName;                           // 0x5F0(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             ConstraintLimitMaterial;                           // 0x610(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialX;                          // 0x618(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialXAxis;                      // 0x620(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialY;                          // 0x628(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialYAxis;                      // 0x630(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialZ;                          // 0x638(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialZAxis;                      // 0x640(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialPrismatic;                  // 0x648(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             InvalidLightmapSettingsMaterial;                   // 0x650(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       InvalidLightmapSettingsMaterialName;               // 0x658(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             PreviewShadowsIndicatorMaterial;                   // 0x678(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       PreviewShadowsIndicatorMaterialName;               // 0x680(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             ArrowMaterial;                                     // 0x6A0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ArrowMaterialYellow;                               // 0x6A8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       ArrowMaterialName;                                 // 0x6B0(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LightingOnlyBrightness;                            // 0x6D0(0x10)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  ShaderComplexityColors;                            // 0x6E0(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  QuadComplexityColors;                              // 0x6F0(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  LightComplexityColors;                             // 0x700(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  StationaryLightOverlapColors;                      // 0x710(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  LODColorationColors;                               // 0x720(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  HLODColorationColors;                              // 0x730(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  StreamingAccuracyColors;                           // 0x740(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	struct FLinearColor                          GPUSkinCacheVisualizationExcludedColor;            // 0x750(0x10)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          GPUSkinCacheVisualizationIncludedColor;            // 0x760(0x10)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          GPUSkinCacheVisualizationRecomputeTangentsColor;   // 0x770(0x10)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GPUSkinCacheVisualizationLowMemoryThresholdInMB;   // 0x780(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GPUSkinCacheVisualizationHighMemoryThresholdInMB;  // 0x784(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          GPUSkinCacheVisualizationLowMemoryColor;           // 0x788(0x10)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          GPUSkinCacheVisualizationMidMemoryColor;           // 0x798(0x10)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          GPUSkinCacheVisualizationHighMemoryColor;          // 0x7A8(0x10)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  GPUSkinCacheVisualizationRayTracingLODOffsetColors; // 0x7B8(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	float                                        MaxPixelShaderAdditiveComplexityCount;             // 0x7C8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxES3PixelShaderAdditiveComplexityCount;          // 0x7CC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinLightMapDensity;                                // 0x7D0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IdealLightMapDensity;                              // 0x7D4(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxLightMapDensity;                                // 0x7D8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderLightMapDensityGrayscale : 1;               // Mask: 0x1, PropSize: 0x10x7DC(0x1)(Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_77 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A57[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RenderLightMapDensityGrayscaleScale;               // 0x7E0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RenderLightMapDensityColorScale;                   // 0x7E4(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LightMapDensityVertexMappedColor;                  // 0x7E8(0x10)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LightMapDensitySelectedColor;                      // 0x7F8(0x10)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStatColorMapping>             StatColorMappings;                                 // 0x808(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                     DefaultPhysMaterial;                               // 0x818(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultPhysMaterialName;                           // 0x820(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                     DefaultDestructiblePhysMaterial;                   // 0x840(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultDestructiblePhysMaterialName;               // 0x848(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameNameRedirect>             ActiveGameNameRedirects;                           // 0x868(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FClassRedirect>                ActiveClassRedirects;                              // 0x878(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPluginRedirect>               ActivePluginRedirects;                             // 0x888(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FStructRedirect>               ActiveStructRedirects;                             // 0x898(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class UTexture2D*                            PreIntegratedSkinBRDFTexture;                      // 0x8A8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       PreIntegratedSkinBRDFTextureName;                  // 0x8B0(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            BlueNoiseScalarTexture;                            // 0x8D0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            BlueNoiseVec2Texture;                              // 0x8D8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       BlueNoiseScalarTextureName;                        // 0x8E0(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       BlueNoiseVec2TextureName;                          // 0x900(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            MiniFontTexture;                                   // 0x920(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       MiniFontTextureName;                               // 0x928(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                              WeightMapPlaceholderTexture;                       // 0x948(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       WeightMapPlaceholderTextureName;                   // 0x950(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            LightMapDensityTexture;                            // 0x970(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       LightMapDensityTextureName;                        // 0x978(0x20)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_A65[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UGameViewportClient*                   GameViewport;                                      // 0x9A0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        DeferredCommands;                                  // 0x9A8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        NearClipPlane;                                     // 0x9B8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSubtitlesEnabled : 1;                             // Mask: 0x1, PropSize: 0x10x9BC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSubtitlesForcedOff : 1;                           // Mask: 0x2, PropSize: 0x10x9BC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_78 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A69[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaximumLoopIterationCount;                         // 0x9C0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanBlueprintsTickByDefault : 1;                   // Mask: 0x1, PropSize: 0x10x9C4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOptimizeAnimBlueprintMemberVariableAccess : 1;    // Mask: 0x2, PropSize: 0x10x9C4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowMultiThreadedAnimationUpdate : 1;            // Mask: 0x4, PropSize: 0x10x9C4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableEditorPSysRealtimeLOD : 1;                  // Mask: 0x8, PropSize: 0x10x9C4(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_79 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bSmoothFrameRate : 1;                              // Mask: 0x20, PropSize: 0x10x9C4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFixedFrameRate : 1;                            // Mask: 0x40, PropSize: 0x10x9C4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_7A : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A6E[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FixedFrameRate;                                    // 0x9C8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                           SmoothedFrameRateRange;                            // 0x9CC(0x10)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_A6F[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UEngineCustomTimeStep*                 CustomTimeStep;                                    // 0x9E0(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_A71[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoftClassPath                        CustomTimeStepClassName;                           // 0xA08(0x20)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimecodeProvider*                     TimecodeProvider;                                  // 0xA28(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_A72[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoftClassPath                        TimecodeProviderClassName;                         // 0xA50(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bGenerateDefaultTimecode;                          // 0xA70(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_A74[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FFrameRate                            GenerateDefaultTimecodeFrameRate;                  // 0xA74(0x8)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GenerateDefaultTimecodeFrameDelay;                 // 0xA7C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCheckForMultiplePawnsSpawnedInAFrame : 1;         // Mask: 0x1, PropSize: 0x10xA80(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_7B : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A76[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumPawnsAllowedToBeSpawnedInAFrame;                // 0xA84(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldGenerateLowQualityLightmaps : 1;            // Mask: 0x1, PropSize: 0x10xA88(0x1)(Config, GlobalConfig, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_7C : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A79[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                C_WorldBox;                                        // 0xA8C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_BrushWire;                                       // 0xA90(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_AddWire;                                         // 0xA94(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_SubtractWire;                                    // 0xA98(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_SemiSolidWire;                                   // 0xA9C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_NonSolidWire;                                    // 0xAA0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_WireBackground;                                  // 0xAA4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_ScaleBoxHi;                                      // 0xAA8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_VolumeCollision;                                 // 0xAAC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_BSPCollision;                                    // 0xAB0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_OrthoBackground;                                 // 0xAB4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_Volume;                                          // 0xAB8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_BrushShape;                                      // 0xABC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StreamingDistanceFactor;                           // 0xAC0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_A7E[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FDirectoryPath                        GameScreenshotSaveDirectory;                       // 0xAC8(0x10)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         UseStaticMeshMinLODPerQualityLevels;               // 0xAD8(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         UseSkeletalMeshMinLODPerQualityLevels;             // 0xAD9(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETransitionType                   TransitionType;                                    // 0xADA(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_A81[0x5];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                TransitionDescription;                             // 0xAE0(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                TransitionGameMode;                                // 0xAF0(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowMatureLanguage : 1;                          // Mask: 0x1, PropSize: 0x10xB00(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_7D : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A84[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CameraRotationThreshold;                           // 0xB04(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraTranslationThreshold;                        // 0xB08(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PrimitiveProbablyVisibleTime;                      // 0xB0C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxOcclusionPixelsFraction;                        // 0xB10(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPauseOnLossOfFocus : 1;                           // Mask: 0x1, PropSize: 0x10xB14(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_7E : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A8A[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxParticleResize;                                 // 0xB18(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxParticleResizeWarn;                             // 0xB1C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDropNoteInfo>                 PendingDroppedNotes;                               // 0xB20(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                        NetClientTicksPerSecond;                           // 0xB30(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DisplayGamma;                                      // 0xB34(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinDesiredFrameRate;                               // 0xB38(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          DefaultSelectedMaterialColor;                      // 0xB3C(0x10)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                          SelectedMaterialColor;                             // 0xB4C(0x10)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                          SelectionOutlineColor;                             // 0xB5C(0x10)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                          SubduedSelectionOutlineColor;                      // 0xB6C(0x10)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                          SelectedMaterialColorOverride;                     // 0xB7C(0x10)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsOverridingSelectedColor;                        // 0xB8C(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_A90[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnableOnScreenDebugMessages : 1;                  // Mask: 0x1, PropSize: 0x10xB90(0x1)(Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableOnScreenDebugMessagesDisplay : 1;           // Mask: 0x2, PropSize: 0x10xB90(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSuppressMapWarnings : 1;                          // Mask: 0x4, PropSize: 0x10xB90(0x1)(Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableAILogging : 1;                             // Mask: 0x8, PropSize: 0x10xB90(0x1)(Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_7F : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A94[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       bEnableVisualLogRecordingOnStart;                  // 0xB94(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ScreenSaverInhibitorSemaphore;                     // 0xB98(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bLockReadOnlyLevels : 1;                           // Mask: 0x1, PropSize: 0x10xB9C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_80 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A96[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ParticleEventManagerClassPath;                     // 0xBA0(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SelectionHighlightIntensity;                       // 0xBB0(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BSPSelectionHighlightIntensity;                    // 0xBB4(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SelectionHighlightIntensityBillboards;             // 0xBB8(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_A98[0x294];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       GlobalNetTravelCount;                              // 0xE50(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_A99[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNetDriverDefinition>          NetDriverDefinitions;                              // 0xE58(0x10)(ZeroConstructor, Transient, Config, NativeAccessSpecifierPublic)
	TArray<struct FIrisNetDriverConfig>          IrisNetDriverConfigs;                              // 0xE68(0x10)(ZeroConstructor, Transient, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        ServerActors;                                      // 0xE78(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        RuntimeServerActors;                               // 0xE88(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        NetErrorLogInterval;                               // 0xE98(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStartedLoadMapMovie : 1;                          // Mask: 0x1, PropSize: 0x10xE9C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_82 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_A9E[0x1B];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NextWorldContextHandle;                            // 0xEB8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_A9F[0x194];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Engine");
		return Clss;
	}

};

// 0x250 (0x298 - 0x48)
// Class Engine.LocalPlayer
class ULocalPlayer : public UPlayer
{
public:
	uint8                                        Pad_AA6[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UGameViewportClient*                   ViewportClient;                                    // 0x78(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_AA7[0x38];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAspectRatioAxisConstraint        AspectRatioAxisConstraint;                         // 0xB8(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_AA8[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class APlayerController>         PendingLevelPlayerControllerClass;                 // 0xC0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSentSplitJoin : 1;                                // Mask: 0x1, PropSize: 0x10xC8(0x1)(Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_84 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_AA9[0x17];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ControllerId;                                      // 0xE0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_AAB[0x1B4];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LocalPlayer");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.LocalPlayerSubsystem
class ULocalPlayerSubsystem : public USubsystem
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LocalPlayerSubsystem");
		return Clss;
	}

};

// 0x470 (0x498 - 0x28)
// Class Engine.PlayerInput
class UPlayerInput : public UObject
{
public:
	uint8                                        Pad_AC7[0x178];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FKeyBind>                      DebugExecBindings;                                 // 0x1A0(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        Pad_AC9[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          InvertedAxis;                                      // 0x1E0(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        Pad_ACA[0x2A8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerInput");
		return Clss;
	}

	void SetMouseSensitivity(float InSensitivity);
	void SetBind(class FName InBindName, const class FString& InCommand);
	void InvertAxisKey(const struct FKey& InAxisKey);
	void InvertAxis(class FName InAxisName);
	class APlayerController* GetOuterAPlayerController();
	void ClearSmoothing();
};

// 0x0 (0x30 - 0x30)
// Class Engine.PrimaryDataAsset
class UPrimaryDataAsset : public UDataAsset
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PrimaryDataAsset");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.SaveGame
class USaveGame : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SaveGame");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.ScriptViewportClient
class UScriptViewportClient : public UObject
{
public:
	uint8                                        Pad_AD0[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ScriptViewportClient");
		return Clss;
	}

};

// 0x368 (0x3A0 - 0x38)
// Class Engine.GameViewportClient
class UGameViewportClient : public UScriptViewportClient
{
public:
	uint8                                        Pad_AD7[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UConsole*                              ViewportConsole;                                   // 0x40(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDebugDisplayProperty>         DebugProperties;                                   // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_AD8[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxSplitscreenPlayers;                             // 0x68(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_AD9[0xC];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                World;                                             // 0x78(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameInstance*                         GameInstance;                                      // 0x80(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_ADA[0x318];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameViewportClient");
		return Clss;
	}

	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int32 InPlayerIndex);
};

// 0x150 (0x380 - 0x230)
// Class Engine.BlueprintGeneratedClass
class UBlueprintGeneratedClass : public UClass
{
public:
	uint8                                        Pad_ADC[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumReplicatedProperties;                           // 0x238(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasNativizedParent : 1;                           // Mask: 0x1, PropSize: 0x10x23C(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasCookedComponentInstancingData : 1;             // Mask: 0x2, PropSize: 0x10x23C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_8C : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_AE0[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UDynamicBlueprintBinding*>      DynamicBindingObjects;                             // 0x240(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>               ComponentTemplates;                                // 0x250(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UTimelineTemplate*>             Timelines;                                         // 0x260(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FBPComponentClassOverride>     ComponentClassOverrides;                           // 0x270(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USimpleConstructionScript*             SimpleConstructionScript;                          // 0x280(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInheritableComponentHandler*          InheritableComponentHandler;                       // 0x288(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructProperty*                       UberGraphFramePointerProperty;                     // 0x290(0x8)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_AE5[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UFunction*                             UberGraphFunction;                                 // 0x2A0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>              CookedPropertyGuids;                               // 0x2A8(0x50)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;                     // 0x2F8(0x50)(NativeAccessSpecifierPublic)
	uint8                                        Pad_AEA[0x38];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintGeneratedClass");
		return Clss;
	}

};

// 0x88 (0xB0 - 0x28)
// Class Engine.DataTable
class UDataTable : public UObject
{
public:
	class UScriptStruct*                         RowStruct;                                         // 0x28(0x8)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_AED[0x50];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bStripFromClientBuilds : 1;                        // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreExtraFields : 1;                            // Mask: 0x2, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreMissingFields : 1;                          // Mask: 0x4, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_8D : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_AEE[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ImportKeyField;                                    // 0x88(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_AEF[0x18];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataTable");
		return Clss;
	}

};

// 0xA8 (0xD0 - 0x28)
// Class Engine.StreamableRenderAsset
class UStreamableRenderAsset : public UObject
{
public:
	uint8                                        Pad_AF5[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       ForceMipLevelsToBeResidentTimestamp;               // 0x40(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        NumCinematicMipLevels;                             // 0x48(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_AF7[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerQualityLevelInt                   NoRefStreamingLODBias;                             // 0x50(0x68)(Protected, NativeAccessSpecifierProtected)
	int32                                        StreamingIndex;                                    // 0xB8(0x4)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CachedCombinedLODBias;                             // 0xBC(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        NeverStream : 1;                                   // Mask: 0x1, PropSize: 0x10xC0(0x1)(Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGlobalForceMipLevelsToBeResident : 1;             // Mask: 0x2, PropSize: 0x10xC0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasStreamingUpdatePending : 1;                    // Mask: 0x4, PropSize: 0x10xC0(0x1)(Transient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceMiplevelsToBeResident : 1;                   // Mask: 0x8, PropSize: 0x10xC0(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreStreamingMipBias : 1;                       // Mask: 0x10, PropSize: 0x10xC0(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseCinematicMipLevels : 1;                        // Mask: 0x20, PropSize: 0x10xC0(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_AFA[0xF];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StreamableRenderAsset");
		return Clss;
	}

	void SetForceMipLevelsToBeResident(float InSeconds, int32 InCinematicLODGroupMask);
};

// 0x120 (0x1F0 - 0xD0)
// Class Engine.Texture
class UTexture : public UStreamableRenderAsset
{
public:
	uint8                                        Pad_AFF[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 LightingGuid;                                      // 0xE0(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        LevelIndex;                                        // 0xF0(0x4)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LODBias;                                           // 0xF4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureCompressionSettings       CompressionSettings;                               // 0xF8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureFilter                    Filter;                                            // 0xF9(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureMipLoadOptions            MipLoadOptions;                                    // 0xFA(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureGroup                     LODGroup;                                          // 0xFB(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerPlatformFloat                     Downscale;                                         // 0xFC(0x4)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	enum class ETextureDownscaleOptions          DownscaleOptions;                                  // 0x100(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        SRGB : 1;                                          // Mask: 0x1, PropSize: 0x10x101(0x1)(Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoTiling : 1;                                     // Mask: 0x2, PropSize: 0x10x101(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        VirtualTextureStreaming : 1;                       // Mask: 0x4, PropSize: 0x10x101(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CompressionYCoCg : 1;                              // Mask: 0x8, PropSize: 0x10x101(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNotOfflineProcessed : 1;                          // Mask: 0x10, PropSize: 0x10x101(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAsyncResourceReleaseHasBeenStarted : 1;           // Mask: 0x20, PropSize: 0x10x101(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_8E : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_B07[0x6];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x108(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_B08[0xD8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Texture");
		return Clss;
	}

	int64 Blueprint_GetMemorySize();
};

// 0x330 (0x8A0 - 0x570)
// Class Engine.SkinnedMeshComponent
class USkinnedMeshComponent : public UMeshComponent
{
public:
	uint8                                        Pad_C0A[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMesh*                         SkeletalMesh;                                      // 0x578(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkinnedAsset*                         SkinnedAsset;                                      // 0x580(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class USkinnedMeshComponent>  LeaderPoseComponent;                               // 0x588(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<enum class ESkinCacheUsage>           SkinCacheUsage;                                    // 0x590(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bSetMeshDeformer;                                  // 0x5A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_C17[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UMeshDeformer*                         MeshDeformer;                                      // 0x5A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMeshDeformerInstanceSettings*         MeshDeformerInstanceSettings;                      // 0x5B0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMeshDeformerInstance*                 MeshDeformerInstance;                              // 0x5B8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_C1A[0x168];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicsAsset*                         PhysicsAssetOverride;                              // 0x728(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ForcedLodModel;                                    // 0x730(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinLodModel;                                       // 0x734(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_C1C[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StreamingDistanceMultiplier;                       // 0x740(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_C1F[0xC];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSkelMeshComponentLODInfo>     LODInfo;                                           // 0x750(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_C20[0x24];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EVisibilityBasedAnimTickOption    VisibilityBasedAnimTickOption;                     // 0x784(0x1)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_C21[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_8F : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bOverrideMinLod : 1;                               // Mask: 0x8, PropSize: 0x10x786(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseBoundsFromLeaderPoseComponent : 1;             // Mask: 0x10, PropSize: 0x10x786(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceWireframe : 1;                               // Mask: 0x20, PropSize: 0x10x786(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisplayBones : 1;                                 // Mask: 0x40, PropSize: 0x10x786(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableMorphTarget : 1;                           // Mask: 0x80, PropSize: 0x10x786(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHideSkin : 1;                                     // Mask: 0x1, PropSize: 0x10x787(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPerBoneMotionBlur : 1;                            // Mask: 0x2, PropSize: 0x10x787(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bComponentUseFixedSkelBounds : 1;                  // Mask: 0x4, PropSize: 0x10x787(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bConsiderAllBodiesForBounds : 1;                   // Mask: 0x8, PropSize: 0x10x787(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSyncAttachParentLOD : 1;                          // Mask: 0x10, PropSize: 0x10x787(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanHighlightSelectedSections : 1;                 // Mask: 0x20, PropSize: 0x10x787(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRecentlyRendered : 1;                             // Mask: 0x40, PropSize: 0x10x787(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastCapsuleDirectShadow : 1;                      // Mask: 0x80, PropSize: 0x10x787(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastCapsuleIndirectShadow : 1;                    // Mask: 0x1, PropSize: 0x10x788(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCPUSkinning : 1;                                  // Mask: 0x2, PropSize: 0x10x788(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableUpdateRateOptimizations : 1;                // Mask: 0x4, PropSize: 0x10x788(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisplayDebugUpdateRateOptimizations : 1;          // Mask: 0x8, PropSize: 0x10x788(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderStatic : 1;                                 // Mask: 0x10, PropSize: 0x10x788(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreLeaderPoseComponentLOD : 1;                 // Mask: 0x20, PropSize: 0x10x788(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_90 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCachedLocalBoundsUpToDate : 1;                    // Mask: 0x1, PropSize: 0x10x789(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCachedWorldSpaceBoundsUpToDate : 1;               // Mask: 0x2, PropSize: 0x10x789(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_91 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bForceMeshObjectUpdate : 1;                        // Mask: 0x10, PropSize: 0x10x789(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_92 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_93 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bFollowerShouldTickPose : 1;                       // Mask: 0x4, PropSize: 0x10x78A(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_94 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_C28[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CapsuleIndirectShadowMinVisibility;                // 0x78C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_C29[0x38];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBoxSphereBounds                      CachedWorldOrLocalSpaceBounds;                     // 0x7C8(0x38)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMatrix                               CachedWorldToLocalTransform;                       // 0x800(0x80)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_C2B[0x20];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkinnedMeshComponent");
		return Clss;
	}

	void UnloadSkinWeightProfile(class FName InInProfileName);
	void UnHideBoneByName(class FName InBoneName);
	void TransformToBoneSpace(class FName InBoneName, const struct FVector& InInPosition, const struct FRotator& InInRotation, struct FVector* InOutPosition, struct FRotator* InOutRotation);
	void TransformFromBoneSpace(class FName InBoneName, const struct FVector& InInPosition, const struct FRotator& InInRotation, struct FVector* InOutPosition, struct FRotator* InOutRotation);
	void ShowMaterialSection(int32 InMaterialID, int32 InSectionIndex, bool InbShow, int32 InLODIndex);
	void ShowAllMaterialSections(int32 InLODIndex);
	void SetVertexOffsetUsage(int32 InLODIndex, int32 InUsage);
	void SetVertexColorOverride_LinearColor(int32 InLODIndex, TArray<struct FLinearColor>& InVertexColors);
	bool SetSkinWeightProfile(class FName InInProfileName);
	void SetSkinWeightOverride(int32 InLODIndex, TArray<struct FSkelMeshSkinWeightInfo>& InSkinWeights);
	void SetSkinnedAssetAndUpdate(class USkinnedAsset* InNewMesh, bool InbReinitPose);
	void SetRenderStatic(bool InbNewValue);
	void SetPreSkinningOffsets(int32 InLODIndex, const TArray<struct FVector>& InOffsets);
	void SetPostSkinningOffsets(int32 InLODIndex, const TArray<struct FVector>& InOffsets);
	void SetPhysicsAsset(class UPhysicsAsset* InNewPhysicsAsset, bool InbForceReInit);
	void SetMinLOD(int32 InInNewMinLOD);
	void SetMeshDeformer(class UMeshDeformer* InInMeshDeformer);
	void SetLeaderPoseComponent(class USkinnedMeshComponent* InNewLeaderBoneComponent, bool InbForceUpdate, bool InbInFollowerShouldTickPose);
	void SetForcedLOD(int32 InInNewForcedLOD);
	void SetCastCapsuleIndirectShadow(bool InbNewValue);
	void SetCastCapsuleDirectShadow(bool InbNewValue);
	void SetCapsuleIndirectShadowMinVisibility(float InNewValue);
	bool IsUsingSkinWeightProfile();
	bool IsMaterialSectionShown(int32 InMaterialID, int32 InLODIndex);
	bool IsBoneHiddenByName(class FName InBoneName);
	void HideBoneByName(class FName InBoneName, enum class EPhysBodyOp InPhysBodyOption);
	int32 GetVertexOffsetUsage(int32 InLODIndex);
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(class FName InBoneName, float* InOutTwistAngle, float* InOutSwingAngle);
	class FName GetSocketBoneName(class FName InInSocketName);
	class USkinnedAsset* GetSkinnedAsset();
	class USkeletalMesh* GetSkeletalMesh_DEPRECATED();
	struct FTransform GetRefPoseTransform(int32 InBoneIndex);
	struct FVector GetRefPosePosition(int32 InBoneIndex);
	int32 GetPredictedLODLevel();
	class FName GetParentBone(class FName InBoneName);
	int32 GetNumLODs();
	int32 GetNumBones();
	int32 GetForcedLOD();
	struct FTransform GetDeltaTransformFromRefPose(class FName InBoneName, class FName InBaseName);
	class FName GetCurrentSkinWeightProfileName();
	class FName GetBoneName(int32 InBoneIndex);
	int32 GetBoneIndex(class FName InBoneName);
	class FName FindClosestBone_K2(const struct FVector& InTestLocation, struct FVector* InBoneLocation, float InIgnoreScale, bool InbRequirePhysicsAsset);
	void ClearVertexColorOverride(int32 InLODIndex);
	void ClearSkinWeightProfile();
	void ClearSkinWeightOverride(int32 InLODIndex);
	bool BoneIsChildOf(class FName InBoneName, class FName InParentBoneName);
};

// 0x6E0 (0xF80 - 0x8A0)
// Class Engine.SkeletalMeshComponent
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	TSubclassOf<class UObject>                   AnimBlueprintGeneratedClass;                       // 0x8A0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>             AnimClass;                                         // 0x8A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                         AnimScriptInstance;                                // 0x8B0(0x8)(ZeroConstructor, Transient, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                         PostProcessAnimInstance;                           // 0x8B8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSingleAnimationPlayData              AnimationData;                                     // 0x8C0(0x18)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_D79[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RootBoneTranslation;                               // 0x8E8(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LineCheckBoundsScale;                              // 0x900(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D7A[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAnimInstance*>                 LinkedInstances;                                   // 0x948(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                    CachedBoneSpaceTransforms;                         // 0x958(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                    CachedComponentSpaceTransforms;                    // 0x968(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_D7B[0xB0];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlobalAnimRateScale;                               // 0xA28(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EKinematicBonesUpdateToPhysics    KinematicBonesUpdateType;                          // 0xA2C(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPhysicsTransformUpdateMode       PhysicsTransformUpdateMode;                        // 0xA2D(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D7C[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAnimationMode                    AnimationMode;                                     // 0xA2F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_D7E[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDisablePostProcessBlueprint : 1;                  // Mask: 0x1, PropSize: 0x10xA31(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_99 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUpdateOverlapsOnAnimationFinalize : 1;            // Mask: 0x4, PropSize: 0x10xA31(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_9A : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHasValidBodies : 1;                               // Mask: 0x10, PropSize: 0x10xA31(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBlendPhysics : 1;                                 // Mask: 0x20, PropSize: 0x10xA31(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnablePhysicsOnDedicatedServer : 1;               // Mask: 0x40, PropSize: 0x10xA31(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateMeshWhenKinematic : 1;                      // Mask: 0x80, PropSize: 0x10xA31(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateJointsFromAnimation : 1;                    // Mask: 0x1, PropSize: 0x10xA32(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowClothActors : 1;                             // Mask: 0x2, PropSize: 0x10xA32(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableClothSimulation : 1;                       // Mask: 0x4, PropSize: 0x10xA32(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_9B : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_D80[0x5];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDisableRigidBodyAnimNode : 1;                     // Mask: 0x1, PropSize: 0x10xA38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bAllowAnimCurveEvaluation : 1;                     // Mask: 0x2, PropSize: 0x10xA38(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bDisableAnimCurves : 1;                            // Mask: 0x4, PropSize: 0x10xA38(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_9C : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCollideWithEnvironment : 1;                       // Mask: 0x40, PropSize: 0x10xA38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCollideWithAttachedChildren : 1;                  // Mask: 0x80, PropSize: 0x10xA38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceCollisionUpdate : 1;                         // Mask: 0x1, PropSize: 0x10xA39(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLocalSpaceSimulation : 1;                         // Mask: 0x2, PropSize: 0x10xA39(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bResetAfterTeleport : 1;                           // Mask: 0x4, PropSize: 0x10xA39(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_9D : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDeferKinematicBoneUpdate : 1;                     // Mask: 0x10, PropSize: 0x10xA39(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoSkeletonUpdate : 1;                             // Mask: 0x20, PropSize: 0x10xA39(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPauseAnims : 1;                                   // Mask: 0x40, PropSize: 0x10xA39(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseRefPoseOnInitAnim : 1;                         // Mask: 0x80, PropSize: 0x10xA39(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnablePerPolyCollision : 1;                       // Mask: 0x1, PropSize: 0x10xA3A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceRefpose : 1;                                 // Mask: 0x2, PropSize: 0x10xA3A(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOnlyAllowAutonomousTickPose : 1;                  // Mask: 0x4, PropSize: 0x10xA3A(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsAutonomousTickPose : 1;                         // Mask: 0x8, PropSize: 0x10xA3A(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOldForceRefPose : 1;                              // Mask: 0x10, PropSize: 0x10xA3A(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowPrePhysBones : 1;                             // Mask: 0x20, PropSize: 0x10xA3A(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRequiredBonesUpToDate : 1;                        // Mask: 0x40, PropSize: 0x10xA3A(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAnimTreeInitialised : 1;                          // Mask: 0x80, PropSize: 0x10xA3A(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIncludeComponentLocationIntoBounds : 1;           // Mask: 0x1, PropSize: 0x10xA3B(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableLineCheckWithBounds : 1;                    // Mask: 0x2, PropSize: 0x10xA3B(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPropagateCurvesToFollowers : 1;                   // Mask: 0x4, PropSize: 0x10xA3B(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSkipKinematicUpdateWhenInterpolating : 1;         // Mask: 0x8, PropSize: 0x10xA3B(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSkipBoundsUpdateWhenInterpolating : 1;            // Mask: 0x10, PropSize: 0x10xA3B(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_9E : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNeedsQueuedAnimEventsDispatched : 1;              // Mask: 0x80, PropSize: 0x10xA3B(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_D8F[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint16                                       CachedAnimCurveUidVersion;                         // 0xA3E(0x2)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClothBlendWeight;                                  // 0xA40(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWaitForParallelClothTask;                         // 0xA44(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D95[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          DisallowedAnimCurves;                              // 0xA48(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UBodySetup*                            BodySetup;                                         // 0xA58(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D99[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ClothMaxDistanceScale;                             // 0xA64(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnConstraintBroken;                                // 0xA68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlasticDeformation;                              // 0xA78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UClothingSimulationFactory> ClothingSimulationFactory;                         // 0xA88(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D9E[0xF8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TeleportDistanceThreshold;                         // 0xB88(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        TeleportRotationThreshold;                         // 0xB8C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_D9F[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       LastPoseTickFrame;                                 // 0xB98(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_DA1[0x94];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UClothingSimulationInteractor*         ClothingInteractor;                                // 0xC30(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_DA3[0xC8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAnimInitialized;                                 // 0xD00(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_DA4[0x270];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMeshComponent");
		return Clss;
	}

	void UnlinkAnimClassLayers(TSubclassOf<class UAnimInstance> InInClass);
	void UnbindClothFromLeaderPoseComponent(bool InbRestoreSimulationSpace);
	void ToggleDisablePostProcessBlueprint();
	void TermBodiesBelow(class FName InParentBoneName);
	void SuspendClothingSimulation();
	void Stop();
	void SnapshotPose(struct FPoseSnapshot& InSnapshot);
	void SetUpdateClothInEditor(bool InNewUpdateState);
	void SetUpdateAnimationInEditor(bool InNewUpdateState);
	void SetTeleportRotationThreshold(float InThreshold);
	void SetTeleportDistanceThreshold(float InThreshold);
	void SetSkeletalMeshAsset(class USkeletalMesh* InNewMesh);
	void SetPosition(float InInPos, bool InbFireNotifies);
	void SetPlayRate(float InRate);
	void SetPhysicsBlendWeight(float InPhysicsBlendWeight);
	void SetNotifyRigidBodyCollisionBelow(bool InbNewNotifyRigidBodyCollision, class FName InBoneName, bool InbIncludeSelf);
	void SetMorphTarget(class FName InMorphTargetName, float InValue, bool InbRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool InbNewBlendPhysics);
	void SetEnableGravityOnAllBodiesBelow(bool InbEnableGravity, class FName InBoneName, bool InbIncludeSelf);
	void SetEnableBodyGravity(bool InbEnableGravity, class FName InBoneName);
	void SetDisablePostProcessBlueprint(bool InbInDisablePostProcess);
	void SetDisableAnimCurves(bool InbInDisableAnimCurves);
	void SetConstraintProfileForAll(class FName InProfileName, bool InbDefaultIfNotFound);
	void SetConstraintProfile(class FName InJointName, class FName InProfileName, bool InbDefaultIfNotFound);
	void SetClothMaxDistanceScale(float InScale);
	void SetBodyNotifyRigidBodyCollision(bool InbNewNotifyRigidBodyCollision, class FName InBoneName);
	void SetAnimClass(class UClass* InNewClass);
	void SetAnimationMode(enum class EAnimationMode InInAnimationMode);
	void SetAnimation(class UAnimationAsset* InNewAnimToPlay);
	void SetAngularLimits(class FName InInBoneName, float InSwing1LimitAngle, float InTwistLimitAngle, float InSwing2LimitAngle);
	void SetAllowRigidBodyAnimNode(bool InbInAllow, bool InbReinitAnim);
	void SetAllowedAnimCurvesEvaluation(TArray<class FName>& InList, bool InbAllow);
	void SetAllowClothActors(bool InbInAllow);
	void SetAllowAnimCurveEvaluation(bool InbInAllow);
	void SetAllMotorsAngularVelocityDrive(bool InbEnableSwingDrive, bool InbEnableTwistDrive, bool InbSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool InbEnableSwingDrive, bool InbEnableTwistDrive, bool InbSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InInSpring, float InInDamping, float InInForceLimit, bool InbSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool InbNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float InPhysicsBlendWeight, bool InbSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(class FName& InInBoneName, bool InbNewSimulate, bool InbIncludeSelf);
	void SetAllBodiesBelowPhysicsDisabled(class FName& InInBoneName, bool InbDisabled, bool InbIncludeSelf);
	void SetAllBodiesBelowPhysicsBlendWeight(class FName& InInBoneName, float InPhysicsBlendWeight, bool InbSkipCustomPhysicsType, bool InbIncludeSelf);
	void SetAllBodiesBelowLinearVelocity(class FName& InInBoneName, struct FVector& InLinearVelocity, bool InbIncludeSelf);
	void ResumeClothingSimulation();
	void ResetClothTeleportMode();
	void ResetAnimInstanceDynamics(enum class ETeleportType InInTeleportType);
	void ResetAllowedAnimCurveEvaluation();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UAnimationAsset* InNewAnimToPlay, bool InbLooping);
	void Play(bool InbLooping);
	void OverrideAnimationData(class UAnimationAsset* InInAnimToPlay, bool InbIsLooping, bool InbIsPlaying, float InPosition, float InPlayRate);
	void LinkAnimGraphByTag(class FName InInTag, TSubclassOf<class UAnimInstance> InInClass);
	void LinkAnimClassLayers(TSubclassOf<class UAnimInstance> InInClass);
	bool K2_GetClosestPointOnPhysicsAsset(struct FVector& InWorldPosition, struct FVector* InClosestWorldPosition, struct FVector* InNormal, class FName* InBoneName, float* InDistance);
	bool IsPlaying();
	bool IsClothingSimulationSuspended();
	bool IsBodyGravityEnabled(class FName InBoneName);
	bool HasValidAnimationInstance();
	bool GetTransformAttribute_Ref(class FName& InBoneName, class FName& InAttributeName, struct FTransform& InOutValue, enum class ECustomBoneAttributeLookup InLookupType);
	bool GetTransformAttribute(class FName& InBoneName, class FName& InAttributeName, const struct FTransform& InDefaultValue, struct FTransform* InOutValue, enum class ECustomBoneAttributeLookup InLookupType);
	float GetTeleportRotationThreshold();
	float GetTeleportDistanceThreshold();
	bool GetStringAttribute_Ref(class FName& InBoneName, class FName& InAttributeName, class FString& InOutValue, enum class ECustomBoneAttributeLookup InLookupType);
	bool GetStringAttribute(class FName& InBoneName, class FName& InAttributeName, const class FString& InDefaultValue, class FString* InOutValue, enum class ECustomBoneAttributeLookup InLookupType);
	class USkeletalMesh* GetSkeletalMeshAsset();
	struct FVector GetSkeletalCenterOfMass();
	class UAnimInstance* GetPostProcessInstance();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(class FName InMorphTargetName);
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(class FName InInGroup);
	class UAnimInstance* GetLinkedAnimLayerInstanceByClass(TSubclassOf<class UAnimInstance> InInClass);
	void GetLinkedAnimGraphInstancesByTag(class FName InInTag, TArray<class UAnimInstance*>* InOutLinkedInstances);
	class UAnimInstance* GetLinkedAnimGraphInstanceByTag(class FName InInTag);
	bool GetIntegerAttribute_Ref(class FName& InBoneName, class FName& InAttributeName, int32& InOutValue, enum class ECustomBoneAttributeLookup InLookupType);
	bool GetIntegerAttribute(class FName& InBoneName, class FName& InAttributeName, int32 InDefaultValue, int32* InOutValue, enum class ECustomBoneAttributeLookup InLookupType);
	bool GetFloatAttribute_Ref(class FName& InBoneName, class FName& InAttributeName, float& InOutValue, enum class ECustomBoneAttributeLookup InLookupType);
	bool GetFloatAttribute(class FName& InBoneName, class FName& InAttributeName, float InDefaultValue, float* InOutValue, enum class ECustomBoneAttributeLookup InLookupType);
	bool GetDisablePostProcessBlueprint();
	bool GetDisableAnimCurves();
	void GetCurrentJointAngles(class FName InInBoneName, float* InSwing1Angle, float* InTwistAngle, float* InSwing2Angle);
	void GetConstraintsFromBody(class FName InBodyName, bool InbParentConstraints, bool InbChildConstraints, bool InbIncludesTerminated, TArray<struct FConstraintInstanceAccessor>* InOutConstraints);
	void GetConstraints(bool InbIncludesTerminated, TArray<struct FConstraintInstanceAccessor>* InOutConstraints);
	struct FConstraintInstanceAccessor GetConstraintByName(class FName InConstraintName, bool InbIncludesTerminated);
	float GetClothMaxDistanceScale();
	class UClothingSimulationInteractor* GetClothingSimulationInteractor();
	float GetBoneMass(class FName InBoneName, bool InbScaleMass);
	struct FVector GetBoneLinearVelocity(class FName& InInBoneName);
	class UAnimInstance* GetAnimInstance();
	class UClass* GetAnimClass();
	enum class EAnimationMode GetAnimationMode();
	bool GetAllowRigidBodyAnimNode();
	bool GetAllowedAnimCurveEvaluate();
	bool GetAllowClothActors();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	class FName FindConstraintBoneName(int32 InConstraintIndex);
	void ClearMorphTargets();
	void BreakConstraint(const struct FVector& InImpulse, const struct FVector& InHitLocation, class FName InInBoneName);
	void BindClothToLeaderPoseComponent();
	void AllowAnimCurveEvaluation(class FName InNameOfCurve, bool InbAllow);
	void AddImpulseToAllBodiesBelow(const struct FVector& InImpulse, class FName InBoneName, bool InbVelChange, bool InbIncludeSelf);
	void AddForceToAllBodiesBelow(const struct FVector& InForce, class FName InBoneName, bool InbAccelChange, bool InbIncludeSelf);
	void AccumulateAllBodiesBelowPhysicsBlendWeight(class FName& InInBoneName, float InAddPhysicsBlendWeight, bool InbSkipCustomPhysicsType);
};

// 0x308 (0x620 - 0x318)
// Class Engine.Character
class ACharacter : public APawn
{
public:
	class USkeletalMeshComponent*                Mesh;                                              // 0x318(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterMovementComponent*           CharacterMovement;                                 // 0x320(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                     CapsuleComponent;                                  // 0x328(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FBasedMovementInfo                    BasedMovement;                                     // 0x330(0x48)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FBasedMovementInfo                    ReplicatedBasedMovement;                           // 0x378(0x48)(Net, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                        AnimRootMotionTranslationScale;                    // 0x3C0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E62[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BaseTranslationOffset;                             // 0x3C8(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FQuat                                 BaseRotationOffset;                                // 0x3E0(0x20)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReplicatedServerLastTransformUpdateTimeStamp;      // 0x400(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ReplayLastTransformUpdateTimeStamp;                // 0x404(0x4)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        ReplicatedMovementMode;                            // 0x408(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bInBaseReplication;                                // 0x409(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E64[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CrouchedEyeHeight;                                 // 0x40C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsCrouched : 1;                                   // Mask: 0x1, PropSize: 0x10x410(0x1)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bProxyIsJumpForceApplied : 1;                      // Mask: 0x2, PropSize: 0x10x410(0x1)(Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPressedJump : 1;                                  // Mask: 0x4, PropSize: 0x10x410(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientUpdating : 1;                               // Mask: 0x8, PropSize: 0x10x410(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientWasFalling : 1;                             // Mask: 0x10, PropSize: 0x10x410(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientResimulateRootMotion : 1;                   // Mask: 0x20, PropSize: 0x10x410(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientResimulateRootMotionSources : 1;            // Mask: 0x40, PropSize: 0x10x410(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSimGravityDisabled : 1;                           // Mask: 0x80, PropSize: 0x10x410(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientCheckEncroachmentOnNetUpdate : 1;           // Mask: 0x1, PropSize: 0x10x411(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bServerMoveIgnoreRootMotion : 1;                   // Mask: 0x2, PropSize: 0x10x411(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWasJumping : 1;                                   // Mask: 0x4, PropSize: 0x10x411(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A0 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E65[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        JumpKeyHoldTime;                                   // 0x414(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpForceTimeRemaining;                            // 0x418(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ProxyJumpForceStartedTime;                         // 0x41C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpMaxHoldTime;                                   // 0x420(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        JumpMaxCount;                                      // 0x424(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        JumpCurrentCount;                                  // 0x428(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        JumpCurrentCountPreJump;                           // 0x42C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E66[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnReachedJumpApex;                                 // 0x438(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            LandedDelegate;                                    // 0x448(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            MovementModeChangedDelegate;                       // 0x458(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnCharacterMovementUpdated;                        // 0x468(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRootMotionSourceGroup                SavedRootMotion;                                   // 0x478(0x48)(Transient, NativeAccessSpecifierPublic)
	struct FRootMotionMovementParams             ClientRootMotionParams;                            // 0x4C0(0x70)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves;                                // 0x530(0x10)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRepRootMotionMontage                 RepRootMotion;                                     // 0x540(0xD8)(Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_E68[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Character");
		return Clss;
	}

	void UnCrouch(bool InbClientSimulation);
	void StopJumping();
	void StopAnimMontage(class UAnimMontage* InAnimMontage);
	void ServerMovePacked(struct FCharacterServerMovePackedBits& InPackedBits);
	void ServerMoveOld(float InOldTimeStamp, const struct FVector_NetQuantize10& InOldAccel, uint8 InOldMoveFlags);
	void ServerMoveNoBase(float InTimestamp, const struct FVector_NetQuantize10& InInAccel, const struct FVector_NetQuantize100& InClientLoc, uint8 InCompressedMoveFlags, uint8 InClientRoll, uint32 InView, uint8 InClientMovementMode);
	void ServerMoveDualNoBase(float InTimeStamp0, const struct FVector_NetQuantize10& InInAccel0, uint8 InPendingFlags, uint32 InView0, float InTimestamp, const struct FVector_NetQuantize10& InInAccel, const struct FVector_NetQuantize100& InClientLoc, uint8 InNewFlags, uint8 InClientRoll, uint32 InView, uint8 InClientMovementMode);
	void ServerMoveDualHybridRootMotion(float InTimeStamp0, const struct FVector_NetQuantize10& InInAccel0, uint8 InPendingFlags, uint32 InView0, float InTimestamp, const struct FVector_NetQuantize10& InInAccel, const struct FVector_NetQuantize100& InClientLoc, uint8 InNewFlags, uint8 InClientRoll, uint32 InView, class UPrimitiveComponent* InClientMovementBase, class FName InClientBaseBoneName, uint8 InClientMovementMode);
	void ServerMoveDual(float InTimeStamp0, const struct FVector_NetQuantize10& InInAccel0, uint8 InPendingFlags, uint32 InView0, float InTimestamp, const struct FVector_NetQuantize10& InInAccel, const struct FVector_NetQuantize100& InClientLoc, uint8 InNewFlags, uint8 InClientRoll, uint32 InView, class UPrimitiveComponent* InClientMovementBase, class FName InClientBaseBoneName, uint8 InClientMovementMode);
	void ServerMove(float InTimestamp, const struct FVector_NetQuantize10& InInAccel, const struct FVector_NetQuantize100& InClientLoc, uint8 InCompressedMoveFlags, uint8 InClientRoll, uint32 InView, class UPrimitiveComponent* InClientMovementBase, class FName InClientBaseBoneName, uint8 InClientMovementMode);
	void RootMotionDebugClientPrintOnScreen(const class FString& InInString);
	float PlayAnimMontage(class UAnimMontage* InAnimMontage, float InInPlayRate, class FName InStartSectionName);
	void OnWalkingOffLedge(struct FVector& InPreviousFloorImpactNormal, struct FVector& InPreviousFloorContactNormal, struct FVector& InPreviousLocation, float InTimeDelta);
	void OnRep_RootMotion();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_ReplayLastTransformUpdateTimeStamp();
	void OnRep_IsCrouched();
	void OnLaunched(const struct FVector& InLaunchVelocity, bool InbXYOverride, bool InbZOverride);
	void OnLanded(struct FHitResult& InHit);
	void OnJumped();
	void LaunchCharacter(const struct FVector& InLaunchVelocity, bool InbXYOverride, bool InbZOverride);
	void K2_UpdateCustomMovement(float InDeltaTime);
	void K2_OnStartCrouch(float InHalfHeightAdjust, float InScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(enum class EMovementMode InPrevMovementMode, enum class EMovementMode InNewMovementMode, uint8 InPrevCustomMode, uint8 InNewCustomMode);
	void K2_OnEndCrouch(float InHalfHeightAdjust, float InScaledHalfHeightAdjust);
	void Jump();
	bool IsPlayingRootMotion();
	bool IsPlayingNetworkedRootMotionMontage();
	bool IsJumpProvidingForce();
	bool HasAnyRootMotion();
	class UAnimMontage* GetCurrentMontage();
	struct FVector GetBaseTranslationOffset();
	struct FRotator GetBaseRotationOffsetRotator();
	float GetAnimRootMotionTranslationScale();
	void Crouch(bool InbClientSimulation);
	void ClientVeryShortAdjustPosition(float InTimestamp, const struct FVector& InNewLoc, class UPrimitiveComponent* InNewBase, class FName InNewBaseBoneName, bool InbHasBase, bool InbBaseRelativePosition, uint8 InServerMovementMode);
	void ClientMoveResponsePacked(struct FCharacterMoveResponsePackedBits& InPackedBits);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	void ClientAdjustRootMotionSourcePosition(float InTimestamp, const struct FRootMotionSourceGroup& InServerRootMotion, bool InbHasAnimRootMotion, float InServerMontageTrackPosition, const struct FVector& InServerLoc, const struct FVector_NetQuantizeNormal& InServerRotation, float InServerVelZ, class UPrimitiveComponent* InServerBase, class FName InServerBoneName, bool InbHasBase, bool InbBaseRelativePosition, uint8 InServerMovementMode);
	void ClientAdjustRootMotionPosition(float InTimestamp, float InServerMontageTrackPosition, const struct FVector& InServerLoc, const struct FVector_NetQuantizeNormal& InServerRotation, float InServerVelZ, class UPrimitiveComponent* InServerBase, class FName InServerBoneName, bool InbHasBase, bool InbBaseRelativePosition, uint8 InServerMovementMode);
	void ClientAdjustPosition(float InTimestamp, const struct FVector& InNewLoc, const struct FVector& InNewVel, class UPrimitiveComponent* InNewBase, class FName InNewBaseBoneName, bool InbHasBase, bool InbBaseRelativePosition, uint8 InServerMovementMode);
	void ClientAckGoodMove(float InTimestamp);
	bool CanJumpInternal();
	bool CanJump();
	bool CanCrouch();
	void CacheInitialMeshOffset(const struct FVector& InMeshRelativeLocation, const struct FRotator& InMeshRelativeRotation);
};

// 0x88 (0xB0 - 0x28)
// Class Engine.MaterialExpression
class UMaterialExpression : public UObject
{
public:
	int32                                        MaterialExpressionEditorX;                         // 0x28(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaterialExpressionEditorY;                         // 0x2C(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphNode*                          GraphNode;                                         // 0x30(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialExpression*                   SubgraphExpression;                                // 0x38(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E78[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 MaterialExpressionGuid;                            // 0x50(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             Material;                                          // 0x60(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialFunction*                     Function;                                          // 0x68(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Desc;                                              // 0x70(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E79[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bRealtimePreview : 1;                              // Mask: 0x1, PropSize: 0x10x84(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNeedToUpdatePreview : 1;                          // Mask: 0x2, PropSize: 0x10x84(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A1 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E7A[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIsParameterExpression : 1;                        // Mask: 0x1, PropSize: 0x10x88(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A2 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E7B[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bCommentBubbleVisible : 1;                         // Mask: 0x1, PropSize: 0x10x8C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowOutputNameOnPin : 1;                          // Mask: 0x2, PropSize: 0x10x8C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowMaskColorsOnPin : 1;                          // Mask: 0x4, PropSize: 0x10x8C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHidePreviewWindow : 1;                            // Mask: 0x8, PropSize: 0x10x8C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCollapsed : 1;                                    // Mask: 0x10, PropSize: 0x10x8C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShaderInputData : 1;                              // Mask: 0x20, PropSize: 0x10x8C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowInputs : 1;                                   // Mask: 0x40, PropSize: 0x10x8C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowOutputs : 1;                                  // Mask: 0x80, PropSize: 0x10x8C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E7F[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FText>                          MenuCategories;                                    // 0x90(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FExpressionOutput>             Outputs;                                           // 0xA0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpression");
		return Clss;
	}

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.MaterialExpressionTextureBase
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                              Texture;                                           // 0xB0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialSamplerType              SamplerType;                                       // 0xB8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        IsDefaultMeshpaintTexture : 1;                     // Mask: 0x1, PropSize: 0x10xB9(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E83[0x6];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureBase");
		return Clss;
	}

};

// 0xF8 (0x1B8 - 0xC0)
// Class Engine.MaterialExpressionTextureSample
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xC0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      TextureObject;                                     // 0xE8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      MipValue;                                          // 0x110(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      CoordinatesDX;                                     // 0x138(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      CoordinatesDY;                                     // 0x160(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      AutomaticViewMipBiasValue;                         // 0x188(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class ETextureMipValueMode              MipValueMode;                                      // 0x1B0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESamplerSourceMode                SamplerSource;                                     // 0x1B1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        AutomaticViewMipBias : 1;                          // Mask: 0x1, PropSize: 0x10x1B2(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        ConstCoordinate;                                   // 0x1B3(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ConstMipValue;                                     // 0x1B4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSample");
		return Clss;
	}

};

// 0x88 (0x240 - 0x1B8)
// Class Engine.MaterialExpressionTextureSampleParameter
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	class FName                                  ParameterName;                                     // 0x1B8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ExpressionGUID;                                    // 0x1C0(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Group;                                             // 0x1D0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SortPriority;                                      // 0x1D8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E8B[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FParameterChannelNames                ChannelNames;                                      // 0x1E0(0x60)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameter");
		return Clss;
	}

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameter2D
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameter2D");
		return Clss;
	}

};

// 0x328 (0x350 - 0x28)
// Class Engine.AnimInstance
class UAnimInstance : public UObject
{
public:
	class USkeleton*                             CurrentSkeleton;                                   // 0x28(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERootMotionMode                   RootMotionMode;                                    // 0x30(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseMultiThreadedAnimationUpdate : 1;              // Mask: 0x1, PropSize: 0x10x31(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsingCopyPoseFromMesh : 1;                        // Mask: 0x2, PropSize: 0x10x31(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A9 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bReceiveNotifiesFromLinkedInstances : 1;           // Mask: 0x10, PropSize: 0x10x31(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPropagateNotifiesToLinkedInstances : 1;           // Mask: 0x20, PropSize: 0x10x31(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseMainInstanceMontageEvaluationData : 1;         // Mask: 0x40, PropSize: 0x10x31(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bQueueMontageEvents : 1;                           // Mask: 0x80, PropSize: 0x10x31(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_FF4[0x6];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnMontageBlendingOut;                              // 0x38(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMontageStarted;                                  // 0x48(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnMontageEnded;                                    // 0x58(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAllMontageInstancesEnded;                        // 0x68(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_FF6[0xD8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAnimNotifyQueue                      NotifyQueue;                                       // 0x150(0x70)(Transient, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>              ActiveAnimNotifyState;                             // 0x1C0(0x10)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEventReference>     ActiveAnimNotifyEventReference;                    // 0x1D0(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_FF8[0x170];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimInstance");
		return Clss;
	}

	bool WasAnimNotifyTriggeredInStateMachine(int32 InMachineIndex, TSubclassOf<class UAnimNotify> InAnimNotifyType);
	bool WasAnimNotifyTriggeredInSourceState(int32 InMachineIndex, int32 InStateIndex, TSubclassOf<class UAnimNotify> InAnimNotifyType);
	bool WasAnimNotifyTriggeredInAnyState(TSubclassOf<class UAnimNotify> InAnimNotifyType);
	bool WasAnimNotifyStateActiveInStateMachine(int32 InMachineIndex, TSubclassOf<class UAnimNotifyState> InAnimNotifyStateType);
	bool WasAnimNotifyStateActiveInSourceState(int32 InMachineIndex, int32 InStateIndex, TSubclassOf<class UAnimNotifyState> InAnimNotifyStateType);
	bool WasAnimNotifyStateActiveInAnyState(TSubclassOf<class UAnimNotifyState> InAnimNotifyStateType);
	bool WasAnimNotifyNameTriggeredInStateMachine(int32 InMachineIndex, class FName InNotifyName);
	bool WasAnimNotifyNameTriggeredInSourceState(int32 InMachineIndex, int32 InStateIndex, class FName InNotifyName);
	bool WasAnimNotifyNameTriggeredInAnyState(class FName InNotifyName);
	void UnlockAIResources(bool InbUnlockMovement, bool InUnlockAILogic);
	void UnlinkAnimClassLayers(TSubclassOf<class UAnimInstance> InInClass);
	class APawn* TryGetPawnOwner();
	void StopSlotAnimation(float InInBlendOutTime, class FName InSlotNodeName);
	void SnapshotPose(struct FPoseSnapshot& InSnapshot);
	void SetUseMainInstanceMontageEvaluationData(bool InbSet);
	void SetRootMotionMode(enum class ERootMotionMode InValue);
	void SetReceiveNotifiesFromLinkedInstances(bool InbSet);
	void SetPropagateNotifiesToLinkedInstances(bool InbSet);
	void SetMorphTarget(class FName InMorphTargetName, float InValue);
	void SavePoseSnapshot(class FName InSnapshotName);
	void ResetDynamics(enum class ETeleportType InInTeleportType);
	bool RequestTransitionEvent(class FName InEventName, double InRequestTimeout, enum class ETransitionRequestQueueMode InQueueMode, enum class ETransitionRequestOverwriteMode InOverwriteMode);
	void RequestSlotGroupInertialization(class FName InInSlotGroupName, float InDuration, class UBlendProfile* InBlendProfile);
	void RemovePoseSnapshot(class FName InSnapshotName);
	bool QueryTransitionEvent(int32 InMachineIndex, int32 InTransitionIndex, class FName InEventName);
	bool QueryAndMarkTransitionEvent(int32 InMachineIndex, int32 InTransitionIndex, class FName InEventName);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendSettings(class UAnimSequenceBase* InAsset, class FName InSlotNodeName, struct FMontageBlendSettings& InBlendInSettings, struct FMontageBlendSettings& InBlendOutSettings, float InInPlayRate, int32 InLoopCount, float InBlendOutTriggerTime, float InInTimeToStartMontageAt);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage_WithBlendArgs(class UAnimSequenceBase* InAsset, class FName InSlotNodeName, struct FAlphaBlendArgs& InBlendIn, struct FAlphaBlendArgs& InBlendOut, float InInPlayRate, int32 InLoopCount, float InBlendOutTriggerTime, float InInTimeToStartMontageAt);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* InAsset, class FName InSlotNodeName, float InBlendInTime, float InBlendOutTime, float InInPlayRate, int32 InLoopCount, float InBlendOutTriggerTime, float InInTimeToStartMontageAt);
	void MontageSync_StopFollowing(class UAnimMontage* InMontageFollower);
	void MontageSync_Follow(class UAnimMontage* InMontageFollower, class UAnimInstance* InOtherAnimInstance, class UAnimMontage* InMontageLeader);
	void Montage_StopWithBlendSettings(struct FMontageBlendSettings& InBlendOutSettings, class UAnimMontage* InMontage);
	void Montage_StopWithBlendOut(struct FAlphaBlendArgs& InBlendOut, class UAnimMontage* InMontage);
	void Montage_StopGroupByName(float InInBlendOutTime, class FName InGroupName);
	void Montage_Stop(float InInBlendOutTime, class UAnimMontage* InMontage);
	void Montage_SetPosition(class UAnimMontage* InMontage, float InNewPosition);
	void Montage_SetPlayRate(class UAnimMontage* InMontage, float InNewPlayRate);
	void Montage_SetNextSection(class FName InSectionNameToChange, class FName InNextSection, class UAnimMontage* InMontage);
	void Montage_Resume(class UAnimMontage* InMontage);
	float Montage_PlayWithBlendSettings(class UAnimMontage* InMontageToPlay, struct FMontageBlendSettings& InBlendInSettings, float InInPlayRate, enum class EMontagePlayReturnType InReturnValueType, float InInTimeToStartMontageAt, bool InbStopAllMontages);
	float Montage_PlayWithBlendIn(class UAnimMontage* InMontageToPlay, struct FAlphaBlendArgs& InBlendIn, float InInPlayRate, enum class EMontagePlayReturnType InReturnValueType, float InInTimeToStartMontageAt, bool InbStopAllMontages);
	float Montage_Play(class UAnimMontage* InMontageToPlay, float InInPlayRate, enum class EMontagePlayReturnType InReturnValueType, float InInTimeToStartMontageAt, bool InbStopAllMontages);
	void Montage_Pause(class UAnimMontage* InMontage);
	void Montage_JumpToSectionsEnd(class FName InSectionName, class UAnimMontage* InMontage);
	void Montage_JumpToSection(class FName InSectionName, class UAnimMontage* InMontage);
	bool Montage_IsPlaying(class UAnimMontage* InMontage);
	bool Montage_IsActive(class UAnimMontage* InMontage);
	float Montage_GetPosition(class UAnimMontage* InMontage);
	float Montage_GetPlayRate(class UAnimMontage* InMontage);
	bool Montage_GetIsStopped(class UAnimMontage* InMontage);
	class FName Montage_GetCurrentSection(class UAnimMontage* InMontage);
	float Montage_GetBlendTime(class UAnimMontage* InMontage);
	void LockAIResources(bool InbLockMovement, bool InLockAILogic);
	void LinkAnimGraphByTag(class FName InInTag, TSubclassOf<class UAnimInstance> InInClass);
	void LinkAnimClassLayers(TSubclassOf<class UAnimInstance> InInClass);
	bool IsUsingMainInstanceMontageEvaluationData();
	bool IsSyncGroupBetweenMarkers(class FName InInSyncGroupName, class FName InPreviousMarker, class FName InNextMarker, bool InbRespectMarkerOrder);
	bool IsPlayingSlotAnimation(class UAnimSequenceBase* InAsset, class FName InSlotNodeName);
	bool IsAnyMontagePlaying();
	bool HasMarkerBeenHitThisFrame(class FName InSyncGroup, class FName InMarkerName);
	bool GetTimeToClosestMarker(class FName InSyncGroup, class FName InMarkerName, float* InOutMarkerTime);
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(class FName InInSyncGroupName);
	float GetRelevantAnimTimeRemainingFraction(int32 InMachineIndex, int32 InStateIndex);
	float GetRelevantAnimTimeRemaining(int32 InMachineIndex, int32 InStateIndex);
	float GetRelevantAnimTimeFraction(int32 InMachineIndex, int32 InStateIndex);
	float GetRelevantAnimTime(int32 InMachineIndex, int32 InStateIndex);
	float GetRelevantAnimLength(int32 InMachineIndex, int32 InStateIndex);
	bool GetReceiveNotifiesFromLinkedInstances();
	bool GetPropagateNotifiesToLinkedInstances();
	class USkeletalMeshComponent* GetOwningComponent();
	class AActor* GetOwningActor();
	void GetLinkedAnimLayerInstancesByGroup(class FName InInGroup, TArray<class UAnimInstance*>* InOutLinkedInstances);
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(class FName InInGroup, TSubclassOf<class UAnimInstance> InInClass);
	class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(class FName InInGroup);
	class UAnimInstance* GetLinkedAnimLayerInstanceByClass(TSubclassOf<class UAnimInstance> InInClass);
	void GetLinkedAnimGraphInstancesByTag(class FName InInTag, TArray<class UAnimInstance*>* InOutLinkedInstances);
	class UAnimInstance* GetLinkedAnimGraphInstanceByTag(class FName InInTag);
	float GetInstanceTransitionTimeElapsedFraction(int32 InMachineIndex, int32 InTransitionIndex);
	float GetInstanceTransitionTimeElapsed(int32 InMachineIndex, int32 InTransitionIndex);
	float GetInstanceTransitionCrossfadeDuration(int32 InMachineIndex, int32 InTransitionIndex);
	float GetInstanceStateWeight(int32 InMachineIndex, int32 InStateIndex);
	float GetInstanceMachineWeight(int32 InMachineIndex);
	float GetInstanceCurrentStateElapsedTime(int32 InMachineIndex);
	float GetInstanceAssetPlayerTimeFromEndFraction(int32 InAssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEnd(int32 InAssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFraction(int32 InAssetPlayerIndex);
	float GetInstanceAssetPlayerTime(int32 InAssetPlayerIndex);
	float GetInstanceAssetPlayerLength(int32 InAssetPlayerIndex);
	float GetDeltaSeconds();
	bool GetCurveValueWithDefault(class FName InCurveName, float InDefaultValue, float* InOutValue);
	float GetCurveValue(class FName InCurveName);
	class FName GetCurrentStateName(int32 InMachineIndex);
	class UAnimMontage* GetCurrentActiveMontage();
	void GetAllCurveNames(TArray<class FName>* InOutNames);
	void GetActiveCurveNames(enum class EAnimCurveType InCurveType, TArray<class FName>* InOutNames);
	void ClearTransitionEvents(class FName InEventName);
	void ClearMorphTargets();
	void ClearAllTransitionEvents();
	float CalculateDirection(struct FVector& InVelocity, struct FRotator& InBaseRotation);
	void BlueprintUpdateAnimation(float InDeltaTimeX);
	void BlueprintThreadSafeUpdateAnimation(float InDeltaTime);
	void BlueprintPostEvaluateAnimation();
	void BlueprintLinkedAnimationLayersInitialized();
	void BlueprintInitializeAnimation();
	void BlueprintBeginPlay();
};

// 0xC0 (0xE8 - 0x28)
// Class Engine.CameraShakeBase
class UCameraShakeBase : public UObject
{
public:
	bool                                         bSingleInstance;                                   // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1014[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ShakeScale;                                        // 0x2C(0x4)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraShakePattern*                   RootShakePattern;                                  // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APlayerCameraManager*                  CameraManager;                                     // 0x38(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1016[0xA8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraShakeBase");
		return Clss;
	}

	void SetRootShakePattern(class UCameraShakePattern* InInPattern);
	class UCameraShakePattern* GetRootShakePattern();
};

// 0x0 (0x28 - 0x28)
// Class Engine.CameraShakePattern
class UCameraShakePattern : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraShakePattern");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.CameraModifier
class UCameraModifier : public UObject
{
public:
	uint8                                        bDebug : 1;                                        // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bExclusive : 1;                                    // Mask: 0x2, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_AC : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1034[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        Priority;                                          // 0x2C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1036[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCameraManager*                  CameraOwner;                                       // 0x30(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AlphaInTime;                                       // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AlphaOutTime;                                      // 0x3C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Alpha;                                             // 0x40(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1037[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraModifier");
		return Clss;
	}

	void OnCameraOwnerDestroyed(class AActor* InInOwner);
	bool IsDisabled();
	class AActor* GetViewTarget();
	void EnableModifier();
	void DisableModifier(bool InbImmediate);
	void BlueprintModifyPostProcess(float InDeltaTime, float* InPostProcessBlendWeight, struct FPostProcessSettings* InPostProcessSettings);
	void BlueprintModifyCamera(float InDeltaTime, const struct FVector& InViewLocation, const struct FRotator& InViewRotation, float InFOV, struct FVector* InNewViewLocation, struct FRotator* InNewViewRotation, float* InNewFOV);
};

// 0x58 (0x80 - 0x28)
// Class Engine.Commandlet
class UCommandlet : public UObject
{
public:
	class FString                                HelpDescription;                                   // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                HelpUsage;                                         // 0x38(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                HelpWebLink;                                       // 0x48(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        HelpParamNames;                                    // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        HelpParamDescriptions;                             // 0x68(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        IsServer : 1;                                      // Mask: 0x1, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        IsClient : 1;                                      // Mask: 0x2, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        IsEditor : 1;                                      // Mask: 0x4, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        LogToConsole : 1;                                  // Mask: 0x8, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ShowErrorCount : 1;                                // Mask: 0x10, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ShowProgress : 1;                                  // Mask: 0x20, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_103F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Commandlet");
		return Clss;
	}

};

// 0x9C0 (0xC60 - 0x2A0)
// Class Engine.AudioComponent
class UAudioComponent : public USceneComponent
{
public:
	uint8                                        Pad_10F6[0x198];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundBase*                            Sound;                                             // 0x438(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioParameter>               DefaultParameters;                                 // 0x440(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAudioParameter>               InstanceParameters;                                // 0x450(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class USoundClass*                           SoundClassOverride;                                // 0x460(0x8)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoDestroy : 1;                                  // Mask: 0x1, PropSize: 0x10x468(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStopWhenOwnerDestroyed : 1;                       // Mask: 0x2, PropSize: 0x10x468(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldRemainActiveIfDropped : 1;                  // Mask: 0x4, PropSize: 0x10x468(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowSpatialization : 1;                          // Mask: 0x8, PropSize: 0x10x468(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x10, PropSize: 0x10x468(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideSubtitlePriority : 1;                     // Mask: 0x20, PropSize: 0x10x468(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsUISound : 1;                                    // Mask: 0x40, PropSize: 0x10x468(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableLowPassFilter : 1;                          // Mask: 0x80, PropSize: 0x10x468(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverridePriority : 1;                             // Mask: 0x1, PropSize: 0x10x469(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSuppressSubtitles : 1;                            // Mask: 0x2, PropSize: 0x10x469(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanPlayMultipleInstances : 1;                     // Mask: 0x4, PropSize: 0x10x469(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableParameterUpdatesWhilePlaying : 1;          // Mask: 0x8, PropSize: 0x10x469(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_AD : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_AE : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAutoManageAttachment : 1;                         // Mask: 0x40, PropSize: 0x10x46A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_AF : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10FE[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  AudioComponentUserID;                              // 0x470(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchModulationMin;                                // 0x478(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchModulationMax;                                // 0x47C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeModulationMin;                               // 0x480(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeModulationMax;                               // 0x484(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMultiplier;                                  // 0x488(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EnvelopeFollowerAttackTime;                        // 0x48C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EnvelopeFollowerReleaseTime;                       // 0x490(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Priority;                                          // 0x494(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SubtitlePriority;                                  // 0x498(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1102[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundEffectSourcePresetChain*         SourceEffectChain;                                 // 0x4A0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchMultiplier;                                   // 0x4A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LowPassFilterFrequency;                            // 0x4AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1104[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundAttenuation*                     AttenuationSettings;                               // 0x4B8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings             AttenuationOverrides;                              // 0x4C0(0x3C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USoundConcurrency*                     ConcurrencySettings;                               // 0x888(0x8)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class USoundConcurrency*>               ConcurrencySet;                                    // 0x890(0x50)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_1105[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAttachmentRule                   AutoAttachLocationRule;                            // 0x8EC(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAttachmentRule                   AutoAttachRotationRule;                            // 0x8ED(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAttachmentRule                   AutoAttachScaleRule;                               // 0x8EE(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1108[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoundModulationDefaultRoutingSettings ModulationRouting;                                 // 0x8F0(0x188)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAudioPlayStateChanged;                           // 0xA78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1109[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAudioVirtualizationChanged;                      // 0xAA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_110A[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAudioFinished;                                   // 0xAC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_110C[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAudioPlaybackPercent;                            // 0xAF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_110D[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAudioSingleEnvelopeValue;                        // 0xB18(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_110E[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnAudioMultiEnvelopeValue;                         // 0xB40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_110F[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FDelegateProperty_                           OnQueueSubtitles;                                  // 0xB68(0x10)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1111[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class USceneComponent>        AutoAttachParent;                                  // 0xB88(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  AutoAttachSocketName;                              // 0xB90(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1112[0xC8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioComponent");
		return Clss;
	}

	void StopDelayed(float InDelayTime);
	void Stop();
	void SetWaveParameter(class FName InInName, class USoundWave* InInWave);
	void SetVolumeMultiplier(float InNewVolumeMultiplier);
	void SetUISound(bool InbInUISound);
	void SetSubmixSend(class USoundSubmixBase* InSubmix, float InSendLevel);
	void SetSourceBusSendPreEffect(class USoundSourceBus* InSoundSourceBus, float InSourceBusSendLevel);
	void SetSourceBusSendPostEffect(class USoundSourceBus* InSoundSourceBus, float InSourceBusSendLevel);
	void SetSound(class USoundBase* InNewSound);
	void SetPitchMultiplier(float InNewPitchMultiplier);
	void SetPaused(bool InbPause);
	void SetOutputToBusOnly(bool InbInOutputToBusOnly);
	void SetLowPassFilterFrequency(float InInLowPassFilterFrequency);
	void SetLowPassFilterEnabled(bool InInLowPassFilterEnabled);
	void SetIntParameter(class FName InInName, int32 InInInt);
	void SetFloatParameter(class FName InInName, float InInFloat);
	void SetBoolParameter(class FName InInName, bool InInBool);
	void SetAudioBusSendPreEffect(class UAudioBus* InAudioBus, float InAudioBusSendLevel);
	void SetAudioBusSendPostEffect(class UAudioBus* InAudioBus, float InAudioBusSendLevel);
	void PlayQuantized(class UObject* InWorldContextObject, class UQuartzClockHandle*& InInClockHandle, struct FQuartzQuantizationBoundary& InInQuantizationBoundary, FDelegateProperty_& InInDelegate, float InInStartTime, float InInFadeInDuration, float InInFadeVolumeLevel, enum class EAudioFaderCurve InInFadeCurve);
	void Play(float InStartTime);
	bool IsVirtualized();
	bool IsPlaying();
	bool HasCookedFFTData();
	bool HasCookedAmplitudeEnvelopeData();
	enum class EAudioComponentPlayState GetPlayState();
	bool GetCookedFFTDataForAllPlayingSounds(TArray<struct FSoundWaveSpectralDataPerSound>* InOutSoundWaveSpectralData);
	bool GetCookedFFTData(TArray<float>& InFrequenciesToGet, TArray<struct FSoundWaveSpectralData>* InOutSoundWaveSpectralData);
	bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<struct FSoundWaveEnvelopeDataPerSound>* InOutEnvelopeData);
	bool GetCookedEnvelopeData(float* InOutEnvelopeData);
	void FadeOut(float InFadeOutDuration, float InFadeVolumeLevel, enum class EAudioFaderCurve InFadeCurve);
	void FadeIn(float InFadeInDuration, float InFadeVolumeLevel, float InStartTime, enum class EAudioFaderCurve InFadeCurve);
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* InOutAttenuationSettings);
	void AdjustVolume(float InAdjustVolumeDuration, float InAdjustVolumeLevel, enum class EAudioFaderCurve InFadeCurve);
	void AdjustAttenuation(struct FSoundAttenuationSettings& InInAttenuationSettings);
};

// 0x50 (0x78 - 0x28)
// Class Engine.Exporter
class UExporter : public UObject
{
public:
	TSubclassOf<class UObject>                   SupportedClass;                                    // 0x28(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                               ExportRootScope;                                   // 0x30(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        FormatExtension;                                   // 0x38(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        FormatDescription;                                 // 0x48(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        PreferredFormatIndex;                              // 0x58(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TextIndent;                                        // 0x5C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bText : 1;                                         // Mask: 0x1, PropSize: 0x10x60(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSelectedOnly : 1;                                 // Mask: 0x2, PropSize: 0x10x60(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceFileOperations : 1;                          // Mask: 0x4, PropSize: 0x10x60(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B0 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_111F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAssetExportTask*                      ExportTask;                                        // 0x68(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1120[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Exporter");
		return Clss;
	}

	bool ScriptRunAssetExportTask(class UAssetExportTask* InTask);
	bool RunAssetExportTasks(TArray<class UAssetExportTask*>& InExportTasks);
	bool RunAssetExportTask(class UAssetExportTask* InTask);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AssetUserData
class UAssetUserData : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetUserData");
		return Clss;
	}

};

// 0x68 (0x108 - 0xA0)
// Class Engine.MovementComponent
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                       UpdatedComponent;                                  // 0xA0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                   UpdatedPrimitive;                                  // 0xA8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1135[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               Velocity;                                          // 0xB8(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PlaneConstraintNormal;                             // 0xD0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               PlaneConstraintOrigin;                             // 0xE8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUpdateOnlyIfRendered : 1;                         // Mask: 0x1, PropSize: 0x10x100(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoUpdateTickRegistration : 1;                   // Mask: 0x2, PropSize: 0x10x100(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTickBeforeOwner : 1;                              // Mask: 0x4, PropSize: 0x10x100(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoRegisterUpdatedComponent : 1;                 // Mask: 0x8, PropSize: 0x10x100(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bConstrainToPlane : 1;                             // Mask: 0x10, PropSize: 0x10x100(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSnapToPlaneAtStart : 1;                           // Mask: 0x20, PropSize: 0x10x100(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoRegisterPhysicsVolumeUpdates : 1;             // Mask: 0x40, PropSize: 0x10x100(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bComponentShouldUpdatePhysicsVolume : 1;           // Mask: 0x80, PropSize: 0x10x100(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_113C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EPlaneConstraintAxisSetting       PlaneConstraintAxisSetting;                        // 0x103(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_113D[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MovementComponent");
		return Clss;
	}

	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	void SetUpdatedComponent(class USceneComponent* InNewUpdatedComponent);
	void SetPlaneConstraintOrigin(const struct FVector& InPlaneOrigin);
	void SetPlaneConstraintNormal(const struct FVector& InPlaneNormal);
	void SetPlaneConstraintFromVectors(const struct FVector& InForward, const struct FVector& InUp);
	void SetPlaneConstraintEnabled(bool InbEnabled);
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting InNewAxisSetting);
	void PhysicsVolumeChanged(class APhysicsVolume* InNewVolume);
	bool K2_MoveUpdatedComponent(const struct FVector& InDelta, const struct FRotator& InNewRotation, struct FHitResult* InOutHit, bool InbSweep, bool InbTeleport);
	bool IsExceedingMaxSpeed(float InMaxSpeed);
	struct FVector GetPlaneConstraintOrigin();
	struct FVector GetPlaneConstraintNormal();
	enum class EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();
	class APhysicsVolume* GetPhysicsVolume();
	float GetMaxSpeed();
	float GetGravityZ();
	struct FVector ConstrainNormalToPlane(const struct FVector& InNormal);
	struct FVector ConstrainLocationToPlane(const struct FVector& InLocation);
	struct FVector ConstrainDirectionToPlane(const struct FVector& InDirection);
};

// 0x48 (0x150 - 0x108)
// Class Engine.NavMovementComponent
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                   NavAgentProps;                                     // 0x108(0x38)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FixedPathBrakingDistance;                          // 0x140(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUpdateNavAgentWithOwnersCollision : 1;            // Mask: 0x1, PropSize: 0x10x144(0x1)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUseAccelerationForPaths : 1;                      // Mask: 0x2, PropSize: 0x10x144(0x1)(Edit, Config, GlobalConfig, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUseFixedBrakingDistanceForPaths : 1;              // Mask: 0x4, PropSize: 0x10x144(0x1)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_B1 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	struct FMovementProperties                   MovementState;                                     // 0x145(0x1)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1146[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UObject*                               PathFollowingComp;                                 // 0x148(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavMovementComponent");
		return Clss;
	}

	void StopMovementKeepPathing();
	void StopActiveMovement();
	bool IsSwimming();
	bool IsMovingOnGround();
	bool IsFlying();
	bool IsFalling();
	bool IsCrouching();
};

// 0x8 (0x158 - 0x150)
// Class Engine.PawnMovementComponent
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                 PawnOwner;                                         // 0x150(0x8)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PawnMovementComponent");
		return Clss;
	}

	bool IsMoveInputIgnored();
	struct FVector GetPendingInputVector();
	class APawn* GetPawnOwner();
	struct FVector GetLastInputVector();
	struct FVector ConsumeInputVector();
	void AddInputVector(const struct FVector& InWorldVector, bool InbForce);
};

// 0xDA0 (0xEF8 - 0x158)
// Class Engine.CharacterMovementComponent
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	uint8                                        Pad_118E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ACharacter*                            CharacterOwner;                                    // 0x168(0x8)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GravityScale;                                      // 0x170(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxStepHeight;                                     // 0x174(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpZVelocity;                                     // 0x178(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpOffJumpZFactor;                                // 0x17C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_118F[0x1C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WalkableFloorAngle;                                // 0x19C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        WalkableFloorZ;                                    // 0x1A0(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EMovementMode                     MovementMode;                                      // 0x1A4(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CustomMovementMode;                                // 0x1A5(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENetworkSmoothingMode             NetworkSmoothingMode;                              // 0x1A6(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1190[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GroundFriction;                                    // 0x1A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1191[0x3C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxWalkSpeed;                                      // 0x1E8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxWalkSpeedCrouched;                              // 0x1EC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSwimSpeed;                                      // 0x1F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxFlySpeed;                                       // 0x1F4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxCustomMovementSpeed;                            // 0x1F8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxAcceleration;                                   // 0x1FC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinAnalogWalkSpeed;                                // 0x200(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingFrictionFactor;                             // 0x204(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingFriction;                                   // 0x208(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingSubStepTime;                                // 0x20C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingDecelerationWalking;                        // 0x210(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingDecelerationFalling;                        // 0x214(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingDecelerationSwimming;                       // 0x218(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingDecelerationFlying;                         // 0x21C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AirControl;                                        // 0x220(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AirControlBoostMultiplier;                         // 0x224(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AirControlBoostVelocityThreshold;                  // 0x228(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FallingLateralFriction;                            // 0x22C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchedHalfHeight;                                // 0x230(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Buoyancy;                                          // 0x234(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PerchRadiusThreshold;                              // 0x238(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PerchAdditionalHeight;                             // 0x23C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RotationRate;                                      // 0x240(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bUseSeparateBrakingFriction : 1;                   // Mask: 0x1, PropSize: 0x10x258(0x1)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyGravityWhileJumping : 1;                     // Mask: 0x2, PropSize: 0x10x258(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseControllerDesiredRotation : 1;                 // Mask: 0x4, PropSize: 0x10x258(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrientRotationToMovement : 1;                     // Mask: 0x8, PropSize: 0x10x258(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSweepWhileNavWalking : 1;                         // Mask: 0x10, PropSize: 0x10x258(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B3 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bMovementInProgress : 1;                           // Mask: 0x40, PropSize: 0x10x258(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bEnableScopedMovementUpdates : 1;                  // Mask: 0x80, PropSize: 0x10x258(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableServerDualMoveScopedMovementUpdates : 1;    // Mask: 0x1, PropSize: 0x10x259(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceMaxAccel : 1;                                // Mask: 0x2, PropSize: 0x10x259(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRunPhysicsWithNoController : 1;                   // Mask: 0x4, PropSize: 0x10x259(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceNextFloorCheck : 1;                          // Mask: 0x8, PropSize: 0x10x259(0x1)(Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShrinkProxyCapsule : 1;                           // Mask: 0x10, PropSize: 0x10x259(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanWalkOffLedges : 1;                             // Mask: 0x20, PropSize: 0x10x259(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanWalkOffLedgesWhenCrouching : 1;                // Mask: 0x40, PropSize: 0x10x259(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B4 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_B5 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNetworkSkipProxyPredictionOnNetUpdate : 1;        // Mask: 0x2, PropSize: 0x10x25A(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetworkSkipProxyPredictionAlways : 1;             // Mask: 0x4, PropSize: 0x10x25A(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // Mask: 0x8, PropSize: 0x10x25A(0x1)(Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDeferUpdateMoveComponent : 1;                     // Mask: 0x10, PropSize: 0x10x25A(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnablePhysicsInteraction : 1;                     // Mask: 0x20, PropSize: 0x10x25A(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTouchForceScaledToMass : 1;                       // Mask: 0x40, PropSize: 0x10x25A(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPushForceScaledToMass : 1;                        // Mask: 0x80, PropSize: 0x10x25A(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPushForceUsingZOffset : 1;                        // Mask: 0x1, PropSize: 0x10x25B(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bScalePushForceToVelocity : 1;                     // Mask: 0x2, PropSize: 0x10x25B(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B6 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_119F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       DeferredUpdatedMoveComponent;                      // 0x260(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxOutOfWaterStepHeight;                           // 0x268(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutofWaterZ;                                       // 0x26C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Mass;                                              // 0x270(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StandingDownwardForceScale;                        // 0x274(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialPushForceFactor;                            // 0x278(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PushForceFactor;                                   // 0x27C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PushForcePointZOffsetFactor;                       // 0x280(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TouchForceFactor;                                  // 0x284(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinTouchForce;                                     // 0x288(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxTouchForce;                                     // 0x28C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RepulsionForce;                                    // 0x290(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11A8[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               Acceleration;                                      // 0x298(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FQuat                                 LastUpdateRotation;                                // 0x2B0(0x20)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LastUpdateLocation;                                // 0x2D0(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LastUpdateVelocity;                                // 0x2E8(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerLastTransformUpdateTimeStamp;                // 0x300(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerLastClientGoodMoveAckTime;                   // 0x304(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerLastClientAdjustmentTime;                    // 0x308(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_11AC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PendingImpulseToApply;                             // 0x310(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               PendingForceToApply;                               // 0x328(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AnalogInputModifier;                               // 0x340(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_11AE[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxSimulationTimeStep;                             // 0x350(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxSimulationIterations;                           // 0x354(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxJumpApexAttemptsPerSimulation;                  // 0x358(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDepenetrationWithGeometry;                      // 0x35C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDepenetrationWithGeometryAsProxy;               // 0x360(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDepenetrationWithPawn;                          // 0x364(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDepenetrationWithPawnAsProxy;                   // 0x368(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkSimulatedSmoothLocationTime;                // 0x36C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkSimulatedSmoothRotationTime;                // 0x370(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ListenServerNetworkSimulatedSmoothLocationTime;    // 0x374(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ListenServerNetworkSimulatedSmoothRotationTime;    // 0x378(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetProxyShrinkRadius;                              // 0x37C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetProxyShrinkHalfHeight;                          // 0x380(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkMaxSmoothUpdateDistance;                    // 0x384(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkNoSmoothUpdateDistance;                     // 0x388(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkMinTimeBetweenClientAckGoodMoves;           // 0x38C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkMinTimeBetweenClientAdjustments;            // 0x390(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x394(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkLargeClientCorrectionDistance;              // 0x398(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LedgeCheckThreshold;                               // 0x39C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpOutOfWaterPitch;                               // 0x3A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11B2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FFindFloorResult                      CurrentFloor;                                      // 0x3A8(0xF8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class EMovementMode                     DefaultLandMovementMode;                           // 0x4A0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMovementMode                     DefaultWaterMovementMode;                          // 0x4A1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMovementMode                     GroundMovementMode;                                // 0x4A2(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_11B3[0x9];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bMaintainHorizontalGroundVelocity : 1;             // Mask: 0x1, PropSize: 0x10x4AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImpartBaseVelocityX : 1;                          // Mask: 0x2, PropSize: 0x10x4AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImpartBaseVelocityY : 1;                          // Mask: 0x4, PropSize: 0x10x4AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImpartBaseVelocityZ : 1;                          // Mask: 0x8, PropSize: 0x10x4AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImpartBaseAngularVelocity : 1;                    // Mask: 0x10, PropSize: 0x10x4AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bJustTeleported : 1;                               // Mask: 0x20, PropSize: 0x10x4AC(0x1)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetworkUpdateReceived : 1;                        // Mask: 0x40, PropSize: 0x10x4AC(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetworkMovementModeChanged : 1;                   // Mask: 0x80, PropSize: 0x10x4AC(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreClientMovementErrorChecksAndCorrection : 1; // Mask: 0x1, PropSize: 0x10x4AD(0x1)(Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bServerAcceptClientAuthoritativePosition : 1;      // Mask: 0x2, PropSize: 0x10x4AD(0x1)(Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNotifyApex : 1;                                   // Mask: 0x4, PropSize: 0x10x4AD(0x1)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCheatFlying : 1;                                  // Mask: 0x8, PropSize: 0x10x4AD(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWantsToCrouch : 1;                                // Mask: 0x10, PropSize: 0x10x4AD(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCrouchMaintainsBaseLocation : 1;                  // Mask: 0x20, PropSize: 0x10x4AD(0x1)(Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreBaseRotation : 1;                           // Mask: 0x40, PropSize: 0x10x4AD(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFastAttachedMove : 1;                             // Mask: 0x80, PropSize: 0x10x4AD(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysCheckFloor : 1;                             // Mask: 0x1, PropSize: 0x10x4AE(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFlatBaseForFloorChecks : 1;                    // Mask: 0x2, PropSize: 0x10x4AE(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPerformingJumpOff : 1;                            // Mask: 0x4, PropSize: 0x10x4AE(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWantsToLeaveNavWalking : 1;                       // Mask: 0x8, PropSize: 0x10x4AE(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseRVOAvoidance : 1;                              // Mask: 0x10, PropSize: 0x10x4AE(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRequestedMoveUseAcceleration : 1;                 // Mask: 0x20, PropSize: 0x10x4AE(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B8 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWasSimulatingRootMotion : 1;                      // Mask: 0x80, PropSize: 0x10x4AE(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowPhysicsRotationDuringAnimRootMotion : 1;     // Mask: 0x1, PropSize: 0x10x4AF(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B9 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        FormerBaseVelocityDecayHalfLife;                   // 0x4B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasRequestedVelocity : 1;                         // Mask: 0x1, PropSize: 0x10x4B4(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bRequestedMoveWithMaxSpeed : 1;                    // Mask: 0x2, PropSize: 0x10x4B4(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bWasAvoidanceUpdated : 1;                          // Mask: 0x4, PropSize: 0x10x4B4(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_BA : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bProjectNavMeshWalking : 1;                        // Mask: 0x20, PropSize: 0x10x4B4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bProjectNavMeshOnBothWorldChannels : 1;            // Mask: 0x40, PropSize: 0x10x4B4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_BB : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_11BF[0x1F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AvoidanceConsiderationRadius;                      // 0x4D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               RequestedVelocity;                                 // 0x4D8(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LastUpdateRequestedVelocity;                       // 0x4F0(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        AvoidanceUID;                                      // 0x508(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                     AvoidanceGroup;                                    // 0x50C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                     GroupsToAvoid;                                     // 0x510(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                     GroupsToIgnore;                                    // 0x514(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                        AvoidanceWeight;                                   // 0x518(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11C4[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PendingLaunchVelocity;                             // 0x520(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11C5[0x138];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NavMeshProjectionInterval;                         // 0x670(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavMeshProjectionTimer;                            // 0x674(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavMeshProjectionInterpSpeed;                      // 0x678(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavMeshProjectionHeightScaleUp;                    // 0x67C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavMeshProjectionHeightScaleDown;                  // 0x680(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavWalkingFloorDistTolerance;                      // 0x684(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11C7[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                           // 0x6B8(0x30)(NativeAccessSpecifierPublic)
	uint8                                        Pad_11C8[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinTimeBetweenTimeStampResets;                     // 0x700(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11C9[0x554];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRootMotionSourceGroup                CurrentRootMotion;                                 // 0xC58(0x48)(Transient, NativeAccessSpecifierPublic)
	struct FRootMotionSourceGroup                ServerCorrectionRootMotion;                        // 0xCA0(0x48)(Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_11CA[0x168];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRootMotionMovementParams             RootMotionParams;                                  // 0xE50(0x70)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               AnimRootMotionVelocity;                            // 0xEC0(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11CD[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CharacterMovementComponent");
		return Clss;
	}

	void SetWalkableFloorZ(float InInWalkableFloorZ);
	void SetWalkableFloorAngle(float InInWalkableFloorAngle);
	void SetMovementMode(enum class EMovementMode InNewMovementMode, uint8 InNewCustomMode);
	void SetGroupsToIgnoreMask(struct FNavAvoidanceMask& InGroupMask);
	void SetGroupsToIgnore(int32 InGroupFlags);
	void SetGroupsToAvoidMask(struct FNavAvoidanceMask& InGroupMask);
	void SetGroupsToAvoid(int32 InGroupFlags);
	void SetCrouchedHalfHeight(float InNewValue);
	void SetAvoidanceGroupMask(struct FNavAvoidanceMask& InGroupMask);
	void SetAvoidanceGroup(int32 InGroupFlags);
	void SetAvoidanceEnabled(bool InbEnable);
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	void K2_FindFloor(const struct FVector& InCapsuleLocation, struct FFindFloorResult* InFloorResult);
	void K2_ComputeFloorDist(const struct FVector& InCapsuleLocation, float InLineDistance, float InSweepDistance, float InSweepRadius, struct FFindFloorResult* InFloorResult);
	bool IsWalking();
	bool IsWalkable(struct FHitResult& InHit);
	float GetValidPerchRadius();
	float GetPerchRadiusThreshold();
	class UPrimitiveComponent* GetMovementBase();
	float GetMinAnalogSpeed();
	float GetMaxJumpHeightWithJumpTime();
	float GetMaxJumpHeight();
	float GetMaxBrakingDeceleration();
	float GetMaxAcceleration();
	struct FVector GetLastUpdateVelocity();
	struct FRotator GetLastUpdateRotation();
	struct FVector GetLastUpdateRequestedVelocity();
	struct FVector GetLastUpdateLocation();
	struct FVector GetImpartedMovementBaseVelocity();
	struct FVector GetCurrentAcceleration();
	float GetCrouchedHalfHeight();
	class ACharacter* GetCharacterOwner();
	float GetAnalogInputModifier();
	void DisableMovement();
	void ClearAccumulatedForces();
	void CapsuleTouched(class UPrimitiveComponent* InOverlappedComp, class AActor* InOther, class UPrimitiveComponent* InOtherComp, int32 InOtherBodyIndex, bool InbFromSweep, struct FHitResult& InSweepResult);
	void CalcVelocity(float InDeltaTime, float InFriction, bool InbFluid, float InBrakingDeceleration);
	void AddImpulse(const struct FVector& InImpulse, bool InbVelocityChange);
	void AddForce(const struct FVector& InForce);
};

// 0x38 (0x60 - 0x28)
// Class Engine.EdGraph
class UEdGraph : public UObject
{
public:
	TSubclassOf<class UEdGraphSchema>            Schema;                                            // 0x28(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEdGraphNode*>                  Nodes;                                             // 0x30(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        bEditable : 1;                                     // Mask: 0x1, PropSize: 0x10x40(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowDeletion : 1;                                // Mask: 0x2, PropSize: 0x10x40(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowRenaming : 1;                                // Mask: 0x4, PropSize: 0x10x40(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11D7[0x1F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EdGraph");
		return Clss;
	}

};

// 0x140 (0x168 - 0x28)
// Class Engine.SoundBase
class USoundBase : public UObject
{
public:
	uint8                                        Pad_11D8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundClass*                           SoundClassObject;                                  // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDebug : 1;                                        // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideConcurrency : 1;                          // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableBusSends : 1;                               // Mask: 0x4, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableBaseSubmix : 1;                             // Mask: 0x8, PropSize: 0x10x38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableSubmixSends : 1;                            // Mask: 0x10, PropSize: 0x10x38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasDelayNode : 1;                                 // Mask: 0x20, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasConcatenatorNode : 1;                          // Mask: 0x40, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBypassVolumeScaleForPriority : 1;                 // Mask: 0x80, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVirtualizationMode               VirtualizationMode;                                // 0x39(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11DF[0x56];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<class USoundConcurrency*>               ConcurrencySet;                                    // 0x90(0x50)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FSoundConcurrencySettings             ConcurrencyOverrides;                              // 0xE0(0x20)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                        Duration;                                          // 0x100(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDistance;                                       // 0x104(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TotalSamples;                                      // 0x108(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Priority;                                          // 0x10C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                     AttenuationSettings;                               // 0x110(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmixBase*                      SoundSubmixObject;                                 // 0x118(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSubmixSendInfo>          SoundSubmixSends;                                  // 0x120(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*         SourceEffectChain;                                 // 0x130(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSourceBusSendInfo>       BusSends;                                          // 0x138(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundSourceBusSendInfo>       PreEffectBusSends;                                 // 0x148(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x158(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundBase");
		return Clss;
	}

};

// 0x2E8 (0x450 - 0x168)
// Class Engine.SoundWave
class USoundWave : public USoundBase
{
public:
	uint8                                        Pad_11F1[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CompressionQuality;                                // 0x178(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        StreamingPriority;                                 // 0x17C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESoundwaveSampleRateSettings      SampleRateQuality;                                 // 0x180(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11F3[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ESoundGroup                       SoundGroup;                                        // 0x182(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLooping : 1;                                      // Mask: 0x1, PropSize: 0x10x183(0x1)(Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStreaming : 1;                                    // Mask: 0x2, PropSize: 0x10x183(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_BC : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ESoundAssetCompressionType        SoundAssetCompressionType;                         // 0x184(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bSeekableStreaming : 1;                            // Mask: 0x1, PropSize: 0x10x185(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bUseBinkAudio : 1;                                 // Mask: 0x2, PropSize: 0x10x185(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_BD : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_11F6[0x1A];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoundModulationDefaultRoutingSettings ModulationSettings;                                // 0x1A0(0x188)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<float>                                FrequenciesToAnalyze;                              // 0x328(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundWaveSpectralTimeData>    CookedSpectralTimeData;                            // 0x338(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundWaveEnvelopeTimeData>    CookedEnvelopeTimeData;                            // 0x348(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        InitialChunkSize;                                  // 0x358(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11F9[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_BE : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bMature : 1;                                       // Mask: 0x20, PropSize: 0x10x39C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bManualWordWrap : 1;                               // Mask: 0x40, PropSize: 0x10x39C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSingleLine : 1;                                   // Mask: 0x80, PropSize: 0x10x39C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsAmbisonics : 1;                                 // Mask: 0x1, PropSize: 0x10x39D(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_BF : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ESoundWaveLoadingBehavior         LoadingBehavior;                                   // 0x39E(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_11FC[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SpokenText;                                        // 0x3A0(0x10)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SubtitlePriority;                                  // 0x3B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Volume;                                            // 0x3B4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Pitch;                                             // 0x3B8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumChannels;                                       // 0x3BC(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundWaveCuePoint>            CuePoints;                                         // 0x3C0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                        SampleRate;                                        // 0x3D0(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_11FF[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSubtitleCue>                  Subtitles;                                         // 0x3E0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCurveTable*                           Curves;                                            // 0x3F0(0x8)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                           InternalCurves;                                    // 0x3F8(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1200[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundWave");
		return Clss;
	}

	void SetSoundAssetCompressionType(enum class ESoundAssetCompressionType InInSoundAssetCompressionType, bool InbMarkDirty);
	enum class ESoundAssetCompressionType GetSoundAssetCompressionType();
};

// 0x50 (0x4A0 - 0x450)
// Class Engine.SoundWaveProcedural
class USoundWaveProcedural : public USoundWave
{
public:
	uint8                                        Pad_1204[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundWaveProcedural");
		return Clss;
	}

};

// 0x40 (0x68 - 0x28)
// Class Engine.SoundEffectPreset
class USoundEffectPreset : public UObject
{
public:
	uint8                                        Pad_1206[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundEffectPreset");
		return Clss;
	}

};

// 0x0 (0x68 - 0x68)
// Class Engine.SoundEffectSubmixPreset
class USoundEffectSubmixPreset : public USoundEffectPreset
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundEffectSubmixPreset");
		return Clss;
	}

};

// 0x0 (0x68 - 0x68)
// Class Engine.SoundEffectSourcePreset
class USoundEffectSourcePreset : public USoundEffectPreset
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundEffectSourcePreset");
		return Clss;
	}

};

// 0x98 (0x328 - 0x290)
// Class Engine.Controller
class AController : public AActor
{
public:
	uint8                                        Pad_1232[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerState*                          PlayerState;                                       // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1233[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnInstigatedAnyDamage;                             // 0x2A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPossessedPawnChanged;                            // 0x2B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                  StateName;                                         // 0x2C8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                 Pawn;                                              // 0x2D0(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1234[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ACharacter*                            Character;                                         // 0x2E0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       TransformComponent;                                // 0x2E8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1235[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              ControlRotation;                                   // 0x308(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        bAttachToPawn : 1;                                 // Mask: 0x1, PropSize: 0x10x320(0x1)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1236[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Controller");
		return Clss;
	}

	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(struct FVector& InNewLocation, struct FRotator& InNewRotation);
	void SetIgnoreMoveInput(bool InbNewMoveInput);
	void SetIgnoreLookInput(bool InbNewLookInput);
	void SetControlRotation(struct FRotator& InNewRotation);
	void ResetIgnoreMoveInput();
	void ResetIgnoreLookInput();
	void ResetIgnoreInputFlags();
	void ReceiveUnPossess(class APawn* InUnpossessedPawn);
	void ReceivePossess(class APawn* InPossessedPawn);
	void ReceiveInstigatedAnyDamage(float InDamage, class UDamageType* InDamageType, class AActor* InDamagedActor, class AActor* InDamageCauser);
	void Possess(class APawn* InInPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	bool LineOfSightTo(class AActor* InOther, const struct FVector& InViewPoint, bool InbAlternateChecks);
	class APawn* K2_GetPawn();
	bool IsPlayerController();
	bool IsMoveInputIgnored();
	bool IsLookInputIgnored();
	bool IsLocalPlayerController();
	bool IsLocalController();
	class AActor* GetViewTarget();
	void GetPlayerViewPoint(struct FVector* InLocation, struct FRotator* InRotation);
	struct FRotator GetDesiredRotation();
	struct FRotator GetControlRotation();
	void ClientSetRotation(const struct FRotator& InNewRotation, bool InbResetCamera);
	void ClientSetLocation(const struct FVector& InNewLocation, const struct FRotator& InNewRotation);
};

// 0x528 (0x850 - 0x328)
// Class Engine.PlayerController
class APlayerController : public AController
{
public:
	uint8                                        Pad_1478[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPlayer*                               Player;                                            // 0x330(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                 AcknowledgedPawn;                                  // 0x338(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHUD*                                  MyHUD;                                             // 0x340(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCameraManager*                  PlayerCameraManager;                               // 0x348(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerCameraManager>      PlayerCameraManagerClass;                          // 0x350(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAutoManageActiveCameraTarget;                     // 0x358(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_147A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              TargetViewRotation;                                // 0x360(0x18)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_147C[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SmoothTargetViewRotationSpeed;                     // 0x390(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_147D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        HiddenActors;                                      // 0x398(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> HiddenPrimitiveComponents;                         // 0x3A8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_147E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LastSpectatorStateSynchTime;                       // 0x3BC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LastSpectatorSyncLocation;                         // 0x3C0(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              LastSpectatorSyncRotation;                         // 0x3D8(0x18)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                        ClientCap;                                         // 0x3F0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_147F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCheatManager*                         CheatManager;                                      // 0x3F8(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCheatManager>             CheatClass;                                        // 0x400(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerInput*                          PlayerInput;                                       // 0x408(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveForceFeedbackEffect>    ActiveForceFeedbackEffects;                        // 0x410(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSubclassOf<class UAsyncPhysicsData>         AsyncPhysicsDataClass;                             // 0x420(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAsyncPhysicsInputComponent*           AsyncPhysicsDataComponent;                         // 0x428(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1481[0x80];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_C1 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPlayerIsWaiting : 1;                              // Mask: 0x10, PropSize: 0x10x4B0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C2 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1483[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        NetPlayerIndex;                                    // 0x4B4(0x1)(ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1485[0x5B];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UNetConnection*                        PendingSwapConnection;                             // 0x510(0x8)(ZeroConstructor, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetConnection*                        NetConnection;                                     // 0x518(0x8)(ZeroConstructor, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1486[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InputYawScale;                                     // 0x538(0x4)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InputPitchScale;                                   // 0x53C(0x4)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InputRollScale;                                    // 0x540(0x4)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowMouseCursor : 1;                              // Mask: 0x1, PropSize: 0x10x544(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableClickEvents : 1;                            // Mask: 0x2, PropSize: 0x10x544(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableTouchEvents : 1;                            // Mask: 0x4, PropSize: 0x10x544(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMouseOverEvents : 1;                        // Mask: 0x8, PropSize: 0x10x544(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableTouchOverEvents : 1;                        // Mask: 0x10, PropSize: 0x10x544(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceFeedbackEnabled : 1;                         // Mask: 0x20, PropSize: 0x10x544(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMotionControls : 1;                         // Mask: 0x40, PropSize: 0x10x544(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableStreamingSource : 1;                        // Mask: 0x80, PropSize: 0x10x544(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStreamingSourceShouldActivate : 1;                // Mask: 0x1, PropSize: 0x10x545(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStreamingSourceShouldBlockOnSlowStreaming : 1;    // Mask: 0x2, PropSize: 0x10x545(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C3 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_148C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EStreamingSourcePriority          StreamingSourcePriority;                           // 0x548(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_148E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                StreamingSourceDebugColor;                         // 0x54C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStreamingSourceShape>         StreamingSourceShapes;                             // 0x550(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        ForceFeedbackScale;                                // 0x560(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1490[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FKey>                          ClickEventKeys;                                    // 0x568(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EMouseCursor                      DefaultMouseCursor;                                // 0x578(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMouseCursor                      CurrentMouseCursor;                                // 0x579(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 DefaultClickTraceChannel;                          // 0x57A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 CurrentClickTraceChannel;                          // 0x57B(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitResultTraceDistance;                            // 0x57C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                       SeamlessTravelCount;                               // 0x580(0x2)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                       LastCompletedSeamlessTravelCount;                  // 0x582(0x2)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1491[0x84];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UInputComponent*                       InactiveStateInputComponent;                       // 0x608(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_C4 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bShouldPerformFullTickWhenPaused : 1;              // Mask: 0x4, PropSize: 0x10x610(0x1)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_C5 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1492[0x17];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTouchInterface*                       CurrentTouchInterface;                             // 0x628(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UPlayerInput>              OverridePlayerInputClass;                          // 0x630(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1494[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ASpectatorPawn*                        SpectatorPawn;                                     // 0x6B0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1496[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsLocalPlayerController;                          // 0x6BC(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1497[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SpawnLocation;                                     // 0x6C0(0x18)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1498[0x178];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerController");
		return Clss;
	}

	bool WasInputKeyJustReleased(const struct FKey& InKey);
	bool WasInputKeyJustPressed(const struct FKey& InKey);
	void ToggleSpeaking(bool InbInSpeaking);
	void TestServerLevelVisibilityChange(class FName InPackageName, class FName InFilename);
	void SwitchLevel(const class FString& InURL);
	bool StreamingSourceShouldBlockOnSlowStreaming();
	bool StreamingSourceShouldActivate();
	void StopHapticEffect(enum class EControllerHand InHand);
	void StartFire(uint8 InFireModeNum);
	void SetVirtualJoystickVisibility(bool InbVisible);
	void SetViewTargetWithBlend(class AActor* InNewViewTarget, float InBlendTime, enum class EViewTargetBlendFunction InBlendFunc, float InBlendExp, bool InbLockOutgoing);
	void SetName(const class FString& InS);
	void SetMouseLocation(int32 InX, int32 InY);
	void SetMouseCursorWidget(enum class EMouseCursor InCursor, class UUserWidget* InCursorWidget);
	void SetMotionControlsEnabled(bool InbEnabled);
	void SetHapticsByValue(float InFrequency, float InAmplitude, enum class EControllerHand InHand);
	void SetDisableHaptics(bool InbNewDisabled);
	void SetDeprecatedInputYawScale(float InNewValue);
	void SetDeprecatedInputRollScale(float InNewValue);
	void SetDeprecatedInputPitchScale(float InNewValue);
	void SetControllerLightColor(const struct FColor& InColor);
	void SetCinematicMode(bool InbInCinematicMode, bool InbHidePlayer, bool InbAffectsHUD, bool InbAffectsMovement, bool InbAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent* InAttachToComponent, const struct FVector& InLocation, const struct FRotator& InRotation);
	void SetAudioListenerAttenuationOverride(class USceneComponent* InAttachToComponent, const struct FVector& InAttenuationLocationOVerride);
	void ServerViewSelf(const struct FViewTargetTransitionParams& InTransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo>& InLevelVisibilities);
	void ServerUpdateLevelVisibility(struct FUpdateLevelVisibilityLevelInfo& InLevelVisibility);
	void ServerUpdateCamera(const struct FVector_NetQuantize& InCamLoc, int32 InCamPitchAndYaw);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& InPlayerId);
	void ServerUnblockPlayer(const struct FUniqueNetIdRepl& InPlayerId);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool InbWaiting);
	void ServerSetSpectatorLocation(const struct FVector& InNewLoc, const struct FRotator& InNewRot);
	void ServerSendLatestAsyncPhysicsTimestamp(const struct FAsyncPhysicsTimestamp& InTimestamp);
	void ServerRestartPlayer();
	void ServerRecvClientInputFrame(int32 InRecvClientInputFrame, TArray<uint8>& InData);
	void ServerPause();
	void ServerNotifyLoadedWorld(class FName InWorldPackageName);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& InPlayerId);
	void ServerExecRPC(const class FString& InMsg);
	void ServerExec(const class FString& InMsg);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const class FString& InS);
	void ServerCamera(class FName InNewMode);
	void ServerBlockPlayer(const struct FUniqueNetIdRepl& InPlayerId);
	void ServerAcknowledgePossession(class APawn* InP);
	void SendToConsole(const class FString& InCommand);
	void RestartLevel();
	void ResetControllerLightColor();
	bool ProjectWorldLocationToScreen(const struct FVector& InWorldLocation, struct FVector2D* InScreenLocation, bool InbPlayerViewportRelative);
	void PlayHapticEffect(class UHapticFeedbackEffect_Base* InHapticEffect, enum class EControllerHand InHand, float InScale, bool InbLoop);
	void PlayDynamicForceFeedback(float InIntensity, float InDuration, bool InbAffectsLeftLarge, bool InbAffectsLeftSmall, bool InbAffectsRightLarge, bool InbAffectsRightSmall, enum class EDynamicForceFeedbackAction InAction, const struct FLatentActionInfo& InLatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool InbIsLogging);
	void OnRep_AsyncPhysicsDataComponent();
	void LocalTravel(const class FString& InURL);
	void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* InForceFeedbackEffect, class FName InTag, bool InbLooping, bool InbIgnoreTimeDilation, bool InbPlayWhilePaused);
	bool IsStreamingSourceEnabled();
	bool IsInputKeyDown(const struct FKey& InKey);
	void GetViewportSize(int32* InSizeX, int32* InSizeY);
	void GetStreamingSourceShapes(TArray<struct FStreamingSourceShape>* InOutShapes);
	enum class EStreamingSourcePriority GetStreamingSourcePriority();
	void GetStreamingSourceLocationAndRotation(struct FVector* InOutLocation, struct FRotator* InOutRotation);
	class ASpectatorPawn* GetSpectatorPawn();
	struct FPlatformUserId GetPlatformUserId();
	TSubclassOf<class UPlayerInput> GetOverridePlayerInputClass();
	bool GetMousePosition(float* InLocationX, float* InLocationY);
	struct FVector GetInputVectorKeyState(const struct FKey& InKey);
	void GetInputTouchState(enum class ETouchIndex InFingerIndex, float* InLocationX, float* InLocationY, bool* InbIsCurrentlyPressed);
	void GetInputMouseDelta(float* InDeltaX, float* InDeltaY);
	void GetInputMotionState(struct FVector* InTilt, struct FVector* InRotationRate, struct FVector* InGravity, struct FVector* InAcceleration);
	float GetInputKeyTimeDown(const struct FKey& InKey);
	void GetInputAnalogStickState(enum class EControllerAnalogStick InWhichStick, float* InStickX, float* InStickY);
	float GetInputAnalogKeyState(const struct FKey& InKey);
	class AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(enum class ETouchIndex InFingerIndex, TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, struct FHitResult* InHitResult);
	bool GetHitResultUnderFingerByChannel(enum class ETouchIndex InFingerIndex, enum class ETraceTypeQuery InTraceChannel, bool InbTraceComplex, struct FHitResult* InHitResult);
	bool GetHitResultUnderFinger(enum class ETouchIndex InFingerIndex, enum class ECollisionChannel InTraceChannel, bool InbTraceComplex, struct FHitResult* InHitResult);
	bool GetHitResultUnderCursorForObjects(TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, struct FHitResult* InHitResult);
	bool GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery InTraceChannel, bool InbTraceComplex, struct FHitResult* InHitResult);
	bool GetHitResultUnderCursor(enum class ECollisionChannel InTraceChannel, bool InbTraceComplex, struct FHitResult* InHitResult);
	struct FVector GetFocalLocation();
	float GetDeprecatedInputYawScale();
	float GetDeprecatedInputRollScale();
	float GetDeprecatedInputPitchScale();
	class UAsyncPhysicsData* GetAsyncPhysicsDataToWrite();
	class UAsyncPhysicsData* GetAsyncPhysicsDataToConsume();
	void FOV(float InNewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float InScreenX, float InScreenY, struct FVector* InWorldLocation, struct FVector* InWorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* InWorldLocation, struct FVector* InWorldDirection);
	void ConsoleKey(const struct FKey& InKey);
	void ClientWasKicked(class FText& InKickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus>& InLevelStatuses);
	void ClientUpdateLevelStreamingStatus(class FName InPackageName, bool InbNewShouldBeLoaded, bool InbNewShouldBeVisible, bool InbNewShouldBlockOnLoad, int32 InLODIndex, const struct FNetLevelVisibilityTransactionId& InTransactionId);
	void ClientUnmutePlayers(TArray<struct FUniqueNetIdRepl>& InPlayerIds);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& InPlayerId);
	void ClientTravelInternal(const class FString& InURL, enum class ETravelType InTravelType, bool InbSeamless, const struct FGuid& InMapPackageGuid);
	void ClientTravel(const class FString& InURL, enum class ETravelType InTravelType, bool InbSeamless, const struct FGuid& InMapPackageGuid);
	void ClientTeamMessage(class APlayerState* InSenderPlayerState, const class FString& InS, class FName InType, float InMsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect* InForceFeedbackEffect, class FName InTag);
	void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* InSourceComponent, bool InbImmediately);
	void ClientStopCameraShake(TSubclassOf<class UCameraShakeBase> InShake, bool InbImmediately);
	void ClientStartOnlineSession();
	void ClientStartCameraShakeFromSource(TSubclassOf<class UCameraShakeBase> InShake, class UCameraShakeSourceComponent* InSourceComponent);
	void ClientStartCameraShake(TSubclassOf<class UCameraShakeBase> InShake, float InScale, enum class ECameraShakePlaySpace InPlaySpace, const struct FRotator& InUserPlaySpaceRot);
	void ClientSpawnGenericCameraLensEffect(TSubclassOf<class AActor> InLensEffectEmitterClass);
	void ClientSpawnCameraLensEffect(TSubclassOf<class AEmitterCameraLensEffectBase> InLensEffectEmitterClass);
	void ClientSetViewTarget(class AActor* InA, const struct FViewTargetTransitionParams& InTransitionParams);
	void ClientSetSpectatorWaiting(bool InbWaiting);
	void ClientSetHUD(TSubclassOf<class AHUD> InNewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* InMaterial, float InForceDuration, int32 InCinematicTextureGroups);
	void ClientSetCinematicMode(bool InbInCinematicMode, bool InbAffectsMovement, bool InbAffectsTurning, bool InbAffectsHUD);
	void ClientSetCameraMode(class FName InNewCamMode);
	void ClientSetCameraFade(bool InbEnableFading, const struct FColor& InFadeColor, const struct FVector2D& InFadeAlpha, float InFadeTime, bool InbFadeAudio, bool InbHoldWhenFinished);
	void ClientSetBlockOnAsyncLoading();
	void ClientReturnToMainMenuWithTextReason(class FText& InReturnReason);
	void ClientReturnToMainMenu(const class FString& InReturnReason);
	void ClientRetryClientRestart(class APawn* InNewPawn);
	void ClientRestart(class APawn* InNewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* InObject);
	void ClientRecvServerAckFrameDebug(uint8 InNumBuffered, float InTargetNumBufferedCmds);
	void ClientRecvServerAckFrame(int32 InLastProcessedInputFrame, int32 InRecvServerFrameNumber, int8 InTimeDilation);
	void ClientReceiveLocalizedMessage(TSubclassOf<class ULocalMessage> InMessage, int32 InSWITCH, class APlayerState* InRelatedPlayerState_1, class APlayerState* InRelatedPlayerState_2, class UObject* InOptionalObject);
	void ClientPrestreamTextures(class AActor* InForcedActor, float InForceDuration, bool InbEnableStreaming, int32 InCinematicTextureGroups);
	void ClientPrepareMapChange(class FName InLevelName, bool InbFirst, bool InbLast);
	void ClientPlaySoundAtLocation(class USoundBase* InSound, const struct FVector& InLocation, float InVolumeMultiplier, float InPitchMultiplier);
	void ClientPlaySound(class USoundBase* InSound, float InVolumeMultiplier, float InPitchMultiplier);
	void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* InForceFeedbackEffect, const struct FForceFeedbackParameters& InParams);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& InPlayerId);
	void ClientMessage(const class FString& InS, class FName InType, float InMsgLifeTime);
	void ClientIgnoreMoveInput(bool InbIgnore);
	void ClientIgnoreLookInput(bool InbIgnore);
	void ClientGotoState(class FName InNewState);
	void ClientGameEnded(class AActor* InEndGameFocus, bool InbIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool InbEnable);
	void ClientCorrectionAsyncPhysicsTimestamp(const struct FAsyncPhysicsTimestamp& InTimestamp);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int32 InCap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(const struct FVector& InInLoc, float InDuration, bool InbOverrideLocation);
	void ClientAckUpdateLevelVisibility(class FName InPackageName, const struct FNetLevelVisibilityTransactionId& InTransactionId, bool InbClientAckCanMakeVisible);
	void ClientAckTimeDilation(float InTimeDilation, int32 InServerStep);
	void ClearAudioListenerOverride();
	void ClearAudioListenerAttenuationOverride();
	bool CanRestartPlayer();
	void Camera(class FName InNewMode);
	void AddYawInput(float InVal);
	void AddRollInput(float InVal);
	void AddPitchInput(float InVal);
	void ActivateTouchInterface(class UTouchInterface* InNewTouchInterface);
};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.TriggerVolume
class ATriggerVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TriggerVolume");
		return Clss;
	}

};

// 0x90 (0x600 - 0x570)
// Class Engine.StaticMeshComponent
class UStaticMeshComponent : public UMeshComponent
{
public:
	uint8                                        bUseMaxLOD_ForShadow : 1;                          // Mask: 0x1, PropSize: 0x10x570(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C6 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14BB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinLODForShadowCasting;                            // 0x574(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ForcedLodModel;                                    // 0x578(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PreviousLODLevel;                                  // 0x57C(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinLOD;                                            // 0x580(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubDivisionStepSize;                               // 0x584(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           StaticMesh;                                        // 0x588(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FColor                                WireframeColorOverride;                            // 0x590(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisallowNanite : 1;                               // Mask: 0x1, PropSize: 0x10x594(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEvaluateWorldPositionOffset : 1;                  // Mask: 0x2, PropSize: 0x10x594(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEvaluateWorldPositionOffsetInRayTracing : 1;      // Mask: 0x4, PropSize: 0x10x594(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C7 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14C0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        WorldPositionOffsetDisableDistance;                // 0x598(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C8 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bOverrideWireframeColor : 1;                       // Mask: 0x2, PropSize: 0x10x59C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideMinLod : 1;                               // Mask: 0x4, PropSize: 0x10x59C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideNavigationExport : 1;                     // Mask: 0x8, PropSize: 0x10x59C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceNavigationObstacle : 1;                      // Mask: 0x10, PropSize: 0x10x59C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisallowMeshPaintPerInstance : 1;                 // Mask: 0x20, PropSize: 0x10x59C(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreInstanceForTextureStreaming : 1;            // Mask: 0x40, PropSize: 0x10x59C(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideLightMapRes : 1;                          // Mask: 0x80, PropSize: 0x10x59C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastDistanceFieldIndirectShadow : 1;              // Mask: 0x1, PropSize: 0x10x59D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideDistanceFieldSelfShadowBias : 1;          // Mask: 0x2, PropSize: 0x10x59D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseSubDivisions : 1;                              // Mask: 0x4, PropSize: 0x10x59D(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseDefaultCollision : 1;                          // Mask: 0x8, PropSize: 0x10x59D(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSortTriangles : 1;                                // Mask: 0x10, PropSize: 0x10x59D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReverseCulling : 1;                               // Mask: 0x20, PropSize: 0x10x59D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C9 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14C3[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        OverriddenLightMapRes;                             // 0x5A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFieldIndirectShadowMinVisibility;          // 0x5A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFieldSelfShadowBias;                       // 0x5A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StreamingDistanceMultiplier;                       // 0x5AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStaticMeshComponentLODInfo>   LODData;                                           // 0x5B0(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FStreamingTextureBuildInfo>    StreamingTextureData;                              // 0x5C0(0x10)(ZeroConstructor, NonTransactional, NativeAccessSpecifierPublic)
	struct FLightmassPrimitiveSettings           LightmassSettings;                                 // 0x5D0(0x18)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_14C5[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StaticMeshComponent");
		return Clss;
	}

	bool SetStaticMesh(class UStaticMesh* InNewMesh);
	void SetReverseCulling(bool InReverseCulling);
	void SetForcedLodModel(int32 InNewForcedLodModel);
	void SetEvaluateWorldPositionOffsetInRayTracing(bool InNewValue);
	void SetEvaluateWorldPositionOffset(bool InNewValue);
	void SetDistanceFieldSelfShadowBias(float InNewValue);
	void OnRep_StaticMesh(class UStaticMesh* InOldStaticMesh);
	void GetLocalBounds(struct FVector* InMin, struct FVector* InMax);
	bool GetInitialEvaluateWorldPositionOffset();
};

// 0x8 (0x560 - 0x558)
// Class Engine.CapsuleComponent
class UCapsuleComponent : public UShapeComponent
{
public:
	float                                        CapsuleHalfHeight;                                 // 0x558(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CapsuleRadius;                                     // 0x55C(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CapsuleComponent");
		return Clss;
	}

	void SetCapsuleSize(float InInRadius, float InInHalfHeight, bool InbUpdateOverlaps);
	void SetCapsuleRadius(float InRadius, bool InbUpdateOverlaps);
	void SetCapsuleHalfHeight(float InHalfHeight, bool InbUpdateOverlaps);
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* InOutRadius, float* InOutHalfHeightWithoutHemisphere);
	void GetUnscaledCapsuleSize(float* InOutRadius, float* InOutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize_WithoutHemisphere(float* InOutRadius, float* InOutHalfHeightWithoutHemisphere);
	void GetScaledCapsuleSize(float* InOutRadius, float* InOutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();
	float GetScaledCapsuleHalfHeight();
};

// 0x28 (0x560 - 0x538)
// Class Engine.BillboardComponent
class UBillboardComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                            Sprite;                                            // 0x538(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsScreenSizeScaled : 1;                           // Mask: 0x1, PropSize: 0x10x540(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_CB : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14ED[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ScreenSize;                                        // 0x544(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        U;                                                 // 0x548(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UL;                                                // 0x54C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        V;                                                 // 0x550(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VL;                                                // 0x554(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OpacityMaskRefVal;                                 // 0x558(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14EF[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BillboardComponent");
		return Clss;
	}

	void SetUV(int32 InNewU, int32 InNewUL, int32 InNewV, int32 InNewVL);
	void SetSpriteAndUV(class UTexture2D* InNewSprite, int32 InNewU, int32 InNewUL, int32 InNewV, int32 InNewVL);
	void SetSprite(class UTexture2D* InNewSprite);
	void SetOpacityMaskRefVal(float InRefVal);
};

// 0x58 (0x10A8 - 0x1050)
// Class Engine.GameEngine
class UGameEngine : public UEngine
{
public:
	float                                        MaxDeltaTime;                                      // 0x1050(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ServerFlushLogInterval;                            // 0x1054(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameInstance*                         GameInstance;                                      // 0x1058(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14F4[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameEngine");
		return Clss;
	}

};

// 0x790 (0xA30 - 0x2A0)
// Class Engine.CameraComponent
class UCameraComponent : public USceneComponent
{
public:
	float                                        FieldOfView;                                       // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OrthoWidth;                                        // 0x2A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OrthoNearClipPlane;                                // 0x2A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OrthoFarClipPlane;                                 // 0x2AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AspectRatio;                                       // 0x2B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bConstrainAspectRatio : 1;                         // Mask: 0x1, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFieldOfViewForLOD : 1;                         // Mask: 0x2, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockToHmd : 1;                                    // Mask: 0x4, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePawnControlRotation : 1;                       // Mask: 0x8, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_CC : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ECameraProjectionMode             ProjectionMode;                                    // 0x2B5(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1512[0x6A];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PostProcessBlendWeight;                            // 0x320(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1514[0x2C];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x350(0x6E0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraComponent");
		return Clss;
	}

	void SetUseFieldOfViewForLOD(bool InbInUseFieldOfViewForLOD);
	void SetProjectionMode(enum class ECameraProjectionMode InInProjectionMode);
	void SetPostProcessBlendWeight(float InInPostProcessBlendWeight);
	void SetOrthoWidth(float InInOrthoWidth);
	void SetOrthoNearClipPlane(float InInOrthoNearClipPlane);
	void SetOrthoFarClipPlane(float InInOrthoFarClipPlane);
	void SetFieldOfView(float InInFieldOfView);
	void SetConstraintAspectRatio(bool InbInConstrainAspectRatio);
	void SetAspectRatio(float InInAspectRatio);
	void RemoveBlendable(TScriptInterface<class IBlendableInterface> InInBlendableObject);
	void OnCameraMeshHiddenChanged();
	void GetCameraView(float InDeltaTime, struct FMinimalViewInfo* InDesiredView);
	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InInBlendableObject, float InInWeight);
};

// 0x0 (0x290 - 0x290)
// Class Engine.Info
class AInfo : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Info");
		return Clss;
	}

};

// 0xA0 (0x330 - 0x290)
// Class Engine.GameModeBase
class AGameModeBase : public AInfo
{
public:
	class FString                                OptionsString;                                     // 0x290(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameSession>              GameSessionClass;                                  // 0x2A0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameStateBase>            GameStateClass;                                    // 0x2A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerController>         PlayerControllerClass;                             // 0x2B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerState>              PlayerStateClass;                                  // 0x2B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AHUD>                      HUDClass;                                          // 0x2C0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                     DefaultPawnClass;                                  // 0x2C8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpectatorPawn>            SpectatorClass;                                    // 0x2D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerController>         ReplaySpectatorPlayerControllerClass;              // 0x2D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AServerStatReplicator>     ServerStatReplicatorClass;                         // 0x2E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameSession*                          GameSession;                                       // 0x2E8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameStateBase*                        GameState;                                         // 0x2F0(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AServerStatReplicator*                 ServerStatReplicator;                              // 0x2F8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  DefaultPlayerName;                                 // 0x300(0x18)(Edit, NativeAccessSpecifierPublic)
	uint8                                        bUseSeamlessTravel : 1;                            // Mask: 0x1, PropSize: 0x10x318(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStartPlayersAsSpectators : 1;                     // Mask: 0x2, PropSize: 0x10x318(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bPauseable : 1;                                    // Mask: 0x4, PropSize: 0x10x318(0x1)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1599[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameModeBase");
		return Clss;
	}

	void StartPlay();
	class APawn* SpawnDefaultPawnFor(class AController* InNewPlayer, class AActor* InStartSpot);
	class APawn* SpawnDefaultPawnAtTransform(class AController* InNewPlayer, struct FTransform& InSpawnTransform);
	bool ShouldReset(class AActor* InActorToReset);
	void ReturnToMainMenuHost();
	void RestartPlayerAtTransform(class AController* InNewPlayer, struct FTransform& InSpawnTransform);
	void RestartPlayerAtPlayerStart(class AController* InNewPlayer, class AActor* InStartSpot);
	void RestartPlayer(class AController* InNewPlayer);
	void ResetLevel();
	bool PlayerCanRestart(class APlayerController* InPlayer);
	bool MustSpectate(class APlayerController* InNewPlayerController);
	void K2_PostLogin(class APlayerController* InNewPlayer);
	void K2_OnSwapPlayerControllers(class APlayerController* InOldPC, class APlayerController* InNewPC);
	void K2_OnRestartPlayer(class AController* InNewPlayer);
	void K2_OnLogout(class AController* InExitingController);
	void K2_OnChangeName(class AController* InOther, const class FString& InNewName, bool InbNameChange);
	class AActor* K2_FindPlayerStart(class AController* InPlayer, const class FString& InIncomingName);
	void InitStartSpot(class AActor* InStartSpot, class AController* InNewPlayer);
	void InitializeHUDForPlayer(class APlayerController* InNewPlayer);
	bool HasMatchStarted();
	bool HasMatchEnded();
	void HandleStartingNewPlayer(class APlayerController* InNewPlayer);
	int32 GetNumSpectators();
	int32 GetNumPlayers();
	class UClass* GetDefaultPawnClassForController(class AController* InInController);
	class AActor* FindPlayerStart(class AController* InPlayer, const class FString& InIncomingName);
	class AActor* ChoosePlayerStart(class AController* InPlayer);
	void ChangeName(class AController* InController, const class FString& InNewName, bool InbNameChange);
	bool CanSpectate(class APlayerController* InViewer, class APlayerState* InViewTarget);
};

// 0x48 (0x378 - 0x330)
// Class Engine.GameMode
class AGameMode : public AGameModeBase
{
public:
	class FName                                  MatchState;                                        // 0x330(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDelayedStart : 1;                                 // Mask: 0x1, PropSize: 0x10x338(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_CE : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_15B9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumSpectators;                                     // 0x33C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumPlayers;                                        // 0x340(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumBots;                                           // 0x344(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinRespawnDelay;                                   // 0x348(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumTravellingPlayers;                              // 0x34C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalMessage>             EngineMessageClass;                                // 0x350(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                  InactivePlayerArray;                               // 0x358(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        InactivePlayerStateLifeSpan;                       // 0x368(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxInactivePlayers;                                // 0x36C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHandleDedicatedServerReplays;                     // 0x370(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_15BF[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameMode");
		return Clss;
	}

	void StartMatch();
	void Say(const class FString& InMsg);
	void RestartGame();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	void K2_OnSetMatchState(class FName InNewState);
	bool IsMatchInProgress();
	class FName GetMatchState();
	void EndMatch();
	void AbortMatch();
};

// 0x18 (0x2A8 - 0x290)
// Class Engine.GameSession
class AGameSession : public AInfo
{
public:
	int32                                        MaxSpectators;                                     // 0x290(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxPlayers;                                        // 0x294(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxPartySize;                                      // 0x298(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MaxSplitscreensPerConnection;                      // 0x29C(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRequiresPushToTalk;                               // 0x29D(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_15C8[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SessionName;                                       // 0x2A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameSession");
		return Clss;
	}

};

// 0x50 (0x2E0 - 0x290)
// Class Engine.GameStateBase
class AGameStateBase : public AInfo
{
public:
	TSubclassOf<class AGameModeBase>             GameModeClass;                                     // 0x290(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameModeBase*                         AuthorityGameMode;                                 // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpectatorPawn>            SpectatorClass;                                    // 0x2A0(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                  PlayerArray;                                       // 0x2A8(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                         bReplicatedHasBegunPlay;                           // 0x2B8(0x1)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_15F6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReplicatedWorldTimeSeconds;                        // 0x2BC(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerWorldTimeSecondsDelta;                       // 0x2C0(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerWorldTimeSecondsUpdateFrequency;             // 0x2C4(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_15F7[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameStateBase");
		return Clss;
	}

	void OnRep_SpectatorClass();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_ReplicatedHasBegunPlay();
	void OnRep_GameModeClass();
	bool HasMatchStarted();
	bool HasMatchEnded();
	bool HasBegunPlay();
	float GetServerWorldTimeSeconds();
	float GetPlayerStartTime(class AController* InController);
	float GetPlayerRespawnDelay(class AController* InController);
};

// 0x20 (0x300 - 0x2E0)
// Class Engine.GameState
class AGameState : public AGameStateBase
{
public:
	class FName                                  MatchState;                                        // 0x2E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  PreviousMatchState;                                // 0x2E8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ElapsedTime;                                       // 0x2F0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1602[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameState");
		return Clss;
	}

	void OnRep_MatchState();
	void OnRep_ElapsedTime();
};

// 0x120 (0x148 - 0x28)
// Class Engine.GameUserSettings
class UGameUserSettings : public UObject
{
public:
	bool                                         bUseVSync;                                         // 0x28(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseDynamicResolution;                             // 0x29(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1754[0x5E];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       ResolutionSizeX;                                   // 0x88(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       ResolutionSizeY;                                   // 0x8C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       LastUserConfirmedResolutionSizeX;                  // 0x90(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       LastUserConfirmedResolutionSizeY;                  // 0x94(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        WindowPosX;                                        // 0x98(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        WindowPosY;                                        // 0x9C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        FullscreenMode;                                    // 0xA0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LastConfirmedFullscreenMode;                       // 0xA4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PreferredFullscreenMode;                           // 0xA8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       Version;                                           // 0xAC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        AudioQualityLevel;                                 // 0xB0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LastConfirmedAudioQualityLevel;                    // 0xB4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FrameRateLimit;                                    // 0xB8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1762[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DesiredScreenWidth;                                // 0xC0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseDesiredScreenHeight;                           // 0xC4(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1766[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DesiredScreenHeight;                               // 0xC8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LastUserConfirmedDesiredScreenWidth;               // 0xCC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LastUserConfirmedDesiredScreenHeight;              // 0xD0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastRecommendedScreenWidth;                        // 0xD4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastRecommendedScreenHeight;                       // 0xD8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastCPUBenchmarkResult;                            // 0xDC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastGPUBenchmarkResult;                            // 0xE0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_176D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                LastCPUBenchmarkSteps;                             // 0xE8(0x10)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                LastGPUBenchmarkSteps;                             // 0xF8(0x10)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	float                                        LastGPUBenchmarkMultiplier;                        // 0x108(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseHDRDisplayOutput;                              // 0x10C(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1773[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        HDRDisplayOutputNits;                              // 0x110(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1774[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnGameUserSettingsUINeedsUpdate;                   // 0x138(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameUserSettings");
		return Clss;
	}

	void ValidateSettings();
	bool SupportsHDRDisplayOutput();
	void SetVSyncEnabled(bool InbEnable);
	void SetVisualEffectQuality(int32 InValue);
	void SetViewDistanceQuality(int32 InValue);
	void SetToDefaults();
	void SetTextureQuality(int32 InValue);
	void SetShadowQuality(int32 InValue);
	void SetShadingQuality(int32 InValue);
	void SetScreenResolution(const struct FIntPoint& InResolution);
	void SetResolutionScaleValueEx(float InNewScaleValue);
	void SetResolutionScaleValue(int32 InNewScaleValue);
	void SetResolutionScaleNormalized(float InNewScaleNormalized);
	void SetReflectionQuality(int32 InValue);
	void SetPostProcessingQuality(int32 InValue);
	void SetOverallScalabilityLevel(int32 InValue);
	void SetGlobalIlluminationQuality(int32 InValue);
	void SetFullscreenMode(enum class EWindowMode InInFullscreenMode);
	void SetFrameRateLimit(float InNewLimit);
	void SetFoliageQuality(int32 InValue);
	void SetDynamicResolutionEnabled(bool InbEnable);
	void SetBenchmarkFallbackValues();
	void SetAudioQualityLevel(int32 InQualityLevel);
	void SetAntiAliasingQuality(int32 InValue);
	void SaveSettings();
	void RunHardwareBenchmark(int32 InWorkScale, float InCPUMultiplier, float InGPUMultiplier);
	void RevertVideoMode();
	void ResetToCurrentSettings();
	void LoadSettings(bool InbForceReload);
	bool IsVSyncEnabled();
	bool IsVSyncDirty();
	bool IsScreenResolutionDirty();
	bool IsHDREnabled();
	bool IsFullscreenModeDirty();
	bool IsDynamicResolutionEnabled();
	bool IsDynamicResolutionDirty();
	bool IsDirty();
	int32 GetVisualEffectQuality();
	int32 GetViewDistanceQuality();
	int32 GetTextureQuality();
	int32 GetSyncInterval();
	int32 GetShadowQuality();
	int32 GetShadingQuality();
	struct FIntPoint GetScreenResolution();
	float GetResolutionScaleNormalized();
	void GetResolutionScaleInformationEx(float* InCurrentScaleNormalized, float* InCurrentScaleValue, float* InMinScaleValue, float* InMaxScaleValue);
	void GetResolutionScaleInformation(float* InCurrentScaleNormalized, int32* InCurrentScaleValue, int32* InMinScaleValue, int32* InMaxScaleValue);
	int32 GetReflectionQuality();
	float GetRecommendedResolutionScale();
	enum class EWindowMode GetPreferredFullscreenMode();
	int32 GetPostProcessingQuality();
	int32 GetOverallScalabilityLevel();
	struct FIntPoint GetLastConfirmedScreenResolution();
	enum class EWindowMode GetLastConfirmedFullscreenMode();
	int32 GetGlobalIlluminationQuality();
	class UGameUserSettings* GetGameUserSettings();
	enum class EWindowMode GetFullscreenMode();
	float GetFrameRateLimit();
	int32 GetFramePace();
	int32 GetFoliageQuality();
	struct FIntPoint GetDesktopResolution();
	struct FIntPoint GetDefaultWindowPosition();
	enum class EWindowMode GetDefaultWindowMode();
	float GetDefaultResolutionScale();
	struct FIntPoint GetDefaultResolution();
	int32 GetCurrentHDRDisplayNits();
	int32 GetAudioQualityLevel();
	int32 GetAntiAliasingQuality();
	void EnableHDRDisplayOutput(bool InbEnable, int32 InDisplayNits);
	void ConfirmVideoMode();
	void ApplySettings(bool InbCheckForCommandLineOverrides);
	void ApplyResolutionSettings(bool InbCheckForCommandLineOverrides);
	void ApplyNonResolutionSettings();
	void ApplyHardwareBenchmarkResults();
};

// 0x100 (0x3A0 - 0x2A0)
// Class Engine.SpringArmComponent
class USpringArmComponent : public USceneComponent
{
public:
	float                                        TargetArmLength;                                   // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_17A3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               SocketOffset;                                      // 0x2A8(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               TargetOffset;                                      // 0x2C0(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ProbeSize;                                         // 0x2D8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 ProbeChannel;                                      // 0x2DC(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_17A9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDoCollisionTest : 1;                              // Mask: 0x1, PropSize: 0x10x2E0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePawnControlRotation : 1;                       // Mask: 0x2, PropSize: 0x10x2E0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritPitch : 1;                                 // Mask: 0x4, PropSize: 0x10x2E0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritYaw : 1;                                   // Mask: 0x8, PropSize: 0x10x2E0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritRoll : 1;                                  // Mask: 0x10, PropSize: 0x10x2E0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableCameraLag : 1;                              // Mask: 0x20, PropSize: 0x10x2E0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableCameraRotationLag : 1;                      // Mask: 0x40, PropSize: 0x10x2E0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseCameraLagSubstepping : 1;                      // Mask: 0x80, PropSize: 0x10x2E0(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawDebugLagMarkers : 1;                          // Mask: 0x1, PropSize: 0x10x2E1(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D5 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_17B2[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CameraLagSpeed;                                    // 0x2E4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraRotationLagSpeed;                            // 0x2E8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraLagMaxTimeStep;                              // 0x2EC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraLagMaxDistance;                              // 0x2F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClampToMaxPhysicsDeltaTime : 1;                   // Mask: 0x1, PropSize: 0x10x2F4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_17B5[0xAB];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpringArmComponent");
		return Clss;
	}

	bool IsCollisionFixApplied();
	struct FVector GetUnfixedCameraPosition();
	struct FRotator GetTargetRotation();
};

// 0x0 (0x290 - 0x290)
// Class Engine.TargetPoint
class ATargetPoint : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TargetPoint");
		return Clss;
	}

};

// 0x4C0 (0x4E8 - 0x28)
// Class Engine.AssetManager
class UAssetManager : public UObject
{
public:
	uint8                                        Pad_17BB[0x308];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       ObjectReferenceList;                               // 0x330(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                         bIsGlobalAsyncScanEnvironment;                     // 0x340(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldGuessTypeAndName;                           // 0x341(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldUseSynchronousLoad;                         // 0x342(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsLoadingFromPakFiles;                            // 0x343(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldAcquireMissingChunksOnLoad;                 // 0x344(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bOnlyCookProductionAssets;                         // 0x345(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_17C2[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumBulkScanRequests;                               // 0x348(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsPrimaryAssetDirectoryCurrent;                   // 0x34C(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsManagementDatabaseCurrent;                      // 0x34D(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUpdateManagementDatabaseAfterScan;                // 0x34E(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIncludeOnlyOnDiskAssets;                          // 0x34F(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHasCompletedInitialScan;                          // 0x350(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_17C9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumberOfSpawnedNotifications;                      // 0x354(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_17CA[0x190];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetManager");
		return Clss;
	}

};

// 0x60 (0x88 - 0x28)
// Class Engine.CheatManager
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                DebugCameraControllerRef;                          // 0x28(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADebugCameraController>    DebugCameraControllerClass;                        // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1881[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UCheatManagerExtension*>        CheatManagerExtensions;                            // 0x78(0x10)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CheatManager");
		return Clss;
	}

	void Walk();
	void ViewSelf();
	void ViewPlayer(const class FString& InS);
	void ViewClass(TSubclassOf<class AActor> InDesiredClass);
	void ViewActor(class FName InActorName);
	void UpdateSafeArea();
	void ToggleServerStatReplicatorUpdateStatNet();
	void ToggleServerStatReplicatorClientOverwrite();
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const class FString& InClassName);
	void StreamLevelOut(class FName InPackageName);
	void StreamLevelIn(class FName InPackageName);
	void SpawnServerStatReplicator();
	void Slomo(float InNewTimeDilation);
	void SetWorldOrigin();
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void ReceiveInitCheatManager();
	void ReceiveEndPlay();
	void PlayersOnly();
	void OnPlayerEndPlayed(class AActor* InPlayer, enum class EEndPlayReason InEndPlayReason);
	void OnlyLoadLevel(class FName InPackageName);
	void LogLoc();
	void InvertMouse();
	void God();
	void Ghost();
	class APlayerController* GetPlayerController();
	void FreezeFrame(float InDelay);
	void Fly();
	void FlushLog();
	void EnableDebugCamera();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DumpChatState();
	void DisableDebugCamera();
	void DestroyTarget();
	void DestroyServerStatReplicator();
	void DestroyPawns(TSubclassOf<class APawn> InAClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(TSubclassOf<class AActor> InAClass);
	void DebugCapsuleSweepSize(float InHalfHeight, float InRadius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool InbTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(enum class ECollisionChannel InChannel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float InDamageAmount);
	void CheatScript(const class FString& InScriptName);
	void ChangeSize(float InF);
	void BugItStringCreator(const struct FVector& InViewLocation, const struct FRotator& InViewRotation, class FString* InGoString, class FString* InLocString);
	void BugItGo(float InX, float InY, float InZ, float InPitch, float InYaw, float InRoll);
	void BugIt(const class FString& InScreenShotDescription);
};

// 0x30B0 (0x3340 - 0x290)
// Class Engine.PlayerCameraManager
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                     PCOwner;                                           // 0x290(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       TransformComponent;                                // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1937[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultFOV;                                        // 0x2A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1938[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultOrthoWidth;                                 // 0x2B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_193C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultAspectRatio;                                // 0x2B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_193E[0x64];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCameraCacheEntry                     CameraCache;                                       // 0x320(0x7D0)(Transient, NativeAccessSpecifierPublic)
	struct FCameraCacheEntry                     LastFrameCameraCache;                              // 0xAF0(0x7D0)(Transient, NativeAccessSpecifierPublic)
	struct FTViewTarget                          ViewTarget;                                        // 0x12C0(0x7E0)(Transient, NativeAccessSpecifierPublic)
	struct FTViewTarget                          PendingViewTarget;                                 // 0x1AA0(0x7E0)(Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_1940[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCameraCacheEntry                     CameraCachePrivate;                                // 0x22B0(0x7D0)(Transient, NativeAccessSpecifierPrivate)
	struct FCameraCacheEntry                     LastFrameCameraCachePrivate;                       // 0x2A80(0x7D0)(Transient, NativeAccessSpecifierPrivate)
	TArray<class UCameraModifier*>               ModifierList;                                      // 0x3250(0x10)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UCameraModifier>>   DefaultModifiers;                                  // 0x3260(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        FreeCamDistance;                                   // 0x3270(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1945[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               FreeCamOffset;                                     // 0x3278(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               ViewTargetOffset;                                  // 0x3290(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnAudioFadeChangeEvent;                            // 0x32A8(0x10)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1948[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TScriptInterface<class ICameraLensEffectInterface>> CameraLensEffects;                                 // 0x32D0(0x10)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UCameraModifier_CameraShake*           CachedCameraShakeMod;                              // 0x32E0(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPostProcessSettings>          PostProcessBlendCache;                             // 0x32E8(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_1949[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ACameraActor*                          AnimCameraActor;                                   // 0x3308(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bIsOrthographic : 1;                               // Mask: 0x1, PropSize: 0x10x3310(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultConstrainAspectRatio : 1;                  // Mask: 0x2, PropSize: 0x10x3310(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E9 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bClientSimulatingViewTarget : 1;                   // Mask: 0x40, PropSize: 0x10x3310(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseClientSideCameraUpdates : 1;                   // Mask: 0x80, PropSize: 0x10x3310(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EA : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bGameCameraCutThisFrame : 1;                       // Mask: 0x4, PropSize: 0x10x3311(0x1)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EB : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_194D[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ViewPitchMin;                                      // 0x3314(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewPitchMax;                                      // 0x3318(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewYawMin;                                        // 0x331C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewYawMax;                                        // 0x3320(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewRollMin;                                       // 0x3324(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewRollMax;                                       // 0x3328(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1954[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ServerUpdateCameraTimeout;                         // 0x3330(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1955[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerCameraManager");
		return Clss;
	}

	void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();
	void StopCameraShake(class UCameraShakeBase* InShakeInstance, bool InbImmediately);
	void StopCameraFade();
	void StopAllInstancesOfCameraShakeFromSource(TSubclassOf<class UCameraShakeBase> InShake, class UCameraShakeSourceComponent* InSourceComponent, bool InbImmediately);
	void StopAllInstancesOfCameraShake(TSubclassOf<class UCameraShakeBase> InShake, bool InbImmediately);
	void StopAllCameraShakesFromSource(class UCameraShakeSourceComponent* InSourceComponent, bool InbImmediately);
	void StopAllCameraShakes(bool InbImmediately);
	class UCameraShakeBase* StartCameraShakeFromSource(TSubclassOf<class UCameraShakeBase> InShakeClass, class UCameraShakeSourceComponent* InSourceComponent, float InScale, enum class ECameraShakePlaySpace InPlaySpace, const struct FRotator& InUserPlaySpaceRot);
	class UCameraShakeBase* StartCameraShake(TSubclassOf<class UCameraShakeBase> InShakeClass, float InScale, enum class ECameraShakePlaySpace InPlaySpace, const struct FRotator& InUserPlaySpaceRot);
	void StartCameraFade(float InFromAlpha, float InToAlpha, float InDuration, const struct FLinearColor& InColor, bool InbShouldFadeAudio, bool InbHoldWhenFinished);
	void SetManualCameraFade(float InInFadeAmount, const struct FLinearColor& InColor, bool InbInFadeAudio);
	void SetGameCameraCutThisFrame();
	void RemoveGenericCameraLensEffect(TScriptInterface<class ICameraLensEffectInterface> InEmitter);
	bool RemoveCameraModifier(class UCameraModifier* InModifierToRemove);
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* InEmitter);
	void PhotographyCameraModify(const struct FVector& InNewCameraLocation, const struct FVector& InPreviousCameraLocation, const struct FVector& InOriginalCameraLocation, struct FVector* InResultCameraLocation);
	void OnPhotographySessionStart();
	void OnPhotographySessionEnd();
	void OnPhotographyMultiPartCaptureStart();
	void OnPhotographyMultiPartCaptureEnd();
	class APlayerController* GetOwningPlayerController();
	float GetFOVAngle();
	struct FRotator GetCameraRotation();
	struct FVector GetCameraLocation();
	class UCameraModifier* FindCameraModifierByClass(TSubclassOf<class UCameraModifier> InModifierClass);
	void ClearCameraLensEffects();
	bool BlueprintUpdateCamera(class AActor* InCameraTarget, struct FVector* InNewCameraLocation, struct FRotator* InNewCameraRotation, float* InNewCameraFOV);
	class UCameraModifier* AddNewCameraModifier(TSubclassOf<class UCameraModifier> InModifierClass);
	TScriptInterface<class ICameraLensEffectInterface> AddGenericCameraLensEffect(TSubclassOf<class AActor> InLensEffectEmitterClass);
	class AEmitterCameraLensEffectBase* AddCameraLensEffect(TSubclassOf<class AEmitterCameraLensEffectBase> InLensEffectEmitterClass);
};

// 0x118 (0x3A8 - 0x290)
// Class Engine.PlayerState
class APlayerState : public AInfo
{
public:
	float                                        Score;                                             // 0x290(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PlayerId;                                          // 0x294(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CompressedPing;                                    // 0x298(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1987[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bShouldUpdateReplicatedPing : 1;                   // Mask: 0x1, PropSize: 0x10x29A(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bIsSpectator : 1;                                  // Mask: 0x2, PropSize: 0x10x29A(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOnlySpectator : 1;                                // Mask: 0x4, PropSize: 0x10x29A(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsABot : 1;                                       // Mask: 0x8, PropSize: 0x10x29A(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EC : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsInactive : 1;                                   // Mask: 0x20, PropSize: 0x10x29A(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFromPreviousLevel : 1;                            // Mask: 0x40, PropSize: 0x10x29A(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_ED : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_198B[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        StartTime;                                         // 0x29C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalMessage>             EngineMessageClass;                                // 0x2A0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_198D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SavedNetworkAddress;                               // 0x2B0(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                      UniqueId;                                          // 0x2C0(0x30)(Net, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_198F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnPawnSet;                                         // 0x2F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class APawn*                                 PawnPrivate;                                       // 0x308(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1991[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PlayerNamePrivate;                                 // 0x388(0x10)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1992[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerState");
		return Clss;
	}

	void ReceiveOverrideWith(class APlayerState* InOldPlayerState);
	void ReceiveCopyProperties(class APlayerState* InNewPlayerState);
	void OnRep_UniqueId();
	void OnRep_Score();
	void OnRep_PlayerName();
	void OnRep_PlayerId();
	void OnRep_bIsInactive();
	void OnPawnPrivateDestroyed(class AActor* InInActor);
	bool IsSpectator();
	bool IsOnlyASpectator();
	bool IsABot();
	float GetScore();
	class FString GetPlayerName();
	int32 GetPlayerId();
	class APlayerController* GetPlayerController();
	float GetPingInMilliseconds();
	class APawn* GetPawn();
	uint8 GetCompressedPing();
	struct FUniqueNetIdRepl BP_GetUniqueId();
};

// 0x10 (0x2A0 - 0x290)
// Class Engine.SkyLight
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                    LightComponent;                                    // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x298(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_199D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkyLight");
		return Clss;
	}

	void OnRep_bEnabled();
};

// 0xA0 (0x290 - 0x1F0)
// Class Engine.TextureCube
class UTextureCube : public UTexture
{
public:
	uint8                                        Pad_199F[0xA0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureCube");
		return Clss;
	}

};

// 0x140 (0x740 - 0x600)
// Class Engine.InstancedStaticMeshComponent
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData;                                 // 0x600(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMatrix>                       PerInstancePrevTransform;                          // 0x610(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                        NumCustomDataFloats;                               // 0x620(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A0D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                PerInstanceSMCustomData;                           // 0x628(0x10)(Edit, EditFixedSize, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                        InstancingRandomSeed;                              // 0x638(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A0E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInstancedStaticMeshRandomSeed> AdditionalRandomSeeds;                             // 0x640(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        InstanceStartCullDistance;                         // 0x650(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        InstanceEndCullDistance;                           // 0x654(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                InstanceReorderTable;                              // 0x658(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A10[0xC0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumPendingLightmaps;                               // 0x728(0x4)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1A11[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings;                                    // 0x730(0x10)(ZeroConstructor, Transient, DuplicateTransient, Protected, TextExportTransient, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InstancedStaticMeshComponent");
		return Clss;
	}

	bool UpdateInstanceTransform(int32 InInstanceIndex, struct FTransform& InNewInstanceTransform, bool InbWorldSpace, bool InbMarkRenderStateDirty, bool InbTeleport);
	bool SetCustomDataValue(int32 InInstanceIndex, int32 InCustomDataIndex, float InCustomDataValue, bool InbMarkRenderStateDirty);
	void SetCullDistances(int32 InStartCullDistance, int32 InEndCullDistance);
	bool RemoveInstances(TArray<int32>& InInstancesToRemove);
	bool RemoveInstance(int32 InInstanceIndex);
	bool IsValidInstance(int32 InInstanceIndex);
	bool GetInstanceTransform(int32 InInstanceIndex, struct FTransform* InOutInstanceTransform, bool InbWorldSpace);
	TArray<int32> GetInstancesOverlappingSphere(struct FVector& InCenter, float InRadius, bool InbSphereInWorldSpace);
	TArray<int32> GetInstancesOverlappingBox(struct FBox& InBox, bool InbBoxInWorldSpace);
	int32 GetInstanceCount();
	void ClearInstances();
	bool BatchUpdateInstancesTransforms(int32 InStartInstanceIndex, TArray<struct FTransform>& InNewInstancesTransforms, bool InbWorldSpace, bool InbMarkRenderStateDirty, bool InbTeleport);
	bool BatchUpdateInstancesTransform(int32 InStartInstanceIndex, int32 InNumInstances, struct FTransform& InNewInstancesTransform, bool InbWorldSpace, bool InbMarkRenderStateDirty, bool InbTeleport);
	int32 AddInstanceWorldSpace(struct FTransform& InWorldTransform);
	TArray<int32> AddInstances(TArray<struct FTransform>& InInstanceTransforms, bool InbShouldReturnIndices, bool InbWorldSpace);
	int32 AddInstance(struct FTransform& InInstanceTransform, bool InbWorldSpace);
};

// 0x190 (0x8D0 - 0x740)
// Class Engine.HierarchicalInstancedStaticMeshComponent
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	uint8                                        Pad_1A19[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseTranslatedInstanceSpace : 1;                   // Mask: 0x1, PropSize: 0x10x750(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EE : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1A1C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TranslatedInstanceSpaceOrigin;                     // 0x758(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                SortedInstances;                                   // 0x770(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        NumBuiltInstances;                                 // 0x780(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A1E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBox                                  BuiltInstanceBounds;                               // 0x788(0x38)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                  UnbuiltInstanceBounds;                             // 0x7C0(0x38)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBox>                          UnbuiltInstanceBoundsList;                         // 0x7F8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bEnableDensityScaling : 1;                         // Mask: 0x1, PropSize: 0x10x808(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EF : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1A21[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        OcclusionLayerNumNodes;                            // 0x810(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A23[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBoxSphereBounds                      CacheMeshExtendedBounds;                           // 0x818(0x38)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bDisableCollision;                                 // 0x850(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A24[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        InstanceCountToRender;                             // 0x854(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A25[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HierarchicalInstancedStaticMeshComponent");
		return Clss;
	}

};

// 0x0 (0x290 - 0x290)
// Class Engine.PartitionActor
class APartitionActor : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PartitionActor");
		return Clss;
	}

};

// 0x10 (0x2A0 - 0x290)
// Class Engine.ISMPartitionActor
class AISMPartitionActor : public APartitionActor
{
public:
	uint8                                        Pad_1A29[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ISMPartitionActor");
		return Clss;
	}

};

// 0x10 (0x2A0 - 0x290)
// Class Engine.StaticMeshActor
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bStaticMeshReplicateMovement;                      // 0x298(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENavDataGatheringMode             NavigationGeometryGatheringMode;                   // 0x299(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A2E[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StaticMeshActor");
		return Clss;
	}

	void SetMobility(enum class EComponentMobility InInMobility);
};

// 0x70 (0x98 - 0x28)
// Class Engine.MaterialInterface
class UMaterialInterface : public UObject
{
public:
	uint8                                        Pad_1A61[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USubsurfaceProfile*                    SubsurfaceProfile;                                 // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A62[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLightmassMaterialInterfaceSettings   LightmassSettings;                                 // 0x50(0x10)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMaterialTextureInfo>          TextureStreamingData;                              // 0x60(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x70(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_1A63[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInterface");
		return Clss;
	}

	void SetForceMipLevelsToBeResident(bool InOverrideForceMiplevelsToBeResident, bool InbForceMiplevelsToBeResidentValue, float InForceDuration, int32 InCinematicTextureGroups, bool InbFastResponse);
	class UPhysicalMaterialMask* GetPhysicalMaterialMask();
	class UPhysicalMaterial* GetPhysicalMaterialFromMap(int32 InIndex);
	class UPhysicalMaterial* GetPhysicalMaterial();
	struct FMaterialParameterInfo GetParameterInfo(enum class EMaterialParameterAssociation InAssociation, class FName InParameterName, class UMaterialFunctionInterface* InLayerFunction);
	enum class EBlendMode GetBlendMode();
	class UMaterial* GetBaseMaterial();
};

// 0x160 (0x1F8 - 0x98)
// Class Engine.MaterialInstance
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                     PhysMaterial;                                      // 0x98(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                     PhysicalMaterialMap[0x8];                          // 0xA0(0x40)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    Parent;                                            // 0xE0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialOverrideNanite               NaniteOverrideMaterial;                            // 0xE8(0x40)(Edit, NativeAccessSpecifierPublic)
	uint8                                        bHasStaticPermutationResource : 1;                 // Mask: 0x1, PropSize: 0x10x128(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideSubsurfaceProfile : 1;                    // Mask: 0x2, PropSize: 0x10x128(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F0 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1A6A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FScalarParameterValue>         ScalarParameterValues;                             // 0x130(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorParameterValue>         VectorParameterValues;                             // 0x140(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDoubleVectorParameterValue>   DoubleVectorParameterValues;                       // 0x150(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTextureParameterValue>        TextureParameterValues;                            // 0x160(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;              // 0x170(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFontParameterValue>           FontParameterValues;                               // 0x180(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides;                             // 0x190(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A6C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStaticParameterSetRuntimeData        StaticParametersRuntime;                           // 0x1A0(0x28)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_1A6D[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInstance");
		return Clss;
	}

};

// 0x8 (0x200 - 0x1F8)
// Class Engine.MaterialInstanceConstant
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	class UPhysicalMaterialMask*                 PhysMaterialMask;                                  // 0x1F8(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInstanceConstant");
		return Clss;
	}

	struct FLinearColor K2_GetVectorParameterValue(class FName InParameterName);
	class UTexture* K2_GetTextureParameterValue(class FName InParameterName);
	float K2_GetScalarParameterValue(class FName InParameterName);
};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionCustomOutput
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCustomOutput");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineCustomTimeStep
class UEngineCustomTimeStep : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineCustomTimeStep");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.TimecodeProvider
class UTimecodeProvider : public UObject
{
public:
	float                                        FrameDelay;                                        // 0x28(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1A95[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TimecodeProvider");
		return Clss;
	}

	struct FTimecode GetTimecode();
	enum class ETimecodeProviderSynchronizationState GetSynchronizationState();
	struct FQualifiedFrameTime GetQualifiedFrameTime();
	struct FFrameRate GetFrameRate();
	struct FTimecode GetDelayedTimecode();
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime();
	bool FetchTimecode(struct FQualifiedFrameTime* InOutFrameTime);
	void FetchAndUpdate();
};

// 0x70 (0x98 - 0x28)
// Class Engine.EdGraphNode
class UEdGraphNode : public UObject
{
public:
	uint8                                        Pad_1A9D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UEdGraphPin_Deprecated*>        DeprecatedPins;                                    // 0x38(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                        NodePosX;                                          // 0x48(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NodePosY;                                          // 0x4C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NodeWidth;                                         // 0x50(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NodeHeight;                                        // 0x54(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENodeAdvancedPins                 AdvancedPinDisplay;                                // 0x58(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENodeEnabledState                 EnabledState;                                      // 0x59(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1AA1[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_F1 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDisplayAsDisabled : 1;                            // Mask: 0x2, PropSize: 0x10x5B(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bUserSetEnabledState : 1;                          // Mask: 0x4, PropSize: 0x10x5B(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bIsIntermediateNode : 1;                           // Mask: 0x8, PropSize: 0x10x5B(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bHasCompilerMessage : 1;                           // Mask: 0x10, PropSize: 0x10x5B(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F2 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1AA6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                NodeComment;                                       // 0x60(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ErrorType;                                         // 0x70(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AA9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ErrorMsg;                                          // 0x78(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 NodeGuid;                                          // 0x88(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EdGraphNode");
		return Clss;
	}

};

// 0x710 (0x9A0 - 0x290)
// Class Engine.CameraActor
class ACameraActor : public AActor
{
public:
	enum class EAutoReceiveInput                 AutoActivateForPlayer;                             // 0x290(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1AB0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCameraComponent*                      CameraComponent;                                   // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       SceneComponent;                                    // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bConstrainAspectRatio : 1;                         // Mask: 0x1, PropSize: 0x10x2A8(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_F3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1AB3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AspectRatio;                                       // 0x2AC(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        FOVAngle;                                          // 0x2B0(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        PostProcessBlendWeight;                            // 0x2B4(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1AB6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x2C0(0x6E0)(Deprecated, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraActor");
		return Clss;
	}

	int32 GetAutoActivatePlayerIndex();
};

// 0x0 (0x28 - 0x28)
// Class Engine.ActiveSoundUpdateInterface
class IActiveSoundUpdateInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActiveSoundUpdateInterface");
		return Clss;
	}

};

// 0x40 (0x68 - 0x28)
// Class Engine.Channel
class UChannel : public UObject
{
public:
	class UNetConnection*                        Connection;                                        // 0x28(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ABB[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Channel");
		return Clss;
	}

};

// 0x228 (0x290 - 0x68)
// Class Engine.ActorChannel
class UActorChannel : public UChannel
{
public:
	class AActor*                                Actor;                                             // 0x68(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ABD[0xE8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       CreateSubObjects;                                  // 0x158(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ABE[0x128];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorChannel");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ActorReplicationBridge
class UActorReplicationBridge : public UObjectReplicationBridge
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorReplicationBridge");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationAssetExtensions
class UAnimationAssetExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimationAssetExtensions");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimBlueprintClassSubsystem_PropertyAccess
class UAnimBlueprintClassSubsystem_PropertyAccess : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimBlueprintClassSubsystem_PropertyAccess");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationDataModelNotifiesExtensions
class UAnimationDataModelNotifiesExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimationDataModelNotifiesExtensions");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimLayerInterface
class IAnimLayerInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimLayerInterface");
		return Clss;
	}

};

// 0x58 (0x80 - 0x28)
// Class Engine.AnimationAsset
class UAnimationAsset : public UObject
{
public:
	uint8                                        Pad_1AC6[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0x38(0x8)(Edit, ZeroConstructor, EditConst, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1AC8[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAnimMetaData*>                 MetaData;                                          // 0x60(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x70(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimationAsset");
		return Clss;
	}

	float GetPlayLength();
};

// 0x30 (0xB0 - 0x80)
// Class Engine.AnimSequenceBase
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>              Notifies;                                          // 0x80(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        SequenceLength;                                    // 0x90(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RateScale;                                         // 0x94(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLoop;                                             // 0x98(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ACC[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawCurveTracks                       RawCurveData;                                      // 0xA0(0x10)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimSequenceBase");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.RawAnimSequenceTrackExtensions
class URawAnimSequenceTrackExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RawAnimSequenceTrackExtensions");
		return Clss;
	}

	TArray<struct FVector> GetScaleKeys(struct FRawAnimSequenceTrack& InTrack);
	TArray<struct FQuat> GetRotationalKeys(struct FRawAnimSequenceTrack& InTrack);
	TArray<struct FVector> GetPositionalKeys(struct FRawAnimSequenceTrack& InTrack);
};

// 0x50 (0x78 - 0x28)
// Class Engine.AssetExportTask
class UAssetExportTask : public UObject
{
public:
	class UObject*                               Object;                                            // 0x28(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExporter*                             Exporter;                                          // 0x30(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Filename;                                          // 0x38(0x10)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSelected;                                         // 0x48(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bReplaceIdentical;                                 // 0x49(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPrompt;                                           // 0x4A(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAutomated;                                        // 0x4B(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseFileArchive;                                   // 0x4C(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWriteEmptyFiles;                                  // 0x4D(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ADD[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       IgnoreObjectList;                                  // 0x50(0x10)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UObject*                               Options;                                           // 0x60(0x8)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        Errors;                                            // 0x68(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetExportTask");
		return Clss;
	}

};

// 0xC8 (0x100 - 0x38)
// Class Engine.AssetManagerSettings
class UAssetManagerSettings : public UDeveloperSettings
{
public:
	TArray<struct FPrimaryAssetTypeInfo>         PrimaryAssetTypesToScan;                           // 0x38(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                DirectoriesToExclude;                              // 0x48(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetRulesOverride>    PrimaryAssetRules;                                 // 0x58(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules;                           // 0x68(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                         bOnlyCookProductionAssets;                         // 0x78(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldManagerDetermineTypeAndName;                // 0x79(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldGuessTypeAndNameInEditor;                   // 0x7A(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldAcquireMissingChunksOnLoad;                 // 0x7B(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShouldWarnAboutInvalidAssets;                     // 0x7C(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AE4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAssetManagerRedirect>         PrimaryAssetIdRedirects;                           // 0x80(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FAssetManagerRedirect>         PrimaryAssetTypeRedirects;                         // 0x90(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FAssetManagerRedirect>         AssetPathRedirects;                                // 0xA0(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSet<class FName>                            MetaDataTagsForAssetRegistry;                      // 0xB0(0x50)(Edit, Config, AdvancedDisplay, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetManagerSettings");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.AsyncPhysicsData
class UAsyncPhysicsData : public UObject
{
public:
	int32                                        ServerFrame;                                       // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        ReplicationRedundancy;                             // 0x2C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AsyncPhysicsData");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AudioPanelWidgetInterface
class IAudioPanelWidgetInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioPanelWidgetInterface");
		return Clss;
	}

	class FName GetIconBrushName();
	class FText GetEditorName();
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlendableInterface
class IBlendableInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlendableInterface");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.AnalysisProperties
class UAnalysisProperties : public UObject
{
public:
	class FString                                Function;                                          // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnalysisProperties");
		return Clss;
	}

};

// 0x120 (0x1A0 - 0x80)
// Class Engine.BlendSpace
class UBlendSpace : public UAnimationAsset
{
public:
	uint8                                        Pad_1AEF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bContainsRotationOffsetMeshSpaceSamples;           // 0x88(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AF0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInterpolationParameter               InterpolationParam[0x3];                           // 0x8C(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                        TargetWeightInterpolationSpeedPerSec;              // 0xBC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTargetWeightInterpolationEaseInOut;               // 0xC0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowMeshSpaceBlending;                           // 0xC1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLoop;                                             // 0xC2(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AF2[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AnimLength;                                        // 0xC4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENotifyTriggerMode                NotifyTriggerMode;                                 // 0xC8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInterpolateUsingGrid;                             // 0xC9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPreferredTriangulationDirection  PreferredTriangulationDirection;                   // 0xCA(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AF4[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPerBoneInterpolation>         PerBoneBlend;                                      // 0xD0(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                        SampleIndexWithMarkers;                            // 0xE0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1AF7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBlendSample>                  SampleData;                                        // 0xE8(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FEditorElement>                GridSamples;                                       // 0xF8(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBlendSpaceData                       BlendSpaceData;                                    // 0x108(0x20)(Protected, NativeAccessSpecifierProtected)
	struct FBlendParameter                       BlendParameters[0x3];                              // 0x128(0x60)(Edit, Protected, NativeAccessSpecifierProtected)
	enum class EBlendSpaceAxis                   AxisToScaleAnimation;                              // 0x188(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1AF8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                DimensionIndices;                                  // 0x190(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlendSpace");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Breakpoint
class UBreakpoint : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Breakpoint");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintExtension
class UBlueprintExtension : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintExtension");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.BookmarkBase
class UBookmarkBase : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BookmarkBase");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.BookMark2D
class UBookMark2D : public UBookmarkBase
{
public:
	float                                        Zoom2D;                                            // 0x28(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                             Location;                                          // 0x2C(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1AFB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BookMark2D");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.ReflectionCapture
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*           CaptureComponent;                                  // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReflectionCapture");
		return Clss;
	}

};

// 0x0 (0x298 - 0x298)
// Class Engine.BoxReflectionCapture
class ABoxReflectionCapture : public AReflectionCapture
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BoxReflectionCapture");
		return Clss;
	}

};

// 0x70 (0x310 - 0x2A0)
// Class Engine.ReflectionCaptureComponent
class UReflectionCaptureComponent : public USceneComponent
{
public:
	class UBillboardComponent*                   CaptureOffsetComponent;                            // 0x2A0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EReflectionSourceType             ReflectionSourceType;                              // 0x2A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B08[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          Cubemap;                                           // 0x2B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SourceCubemapAngle;                                // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Brightness;                                        // 0x2BC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CaptureOffset;                                     // 0x2C0(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 MapBuildDataId;                                    // 0x2D8(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B0B[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReflectionCaptureComponent");
		return Clss;
	}

};

// 0x20 (0x330 - 0x310)
// Class Engine.BoxReflectionCaptureComponent
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                        BoxTransitionDistance;                             // 0x310(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B10[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBoxComponent*                         PreviewInfluenceBox;                               // 0x318(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                         PreviewCaptureBox;                                 // 0x320(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B11[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BoxReflectionCaptureComponent");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.BuiltInAttributesExtensions
class UBuiltInAttributesExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BuiltInAttributesExtensions");
		return Clss;
	}

};

// 0x8 (0x3310 - 0x3308)
// Class Engine.ChildConnection
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                        Parent;                                            // 0x3308(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ChildConnection");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.PlatformInterfaceBase
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                AllDelegates;                                      // 0x28(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlatformInterfaceBase");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.CloudStorageBase
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<class FString>                        LocalCloudFiles;                                   // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bSuppressDelegateCalls : 1;                        // Mask: 0x1, PropSize: 0x10x48(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B19[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CloudStorageBase");
		return Clss;
	}

};

// 0x18 (0x80 - 0x68)
// Class Engine.ControlChannel
class UControlChannel : public UChannel
{
public:
	uint8                                        Pad_1B1B[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ControlChannel");
		return Clss;
	}

};

// 0x2030 (0x2098 - 0x68)
// Class Engine.DataStreamChannel
class UDataStreamChannel : public UChannel
{
public:
	uint8                                        Pad_1B1D[0x2030];                                  // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataStreamChannel");
		return Clss;
	}

};

// 0x58 (0x3360 - 0x3308)
// Class Engine.DemoNetConnection
class UDemoNetConnection : public UNetConnection
{
public:
	uint8                                        Pad_1B20[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DemoNetConnection");
		return Clss;
	}

};

// 0x98 (0xC0 - 0x28)
// Class Engine.PendingNetGame
class UPendingNetGame : public UObject
{
public:
	uint8                                        Pad_1B21[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNetDriver*                            NetDriver;                                         // 0x30(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDemoNetDriver*                        DemoNetDriver;                                     // 0x38(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1B25[0x80];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PendingNetGame");
		return Clss;
	}

};

// 0x0 (0xC0 - 0xC0)
// Class Engine.DemoPendingNetGame
class UDemoPendingNetGame : public UPendingNetGame
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DemoPendingNetGame");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.DeviceProfileFragment
class UDeviceProfileFragment : public UObject
{
public:
	TArray<class FString>                        CVars;                                             // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DeviceProfileFragment");
		return Clss;
	}

};

// 0x18 (0x180 - 0x168)
// Class Engine.DialogueSoundWaveProxy
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	uint8                                        Pad_1B2B[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DialogueSoundWaveProxy");
		return Clss;
	}

};

// 0x10 (0x2A0 - 0x290)
// Class Engine.Light
class ALight : public AActor
{
public:
	class ULightComponent*                       LightComponent;                                    // 0x290(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x298(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B3D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Light");
		return Clss;
	}

	void ToggleEnabled();
	void SetLightFunctionScale(const struct FVector& InNewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* InNewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float InNewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& InNewLightColor);
	void SetEnabled(bool InbSetEnabled);
	void SetCastShadows(bool InbNewValue);
	void SetBrightness(float InNewBrightness);
	void SetAffectTranslucentLighting(bool InbNewValue);
	void OnRep_bEnabled();
	bool IsEnabled();
	struct FLinearColor GetLightColor();
	float GetBrightness();
};

// 0x0 (0x2A0 - 0x2A0)
// Class Engine.DirectionalLight
class ADirectionalLight : public ALight
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DirectionalLight");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.Distribution
class UDistribution : public UObject
{
public:
	uint8                                        Pad_1B43[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Distribution");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.DistributionFloat
class UDistributionFloat : public UDistribution
{
public:
	uint8                                        bCanBeBaked : 1;                                   // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F4 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bBakedDataSuccesfully : 1;                         // Mask: 0x4, PropSize: 0x10x30(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1B44[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloat");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.DistributionFloatConstant
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                        Constant;                                          // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B45[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatConstant");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.DistributionFloatConstantCurve
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                     ConstantCurve;                                     // 0x38(0x18)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatConstantCurve");
		return Clss;
	}

};

// 0x20 (0x60 - 0x40)
// Class Engine.DistributionFloatParameterBase
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	class FName                                  ParameterName;                                     // 0x40(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinInput;                                          // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxInput;                                          // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinOutput;                                         // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxOutput;                                         // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDistributionParamMode            ParamMode;                                         // 0x58(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B4D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatParameterBase");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.DistributionFloatParticleParameter
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatParticleParameter");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.DistributionFloatUniform
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                        Min;                                               // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Max;                                               // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatUniform");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.DistributionFloatUniformCurve
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                  ConstantCurve;                                     // 0x38(0x18)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatUniformCurve");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.DistributionVector
class UDistributionVector : public UDistribution
{
public:
	uint8                                        bCanBeBaked : 1;                                   // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsDirty : 1;                                      // Mask: 0x2, PropSize: 0x10x30(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBakedDataSuccesfully : 1;                         // Mask: 0x4, PropSize: 0x10x30(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1B59[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVector");
		return Clss;
	}

};

// 0x20 (0x58 - 0x38)
// Class Engine.DistributionVectorConstant
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                               Constant;                                          // 0x38(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockAxes : 1;                                     // Mask: 0x1, PropSize: 0x10x50(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F5 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1B5C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes;                                        // 0x54(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B5E[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorConstant");
		return Clss;
	}

};

// 0x20 (0x58 - 0x38)
// Class Engine.DistributionVectorConstantCurve
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                    ConstantCurve;                                     // 0x38(0x18)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockAxes : 1;                                     // Mask: 0x1, PropSize: 0x10x50(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F6 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1B63[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes;                                        // 0x54(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B64[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorConstantCurve");
		return Clss;
	}

};

// 0x70 (0xC8 - 0x58)
// Class Engine.DistributionVectorParameterBase
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	class FName                                  ParameterName;                                     // 0x58(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MinInput;                                          // 0x60(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MaxInput;                                          // 0x78(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MinOutput;                                         // 0x90(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MaxOutput;                                         // 0xA8(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDistributionParamMode            ParamModes[0x3];                                   // 0xC0(0x3)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B68[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorParameterBase");
		return Clss;
	}

};

// 0x0 (0xC8 - 0xC8)
// Class Engine.DistributionVectorParticleParameter
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorParticleParameter");
		return Clss;
	}

};

// 0x40 (0x78 - 0x38)
// Class Engine.DistributionVectorUniform
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                               Max;                                               // 0x38(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               Min;                                               // 0x50(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockAxes : 1;                                     // Mask: 0x1, PropSize: 0x10x68(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F7 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1B6B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes;                                        // 0x6C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDistributionVectorMirrorFlags    MirrorFlags[0x3];                                  // 0x6D(0x3)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseExtremes : 1;                                  // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B6D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorUniform");
		return Clss;
	}

};

// 0x28 (0x60 - 0x38)
// Class Engine.DistributionVectorUniformCurve
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                ConstantCurve;                                     // 0x38(0x18)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockAxes1 : 1;                                    // Mask: 0x1, PropSize: 0x10x50(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockAxes2 : 1;                                    // Mask: 0x2, PropSize: 0x10x50(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F8 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1B71[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes[0x2];                                   // 0x54(0x2)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDistributionVectorMirrorFlags    MirrorFlags[0x3];                                  // 0x56(0x3)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B72[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseExtremes : 1;                                  // Mask: 0x1, PropSize: 0x10x5C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B73[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorUniformCurve");
		return Clss;
	}

};

// 0x28 (0x50 - 0x28)
// Class Engine.GraphNodeContextMenuContext
class UGraphNodeContextMenuContext : public UObject
{
public:
	class UBlueprint*                            Blueprint;                                         // 0x28(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraph*                              Graph;                                             // 0x30(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphNode*                          Node;                                              // 0x38(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B75[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsDebugging;                                      // 0x48(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B76[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GraphNodeContextMenuContext");
		return Clss;
	}

};

// 0xF0 (0x118 - 0x28)
// Class Engine.EdGraphPin_Deprecated
class UEdGraphPin_Deprecated : public UObject
{
public:
	class FString                                PinName;                                           // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                PinToolTip;                                        // 0x38(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EEdGraphPinDirection              Direction;                                         // 0x48(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B77[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FEdGraphPinType                       PinType;                                           // 0x50(0x58)(NoDestructor, NativeAccessSpecifierPublic)
	class FString                                DefaultValue;                                      // 0xA8(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                AutogeneratedDefaultValue;                         // 0xB8(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                               DefaultObject;                                     // 0xC8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  DefaultTextValue;                                  // 0xD0(0x18)(NativeAccessSpecifierPublic)
	TArray<class UEdGraphPin_Deprecated*>        LinkedTo;                                          // 0xE8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UEdGraphPin_Deprecated*>        SubPins;                                           // 0xF8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UEdGraphPin_Deprecated*                ParentPin;                                         // 0x108(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphPin_Deprecated*                ReferencePassThroughConnection;                    // 0x110(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EdGraphPin_Deprecated");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.EdGraphSchema
class UEdGraphSchema : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EdGraphSchema");
		return Clss;
	}

};

// 0x50 (0x2E0 - 0x290)
// Class Engine.Emitter
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*              ParticleSystemComponent;                           // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bDestroyOnSystemFinish : 1;                        // Mask: 0x1, PropSize: 0x10x298(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPostUpdateTickGroup : 1;                          // Mask: 0x2, PropSize: 0x10x298(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCurrentlyActive : 1;                              // Mask: 0x4, PropSize: 0x10x298(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_FA : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1B88[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnParticleSpawn;                                   // 0x2A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnParticleBurst;                                   // 0x2B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnParticleDeath;                                   // 0x2C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnParticleCollide;                                 // 0x2D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Emitter");
		return Clss;
	}

	void ToggleActive();
	void SetVectorParameter(class FName InParameterName, const struct FVector& InParam);
	void SetTemplate(class UParticleSystem* InNewTemplate);
	void SetMaterialParameter(class FName InParameterName, class UMaterialInterface* InParam);
	void SetFloatParameter(class FName InParameterName, float InParam);
	void SetColorParameter(class FName InParameterName, const struct FLinearColor& InParam);
	void SetActorParameter(class FName InParameterName, class AActor* InParam);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(class UParticleSystemComponent* InFinishedComponent);
	bool IsActive();
	void Deactivate();
	void Activate();
};

// 0xA0 (0x380 - 0x2E0)
// Class Engine.EmitterCameraLensEffectBase
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	uint8                                        Pad_1B93[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleSystem*                       PS_CameraEffect;                                   // 0x2E8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCameraManager*                  BaseCamera;                                        // 0x2F0(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1B95[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            RelativeTransform;                                 // 0x300(0x60)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BaseFOV;                                           // 0x360(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowMultipleInstances : 1;                       // Mask: 0x1, PropSize: 0x10x364(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bResetWhenRetriggered : 1;                         // Mask: 0x2, PropSize: 0x10x364(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_FB : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1B97[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class AActor>>            EmittersToTreatAsSame;                             // 0x368(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        DistFromCamera;                                    // 0x378(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1B98[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EmitterCameraLensEffectBase");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ViewModeUtils
class UViewModeUtils : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ViewModeUtils");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineBaseTypes
class UEngineBaseTypes : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineBaseTypes");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineTypes
class UEngineTypes : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineTypes");
		return Clss;
	}

};

// 0x10 (0x2A0 - 0x290)
// Class Engine.ExponentialHeightFog
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*        Component;                                         // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x298(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1B9B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ExponentialHeightFog");
		return Clss;
	}

	void OnRep_bEnabled();
};

// 0xE0 (0x380 - 0x2A0)
// Class Engine.ExponentialHeightFogComponent
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	float                                        FogDensity;                                        // 0x2A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FogHeightFalloff;                                  // 0x2A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData             SecondFogData;                                     // 0x2A8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                          FogInscatteringColor;                              // 0x2B4(0x10)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          FogInscatteringLuminance;                          // 0x2C4(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          SkyAtmosphereAmbientContributionColorScale;        // 0x2D4(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1BCD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          InscatteringColorCubemap;                          // 0x2E8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InscatteringColorCubemapAngle;                     // 0x2F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          InscatteringTextureTint;                           // 0x2F4(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FullyDirectionalInscatteringColorDistance;         // 0x304(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NonDirectionalInscatteringColorDistance;           // 0x308(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DirectionalInscatteringExponent;                   // 0x30C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DirectionalInscatteringStartDistance;              // 0x310(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          DirectionalInscatteringColor;                      // 0x314(0x10)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          DirectionalInscatteringLuminance;                  // 0x324(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FogMaxOpacity;                                     // 0x334(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StartDistance;                                     // 0x338(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FogCutoffDistance;                                 // 0x33C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableVolumetricFog;                              // 0x340(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1BD2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VolumetricFogScatteringDistribution;               // 0x344(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                VolumetricFogAlbedo;                               // 0x348(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          VolumetricFogEmissive;                             // 0x34C(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumetricFogExtinctionScale;                      // 0x35C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumetricFogDistance;                             // 0x360(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumetricFogStartDistance;                        // 0x364(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumetricFogNearFadeInDistance;                   // 0x368(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumetricFogStaticLightingScatteringIntensity;    // 0x36C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverrideLightColorsWithFogInscatteringColors;     // 0x370(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1BD6[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ExponentialHeightFogComponent");
		return Clss;
	}

	void SetVolumetricFogScatteringDistribution(float InNewValue);
	void SetVolumetricFogExtinctionScale(float InNewValue);
	void SetVolumetricFogEmissive(const struct FLinearColor& InNewValue);
	void SetVolumetricFogDistance(float InNewValue);
	void SetVolumetricFogAlbedo(const struct FColor& InNewValue);
	void SetVolumetricFog(bool InbNewValue);
	void SetStartDistance(float InValue);
	void SetSecondFogHeightOffset(float InValue);
	void SetSecondFogHeightFalloff(float InValue);
	void SetSecondFogDensity(float InValue);
	void SetSecondFogData(const struct FExponentialHeightFogData& InNewValue);
	void SetNonDirectionalInscatteringColorDistance(float InValue);
	void SetInscatteringTextureTint(const struct FLinearColor& InValue);
	void SetInscatteringColorCubemapAngle(float InValue);
	void SetInscatteringColorCubemap(class UTextureCube* InValue);
	void SetFullyDirectionalInscatteringColorDistance(float InValue);
	void SetFogMaxOpacity(float InValue);
	void SetFogInscatteringColor(const struct FLinearColor& InValue);
	void SetFogHeightFalloff(float InValue);
	void SetFogDensity(float InValue);
	void SetFogCutoffDistance(float InValue);
	void SetDirectionalInscatteringStartDistance(float InValue);
	void SetDirectionalInscatteringExponent(float InValue);
	void SetDirectionalInscatteringColor(const struct FLinearColor& InValue);
};

// 0xB0 (0xD8 - 0x28)
// Class Engine.FontImportOptions
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                Data;                                              // 0x28(0xB0)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("FontImportOptions");
		return Clss;
	}

};

// 0xC0 (0xE8 - 0x28)
// Class Engine.ForceFeedbackAttenuation
class UForceFeedbackAttenuation : public UObject
{
public:
	struct FForceFeedbackAttenuationSettings     Attenuation;                                       // 0x28(0xC0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ForceFeedbackAttenuation");
		return Clss;
	}

};

// 0xA8 (0x338 - 0x290)
// Class Engine.GameNetworkManager
class AGameNetworkManager : public AInfo
{
public:
	float                                        BadPacketLossThreshold;                            // 0x290(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SeverePacketLossThreshold;                         // 0x294(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BadPingThreshold;                                  // 0x298(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SeverePingThreshold;                               // 0x29C(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        AdjustedNetSpeed;                                  // 0x2A0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastNetSpeedUpdateTime;                            // 0x2A4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TotalNetBandwidth;                                 // 0x2A8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinDynamicBandwidth;                               // 0x2AC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxDynamicBandwidth;                               // 0x2B0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsStandbyCheckingEnabled : 1;                     // Mask: 0x1, PropSize: 0x10x2B4(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasStandbyCheatTriggered : 1;                     // Mask: 0x2, PropSize: 0x10x2B4(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_FD : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1BDC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StandbyRxCheatTime;                                // 0x2B8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StandbyTxCheatTime;                                // 0x2BC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PercentMissingForRxStandby;                        // 0x2C0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PercentMissingForTxStandby;                        // 0x2C4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PercentForBadPing;                                 // 0x2C8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JoinInProgressStandbyWaitTime;                     // 0x2CC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MoveRepSize;                                       // 0x2D0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MAXPOSITIONERRORSQUARED;                           // 0x2D4(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MAXNEARZEROVELOCITYSQUARED;                        // 0x2D8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CLIENTADJUSTUPDATECOST;                            // 0x2DC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MAXCLIENTUPDATEINTERVAL;                           // 0x2E0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxClientForcedUpdateDuration;                     // 0x2E4(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ServerForcedUpdateHitchThreshold;                  // 0x2E8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ServerForcedUpdateHitchCooldown;                   // 0x2EC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxMoveDeltaTime;                                  // 0x2F0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxClientSmoothingDeltaTime;                       // 0x2F4(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClientNetSendMoveDeltaTime;                        // 0x2F8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClientNetSendMoveDeltaTimeThrottled;               // 0x2FC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClientNetSendMoveDeltaTimeStationary;              // 0x300(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ClientNetSendMoveThrottleAtNetSpeed;               // 0x304(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ClientNetSendMoveThrottleOverPlayerCount;          // 0x308(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClientErrorUpdateRateLimit;                        // 0x30C(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClientNetCamUpdateDeltaTime;                       // 0x310(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClientNetCamUpdatePositionLimit;                   // 0x314(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ClientAuthorativePosition;                         // 0x318(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMovementTimeDiscrepancyDetection;                 // 0x319(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMovementTimeDiscrepancyResolution;                // 0x31A(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1BE0[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MovementTimeDiscrepancyMaxTimeMargin;              // 0x31C(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementTimeDiscrepancyMinTimeMargin;              // 0x320(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementTimeDiscrepancyResolutionRate;             // 0x324(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementTimeDiscrepancyDriftAllowance;             // 0x328(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x32C(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseDistanceBasedRelevancy;                        // 0x32D(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1BE1[0xA];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameNetworkManager");
		return Clss;
	}

};

// 0x8 (0x2A8 - 0x2A0)
// Class Engine.SpotLight
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                   SpotLightComponent;                                // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpotLight");
		return Clss;
	}

	void SetOuterConeAngle(float InNewOuterConeAngle);
	void SetInnerConeAngle(float InNewInnerConeAngle);
};

// 0x0 (0x2A8 - 0x2A8)
// Class Engine.GeneratedMeshAreaLight
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GeneratedMeshAreaLight");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.HapticFeedbackEffect_Base
class UHapticFeedbackEffect_Base : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HapticFeedbackEffect_Base");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.HapticFeedbackEffect_Buffer
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{
public:
	TArray<uint8>                                Amplitudes;                                        // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        SampleRate;                                        // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1BE9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HapticFeedbackEffect_Buffer");
		return Clss;
	}

};

// 0x110 (0x138 - 0x28)
// Class Engine.HapticFeedbackEffect_Curve
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{
public:
	struct FHapticFeedbackDetails_Curve          HapticDetails;                                     // 0x28(0x110)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HapticFeedbackEffect_Curve");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.HapticFeedbackEffect_SoundWave
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{
public:
	class USoundWave*                            SoundWave;                                         // 0x28(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseStereo;                                        // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1BEA[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HapticFeedbackEffect_SoundWave");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationDataController
class IAnimationDataController : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimationDataController");
		return Clss;
	}

	void UpdateCurveNamesFromSkeleton(class USkeleton* InSkeleton, enum class ERawCurveTrackTypes InSupportedCurveType, bool InbShouldTransact);
	bool SetTransformCurveKeys(struct FAnimationCurveIdentifier& InCurveId, TArray<struct FTransform>& InTransformValues, TArray<float>& InTimeKeys, bool InbShouldTransact);
	bool SetTransformCurveKey(struct FAnimationCurveIdentifier& InCurveId, float InTime, struct FTransform& InValue, bool InbShouldTransact);
	void SetPlayLength(float InLength, bool InbShouldTransact);
	void SetModel(class UAnimDataModel* InInModel);
	void SetFrameRate(const struct FFrameRate& InFrameRate, bool InbShouldTransact);
	bool SetCurveKeys(struct FAnimationCurveIdentifier& InCurveId, TArray<struct FRichCurveKey>& InCurveKeys, bool InbShouldTransact);
	bool SetCurveKey(struct FAnimationCurveIdentifier& InCurveId, struct FRichCurveKey& InKey, bool InbShouldTransact);
	bool SetCurveFlags(struct FAnimationCurveIdentifier& InCurveId, int32 InFlags, bool InbShouldTransact);
	bool SetCurveFlag(struct FAnimationCurveIdentifier& InCurveId, enum class EAnimAssetCurveFlags InFlag, bool InbState, bool InbShouldTransact);
	bool SetCurveColor(struct FAnimationCurveIdentifier& InCurveId, const struct FLinearColor& InColor, bool InbShouldTransact);
	bool SetBoneTrackKeys(class FName InBoneName, TArray<struct FVector>& InPositionalKeys, TArray<struct FQuat>& InRotationalKeys, TArray<struct FVector>& InScalingKeys, bool InbShouldTransact);
	bool ScaleCurve(struct FAnimationCurveIdentifier& InCurveId, float InOrigin, float InFactor, bool InbShouldTransact);
	void ResizePlayLength(float InNewLength, float InT0, float InT1, bool InbShouldTransact);
	void Resize(float InLength, float InT0, float InT1, bool InbShouldTransact);
	bool RenameCurve(struct FAnimationCurveIdentifier& InCurveToRenameId, struct FAnimationCurveIdentifier& InNewCurveId, bool InbShouldTransact);
	bool RemoveTransformCurveKey(struct FAnimationCurveIdentifier& InCurveId, float InTime, bool InbShouldTransact);
	bool RemoveCurveKey(struct FAnimationCurveIdentifier& InCurveId, float InTime, bool InbShouldTransact);
	bool RemoveCurve(struct FAnimationCurveIdentifier& InCurveId, bool InbShouldTransact);
	bool RemoveBoneTrack(class FName InBoneName, bool InbShouldTransact);
	bool RemoveAttributeKey(struct FAnimationAttributeIdentifier& InAttributeIdentifier, float InTime, bool InbShouldTransact);
	bool RemoveAttribute(struct FAnimationAttributeIdentifier& InAttributeIdentifier, bool InbShouldTransact);
	void RemoveAllCurvesOfType(enum class ERawCurveTrackTypes InSupportedCurveType, bool InbShouldTransact);
	void RemoveAllBoneTracks(bool InbShouldTransact);
	int32 RemoveAllAttributesForBone(class FName& InBoneName, bool InbShouldTransact);
	int32 RemoveAllAttributes(bool InbShouldTransact);
	void OpenBracket(class FText& InInTitle, bool InbShouldTransact);
	int32 InsertBoneTrack(class FName InBoneName, int32 InDesiredIndex, bool InbShouldTransact);
	class UAnimDataModel* GetModel();
	void FindOrAddCurveNamesOnSkeleton(class USkeleton* InSkeleton, enum class ERawCurveTrackTypes InSupportedCurveType, bool InbShouldTransact);
	bool DuplicateCurve(struct FAnimationCurveIdentifier& InCopyCurveId, struct FAnimationCurveIdentifier& InNewCurveId, bool InbShouldTransact);
	bool DuplicateAttribute(struct FAnimationAttributeIdentifier& InAttributeIdentifier, struct FAnimationAttributeIdentifier& InNewAttributeIdentifier, bool InbShouldTransact);
	void CloseBracket(bool InbShouldTransact);
	bool AddCurve(struct FAnimationCurveIdentifier& InCurveId, int32 InCurveFlags, bool InbShouldTransact);
	int32 AddBoneTrack(class FName InBoneName, bool InbShouldTransact);
	bool AddAttribute(struct FAnimationAttributeIdentifier& InAttributeIdentifier, bool InbShouldTransact);
};

// 0x28 (0x60 - 0x38)
// Class Engine.InGameAdManager
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	uint8                                        bShouldPauseWhileAdOpen : 1;                       // Mask: 0x1, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_FE : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1C89[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FDelegateProperty_>                   ClickedBannerDelegates;                            // 0x40(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<FDelegateProperty_>                   ClosedAdDelegates;                                 // 0x50(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InGameAdManager");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_ActorSubobject
class IInterface_ActorSubobject : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Interface_ActorSubobject");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_AssetUserData
class IInterface_AssetUserData : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Interface_AssetUserData");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_AsyncCompilation
class IInterface_AsyncCompilation : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Interface_AsyncCompilation");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.BoneReferenceSkeletonProvider
class IBoneReferenceSkeletonProvider : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BoneReferenceSkeletonProvider");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_CollisionDataProvider
class IInterface_CollisionDataProvider : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Interface_CollisionDataProvider");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_PostProcessVolume
class IInterface_PostProcessVolume : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Interface_PostProcessVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_PreviewMeshProvider
class IInterface_PreviewMeshProvider : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Interface_PreviewMeshProvider");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ISMPartitionInstanceManager
class IISMPartitionInstanceManager : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ISMPartitionInstanceManager");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ISMPartitionInstanceManagerProvider
class IISMPartitionInstanceManagerProvider : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ISMPartitionInstanceManagerProvider");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetTextLibrary
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetTextLibrary");
		return Clss;
	}

	class FText TextTrimTrailing(class FText& InInText);
	class FText TextTrimPrecedingAndTrailing(class FText& InInText);
	class FText TextTrimPreceding(class FText& InInText);
	class FText TextToUpper(class FText& InInText);
	class FText TextToLower(class FText& InInText);
	bool TextIsTransient(class FText& InInText);
	bool TextIsFromStringTable(class FText& InText);
	bool TextIsEmpty(class FText& InInText);
	bool TextIsCultureInvariant(class FText& InInText);
	class FText TextFromStringTable(class FName InTableId, const class FString& InKey);
	bool StringTableIdAndKeyFromText(class FText InText, class FName* InOutTableId, class FString* InOutKey);
	class FText PolyglotDataToText(struct FPolyglotTextData& InPolyglotData);
	bool NotEqual_TextText(class FText& InA, class FText& InB);
	bool NotEqual_IgnoreCase_TextText(class FText& InA, class FText& InB);
	void IsPolyglotDataValid(struct FPolyglotTextData& InPolyglotData, bool* InIsValid, class FText* InErrorMessage);
	class FText GetEmptyText();
	class FText Format(class FText InInPattern, const TArray<struct FFormatArgumentData>& InInArgs);
	bool FindTextInLocalizationTable(const class FString& InNamespace, const class FString& InKey, class FText* InOutText);
	bool EqualEqual_TextText(class FText& InA, class FText& InB);
	bool EqualEqual_IgnoreCase_TextText(class FText& InA, class FText& InB);
	class FText Conv_VectorToText(const struct FVector& InInVec);
	class FText Conv_Vector2dToText(const struct FVector2D& InInVec);
	class FText Conv_TransformToText(struct FTransform& InInTrans);
	class FString Conv_TextToString(class FText& InInText);
	class FText Conv_StringToText(const class FString& InInString);
	class FText Conv_RotatorToText(const struct FRotator& InInRot);
	class FText Conv_ObjectToText(class UObject* InInObj);
	class FText Conv_NameToText(class FName InInName);
	class FText Conv_IntToText(int32 InValue, bool InbAlwaysSign, bool InbUseGrouping, int32 InMinimumIntegralDigits, int32 InMaximumIntegralDigits);
	class FText Conv_Int64ToText(int64 InValue, bool InbAlwaysSign, bool InbUseGrouping, int32 InMinimumIntegralDigits, int32 InMaximumIntegralDigits);
	class FText Conv_DoubleToText(double InValue, enum class ERoundingMode InRoundingMode, bool InbAlwaysSign, bool InbUseGrouping, int32 InMinimumIntegralDigits, int32 InMaximumIntegralDigits, int32 InMinimumFractionalDigits, int32 InMaximumFractionalDigits);
	class FText Conv_ColorToText(const struct FLinearColor& InInColor);
	class FText Conv_ByteToText(uint8 InValue);
	class FText Conv_BoolToText(bool InInBool);
	class FText AsTimeZoneTime_DateTime(struct FDateTime& InInDateTime, const class FString& InInTimeZone);
	class FText AsTimeZoneDateTime_DateTime(struct FDateTime& InInDateTime, const class FString& InInTimeZone);
	class FText AsTimeZoneDate_DateTime(struct FDateTime& InInDateTime, const class FString& InInTimeZone);
	class FText AsTimespan_Timespan(struct FTimespan& InInTimespan);
	class FText AsTime_DateTime(struct FDateTime& InIn);
	class FText AsPercent_Float(float InValue, enum class ERoundingMode InRoundingMode, bool InbAlwaysSign, bool InbUseGrouping, int32 InMinimumIntegralDigits, int32 InMaximumIntegralDigits, int32 InMinimumFractionalDigits, int32 InMaximumFractionalDigits);
	class FText AsDateTime_DateTime(struct FDateTime& InIn);
	class FText AsDate_DateTime(struct FDateTime& InInDateTime);
	class FText AsCurrencyBase(int32 InBaseValue, const class FString& InCurrencyCode);
	class FText AsCurrency_Integer(int32 InValue, enum class ERoundingMode InRoundingMode, bool InbAlwaysSign, bool InbUseGrouping, int32 InMinimumIntegralDigits, int32 InMaximumIntegralDigits, int32 InMinimumFractionalDigits, int32 InMaximumFractionalDigits, const class FString& InCurrencyCode);
	class FText AsCurrency_Float(float InValue, enum class ERoundingMode InRoundingMode, bool InbAlwaysSign, bool InbUseGrouping, int32 InMinimumIntegralDigits, int32 InMaximumIntegralDigits, int32 InMinimumFractionalDigits, int32 InMaximumFractionalDigits, const class FString& InCurrencyCode);
};

// 0x0 (0x28 - 0x28)
// Class Engine.LevelInstanceEditorPivotInterface
class ILevelInstanceEditorPivotInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelInstanceEditorPivotInterface");
		return Clss;
	}

};

// 0x180 (0x1A8 - 0x28)
// Class Engine.LevelStreaming
class ULevelStreaming : public UObject
{
public:
	TSoftObjectPtr<class UWorld>                 WorldAsset;                                        // 0x28(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        StreamingPriority;                                 // 0x58(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  PackageNameToLoad;                                 // 0x5C(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D3C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          LODPackageNames;                                   // 0x68(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D3D[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            LevelTransform;                                    // 0x90(0x60)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bClientOnlyVisible;                                // 0xF0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D3E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LevelLODIndex;                                     // 0xF4(0x4)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_100 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bShouldBeVisible : 1;                              // Mask: 0x8, PropSize: 0x10xF8(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bShouldBeLoaded : 1;                               // Mask: 0x10, PropSize: 0x10xF8(0x1)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_101 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1D3F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bLocked : 1;                                       // Mask: 0x1, PropSize: 0x10xFB(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsStatic : 1;                                     // Mask: 0x2, PropSize: 0x10xFB(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldBlockOnLoad : 1;                            // Mask: 0x4, PropSize: 0x10xFB(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldBlockOnUnload : 1;                          // Mask: 0x8, PropSize: 0x10xFB(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableDistanceStreaming : 1;                     // Mask: 0x10, PropSize: 0x10xFB(0x1)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawOnLevelStatusMap : 1;                         // Mask: 0x20, PropSize: 0x10xFB(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_102 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	struct FLinearColor                          LevelColor;                                        // 0xFC(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D41[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ALevelStreamingVolume*>         EditorStreamingVolumes;                            // 0x110(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        MinTimeBetweenVolumeUnloadRequests;                // 0x120(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D43[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnLevelLoaded;                                     // 0x128(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLevelUnloaded;                                   // 0x138(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLevelShown;                                      // 0x148(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLevelHidden;                                     // 0x158(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ULevel*                                LoadedLevel;                                       // 0x168(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevel*                                PendingUnloadLevel;                                // 0x170(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1D47[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreaming");
		return Clss;
	}

	bool ShouldBeLoaded();
	void SetShouldBeVisible(bool InbInShouldBeVisible);
	void SetShouldBeLoaded(bool InbInShouldBeLoaded);
	void SetPriority(int32 InNewPriority);
	void SetLevelLODIndex(int32 InLODIndex);
	void SetIsRequestingUnloadAndRemoval(bool InbInIsRequestingUnloadAndRemoval);
	bool IsStreamingStatePending();
	bool IsLevelVisible();
	bool IsLevelLoaded();
	class FName GetWorldAssetPackageFName();
	class ULevel* GetLoadedLevel();
	class ALevelScriptActor* GetLevelScriptActor();
	bool GetIsRequestingUnloadAndRemoval();
	class ULevelStreaming* CreateInstance(const class FString& InUniqueInstanceName);
};

// 0x8 (0x1B0 - 0x1A8)
// Class Engine.LevelStreamingAlwaysLoaded
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
	uint8                                        Pad_1D4E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreamingAlwaysLoaded");
		return Clss;
	}

};

// 0x8 (0x1B0 - 0x1A8)
// Class Engine.LevelStreamingDynamic
class ULevelStreamingDynamic : public ULevelStreaming
{
public:
	uint8                                        bInitiallyLoaded : 1;                              // Mask: 0x1, PropSize: 0x10x1A8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInitiallyVisible : 1;                             // Mask: 0x2, PropSize: 0x10x1A8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInitiallyLoadedOnServer : 1;                      // Mask: 0x4, PropSize: 0x10x1A8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D67[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreamingDynamic");
		return Clss;
	}

	class ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(class UObject* InWorldContextObject, TSoftObjectPtr<class UWorld> InLevel, const struct FVector& InLocation, const struct FRotator& InRotation, bool* InbOutSuccess, const class FString& InOptionalLevelNameOverride, TSubclassOf<class ULevelStreamingDynamic> InOptionalLevelStreamingClass, bool InbLoadAsTempPackage);
	class ULevelStreamingDynamic* LoadLevelInstance(class UObject* InWorldContextObject, const class FString& InLevelName, const struct FVector& InLocation, const struct FRotator& InRotation, bool* InbOutSuccess, const class FString& InOptionalLevelNameOverride, TSubclassOf<class ULevelStreamingDynamic> InOptionalLevelStreamingClass, bool InbLoadAsTempPackage);
};

// 0x8 (0x1B0 - 0x1A8)
// Class Engine.LevelStreamingPersistent
class ULevelStreamingPersistent : public ULevelStreaming
{
public:
	uint8                                        Pad_1D6A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreamingPersistent");
		return Clss;
	}

};

// 0x18 (0x2E0 - 0x2C8)
// Class Engine.LevelStreamingVolume
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<class FName>                          StreamingLevelNames;                               // 0x2C8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                        bEditorPreVisOnly : 1;                             // Mask: 0x1, PropSize: 0x10x2D8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisabled : 1;                                     // Mask: 0x2, PropSize: 0x10x2D8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_103 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1D6B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EStreamingVolumeUsage             StreamingUsage;                                    // 0x2DC(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D6C[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreamingVolume");
		return Clss;
	}

};

// 0x38 (0x2D8 - 0x2A0)
// Class Engine.LightComponentBase
class ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                 LightGuid;                                         // 0x2A0(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Brightness;                                        // 0x2B0(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Intensity;                                         // 0x2B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                LightColor;                                        // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectsWorld : 1;                                 // Mask: 0x1, PropSize: 0x10x2BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastShadows : 1;                                   // Mask: 0x2, PropSize: 0x10x2BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastStaticShadows : 1;                             // Mask: 0x4, PropSize: 0x10x2BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastDynamicShadows : 1;                            // Mask: 0x8, PropSize: 0x10x2BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectTranslucentLighting : 1;                    // Mask: 0x10, PropSize: 0x10x2BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTransmission : 1;                                 // Mask: 0x20, PropSize: 0x10x2BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastVolumetricShadow : 1;                         // Mask: 0x40, PropSize: 0x10x2BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastDeepShadow : 1;                               // Mask: 0x80, PropSize: 0x10x2BC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastRaytracedShadow : 1;                          // Mask: 0x1, PropSize: 0x10x2BD(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_104 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1D7A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ECastRayTracedShadow              CastRaytracedShadow;                               // 0x2C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D7B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAffectReflection : 1;                             // Mask: 0x1, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectGlobalIllumination : 1;                     // Mask: 0x2, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_105 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1D7E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DeepShadowLayerDistribution;                       // 0x2C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IndirectLightingIntensity;                         // 0x2CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumetricScatteringIntensity;                     // 0x2D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SamplesPerPixel;                                   // 0x2D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightComponentBase");
		return Clss;
	}

	void SetSamplesPerPixel(int32 InNewValue);
	void SetCastVolumetricShadow(bool InbNewValue);
	void SetCastShadows(bool InbNewValue);
	void SetCastRaytracedShadows(enum class ECastRayTracedShadow InbNewValue);
	void SetCastRaytracedShadow(bool InbNewValue);
	void SetCastDeepShadow(bool InbNewValue);
	void SetAffectReflection(bool InbNewValue);
	void SetAffectGlobalIllumination(bool InbNewValue);
	struct FLinearColor GetLightColor();
};

// 0xB8 (0x2A8 - 0x1F0)
// Class Engine.Texture2D
class UTexture2D : public UTexture
{
public:
	int32                                        FirstResourceMemMip;                               // 0x1F0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTemporarilyDisableStreaming : 1;                  // Mask: 0x1, PropSize: 0x10x1F4(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_106 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ETextureAddress                   AddressX;                                          // 0x1F5(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   AddressY;                                          // 0x1F6(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D83[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FIntPoint                             ImportedSize;                                      // 0x1F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1D84[0xA8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Texture2D");
		return Clss;
	}

	int32 Blueprint_GetSizeY();
	int32 Blueprint_GetSizeX();
};

// 0x8 (0x2B0 - 0x2A8)
// Class Engine.LightMapTexture2D
class ULightMapTexture2D : public UTexture2D
{
public:
	uint8                                        Pad_1D85[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightMapTexture2D");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.LightmassPortal
class ALightmassPortal : public AActor
{
public:
	class ULightmassPortalComponent*             PortalComponent;                                   // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmassPortal");
		return Clss;
	}

};

// 0x10 (0x2B0 - 0x2A0)
// Class Engine.LightmassPortalComponent
class ULightmassPortalComponent : public USceneComponent
{
public:
	class UBoxComponent*                         PreviewBox;                                        // 0x2A0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D88[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmassPortalComponent");
		return Clss;
	}

};

// 0x210 (0x238 - 0x28)
// Class Engine.MapBuildDataRegistry
class UMapBuildDataRegistry : public UObject
{
public:
	enum class ELightingBuildQuality             LevelLightingQuality;                              // 0x28(0x1)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D8C[0x20F];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MapBuildDataRegistry");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.MaterialInterfaceEditorOnlyData
class UMaterialInterfaceEditorOnlyData : public UObject
{
public:
	uint8                                        Pad_1D8D[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInterfaceEditorOnlyData");
		return Clss;
	}

};

// 0x5D8 (0x618 - 0x40)
// Class Engine.MaterialEditorOnlyData
class UMaterialEditorOnlyData : public UMaterialInterfaceEditorOnlyData
{
public:
	struct FColorMaterialInput                   BaseColor;                                         // 0x40(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Metallic;                                          // 0x70(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Specular;                                          // 0xA0(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Roughness;                                         // 0xD0(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Anisotropy;                                        // 0x100(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVectorMaterialInput                  Normal;                                            // 0x130(0x38)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVectorMaterialInput                  Tangent;                                           // 0x168(0x38)(NoDestructor, NativeAccessSpecifierPublic)
	struct FColorMaterialInput                   EmissiveColor;                                     // 0x1A0(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Opacity;                                           // 0x1D0(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  OpacityMask;                                       // 0x200(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVectorMaterialInput                  WorldPositionOffset;                               // 0x230(0x38)(NoDestructor, NativeAccessSpecifierPublic)
	struct FColorMaterialInput                   SubsurfaceColor;                                   // 0x268(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  ClearCoat;                                         // 0x298(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  ClearCoatRoughness;                                // 0x2C8(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  AmbientOcclusion;                                  // 0x2F8(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Refraction;                                        // 0x328(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2MaterialInput                 CustomizedUVs[0x8];                                // 0x358(0x1C0)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMaterialAttributesInput              MaterialAttributes;                                // 0x518(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  PixelDepthOffset;                                  // 0x548(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FShadingModelMaterialInput            ShadingModelFromMaterialExpression;                // 0x578(0x28)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D99[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStrataMaterialInput                  FrontMaterial;                                     // 0x5A8(0x28)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D9A[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMaterialExpressionCollection         ExpressionCollection;                              // 0x5D8(0x30)(NativeAccessSpecifierPublic)
	TArray<struct FParameterGroupData>           ParameterGroupData;                                // 0x608(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialEditorOnlyData");
		return Clss;
	}

};

// 0x158 (0x1F0 - 0x98)
// Class Engine.Material
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                     PhysMaterial;                                      // 0x98(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterialMask*                 PhysMaterialMask;                                  // 0xA0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                     PhysicalMaterialMap[0x8];                          // 0xA8(0x40)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPhysicalMaterial*>             RenderTracePhysicalMaterialOutputs;                // 0xE8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	enum class EMaterialDomain                   MaterialDomain;                                    // 0xF8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EBlendMode                        BlendMode;                                         // 0xF9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EStrataBlendMode                  StrataBlendMode;                                   // 0xFA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDecalBlendMode                   DecalBlendMode;                                    // 0xFB(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialDecalResponse            MaterialDecalResponse;                             // 0xFC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1D9E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMaterialOverrideNanite               NaniteOverrideMaterial;                            // 0x100(0x40)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint32                                       CachedConnectedInputs;                             // 0x140(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialShadingModel             ShadingModel;                                      // 0x144(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bCastDynamicShadowAsMasked : 1;                    // Mask: 0x1, PropSize: 0x10x145(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_107 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	struct FMaterialShadingModelField            ShadingModels;                                     // 0x146(0x2)(NoDestructor, AssetRegistrySearchable, NativeAccessSpecifierPrivate)
	float                                        OpacityMaskClipValue;                              // 0x148(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableSeparateTranslucency : 1;                   // Mask: 0x1, PropSize: 0x10x14C(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bEnableResponsiveAA : 1;                           // Mask: 0x2, PropSize: 0x10x14C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bScreenSpaceReflections : 1;                       // Mask: 0x4, PropSize: 0x10x14C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bContactShadows : 1;                               // Mask: 0x8, PropSize: 0x10x14C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        TwoSided : 1;                                      // Mask: 0x10, PropSize: 0x10x14C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DitheredLODTransition : 1;                         // Mask: 0x20, PropSize: 0x10x14C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DitherOpacityMask : 1;                             // Mask: 0x40, PropSize: 0x10x14C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowNegativeEmissiveColor : 1;                   // Mask: 0x80, PropSize: 0x10x14C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialTranslucencyPass         TranslucencyPass;                                  // 0x14D(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETranslucencyLightingMode         TranslucencyLightingMode;                          // 0x14E(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMobileSeparateTranslucency : 1;             // Mask: 0x1, PropSize: 0x10x14F(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_108 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	int32                                        NumCustomizedUVs;                                  // 0x150(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucencyDirectionalLightingIntensity;          // 0x154(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentShadowDensityScale;                     // 0x158(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentSelfShadowDensityScale;                 // 0x15C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentSelfShadowSecondDensityScale;           // 0x160(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentSelfShadowSecondOpacity;                // 0x164(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentBackscatteringExponent;                 // 0x168(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          TranslucentMultipleScatteringExtinction;           // 0x16C(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentShadowStartOffset;                      // 0x17C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableDepthTest : 1;                             // Mask: 0x1, PropSize: 0x10x180(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWriteOnlyAlpha : 1;                               // Mask: 0x2, PropSize: 0x10x180(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateSphericalParticleNormals : 1;             // Mask: 0x4, PropSize: 0x10x180(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTangentSpaceNormal : 1;                           // Mask: 0x8, PropSize: 0x10x180(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseEmissiveForDynamicAreaLighting : 1;            // Mask: 0x10, PropSize: 0x10x180(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedAsSpecialEngineMaterial : 1;                  // Mask: 0x20, PropSize: 0x10x180(0x1)(DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithSkeletalMesh : 1;                         // Mask: 0x40, PropSize: 0x10x180(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithEditorCompositing : 1;                    // Mask: 0x80, PropSize: 0x10x180(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithParticleSprites : 1;                      // Mask: 0x1, PropSize: 0x10x181(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithBeamTrails : 1;                           // Mask: 0x2, PropSize: 0x10x181(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithMeshParticles : 1;                        // Mask: 0x4, PropSize: 0x10x181(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithNiagaraSprites : 1;                       // Mask: 0x8, PropSize: 0x10x181(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithNiagaraRibbons : 1;                       // Mask: 0x10, PropSize: 0x10x181(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithNiagaraMeshParticles : 1;                 // Mask: 0x20, PropSize: 0x10x181(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithGeometryCache : 1;                        // Mask: 0x40, PropSize: 0x10x181(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithStaticLighting : 1;                       // Mask: 0x80, PropSize: 0x10x181(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithMorphTargets : 1;                         // Mask: 0x1, PropSize: 0x10x182(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithSplineMeshes : 1;                         // Mask: 0x2, PropSize: 0x10x182(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithInstancedStaticMeshes : 1;                // Mask: 0x4, PropSize: 0x10x182(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithGeometryCollections : 1;                  // Mask: 0x8, PropSize: 0x10x182(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsesDistortion : 1;                               // Mask: 0x10, PropSize: 0x10x182(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithClothing : 1;                             // Mask: 0x20, PropSize: 0x10x182(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_109 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1DAC[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUsedWithWater : 1;                                // Mask: 0x1, PropSize: 0x10x184(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithHairStrands : 1;                          // Mask: 0x2, PropSize: 0x10x184(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithLidarPointCloud : 1;                      // Mask: 0x4, PropSize: 0x10x184(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithVirtualHeightfieldMesh : 1;               // Mask: 0x8, PropSize: 0x10x184(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithNanite : 1;                               // Mask: 0x10, PropSize: 0x10x184(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10A : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1DAE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUsedWithUI : 1;                                   // Mask: 0x1, PropSize: 0x10x188(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutomaticallySetUsageInEditor : 1;                // Mask: 0x2, PropSize: 0x10x188(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFullyRough : 1;                                   // Mask: 0x4, PropSize: 0x10x188(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFullPrecision : 1;                             // Mask: 0x8, PropSize: 0x10x188(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10B : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMaterialFloatPrecisionMode       FloatPrecisionMode;                                // 0x189(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseLightmapDirectionality : 1;                    // Mask: 0x1, PropSize: 0x10x18A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileEnableHighQualityBRDF : 1;                  // Mask: 0x2, PropSize: 0x10x18A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseAlphaToCoverage : 1;                           // Mask: 0x4, PropSize: 0x10x18A(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10C : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1DB2[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForwardRenderUsePreintegratedGFForSimpleIBL : 1;  // Mask: 0x1, PropSize: 0x10x18C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1DB4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseHQForwardReflections : 1;                      // Mask: 0x1, PropSize: 0x10x190(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForwardBlendsSkyLightCubemaps : 1;                // Mask: 0x2, PropSize: 0x10x190(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePlanarForwardReflections : 1;                  // Mask: 0x4, PropSize: 0x10x190(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNormalCurvatureToRoughness : 1;                   // Mask: 0x8, PropSize: 0x10x190(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        AllowTranslucentCustomDepthWrites : 1;             // Mask: 0x10, PropSize: 0x10x190(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Wireframe : 1;                                     // Mask: 0x20, PropSize: 0x10x190(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10E : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMaterialShadingRate              ShadingRate;                                       // 0x191(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanMaskedBeAssumedOpaque : 1;                     // Mask: 0x1, PropSize: 0x10x192(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsMasked : 1;                                     // Mask: 0x2, PropSize: 0x10x192(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsPreviewMaterial : 1;                            // Mask: 0x4, PropSize: 0x10x192(0x1)(Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsFunctionPreviewMaterial : 1;                    // Mask: 0x8, PropSize: 0x10x192(0x1)(Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseMaterialAttributes : 1;                        // Mask: 0x10, PropSize: 0x10x192(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableExecWire : 1;                               // Mask: 0x20, PropSize: 0x10x192(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableNewHLSLGenerator : 1;                       // Mask: 0x40, PropSize: 0x10x192(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastRayTracedShadows : 1;                         // Mask: 0x80, PropSize: 0x10x192(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseTranslucencyVertexFog : 1;                     // Mask: 0x1, PropSize: 0x10x193(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyCloudFogging : 1;                            // Mask: 0x2, PropSize: 0x10x193(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsSky : 1;                                        // Mask: 0x4, PropSize: 0x10x193(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bComputeFogPerPixel : 1;                           // Mask: 0x8, PropSize: 0x10x193(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOutputTranslucentVelocity : 1;                    // Mask: 0x10, PropSize: 0x10x193(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowDevelopmentShaderCompile : 1;                // Mask: 0x20, PropSize: 0x10x193(0x1)(Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsMaterialEditorStatsMaterial : 1;                // Mask: 0x40, PropSize: 0x10x193(0x1)(Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10F : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EBlendableLocation                BlendableLocation;                                 // 0x194(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BlendableOutputAlpha : 1;                          // Mask: 0x1, PropSize: 0x10x195(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableStencilTest : 1;                            // Mask: 0x2, PropSize: 0x10x195(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_110 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMaterialStencilCompare           StencilCompare;                                    // 0x196(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        StencilRefValue;                                   // 0x197(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERefractionMode                   RefractionMode;                                    // 0x198(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DBB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BlendablePriority;                                 // 0x19C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsBlendable : 1;                                  // Mask: 0x1, PropSize: 0x10x1A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_111 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1DBC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       UsageFlagWarnings;                                 // 0x1A4(0x4)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RefractionDepthBias;                               // 0x1A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 StateId;                                           // 0x1AC(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DBD[0x34];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Material");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionAbs
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAbs");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionAbsorptionMediumMaterialOutput
class UMaterialExpressionAbsorptionMediumMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      TransmittanceColor;                                // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAbsorptionMediumMaterialOutput");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionActorPositionWS
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionActorPositionWS");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionAdd
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAdd");
		return Clss;
	}

};

// 0x8 (0x248 - 0x240)
// Class Engine.MaterialExpressionAntialiasedTextureMask
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                        Threshold;                                         // 0x240(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureColorChannel              Channel;                                           // 0x244(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DC0[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAntialiasedTextureMask");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionAppendVector
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAppendVector");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArccosine
class UMaterialExpressionArccosine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArccosine");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArccosineFast
class UMaterialExpressionArccosineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArccosineFast");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArcsine
class UMaterialExpressionArcsine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArcsine");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArcsineFast
class UMaterialExpressionArcsineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArcsineFast");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArctangent
class UMaterialExpressionArctangent : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArctangent");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionArctangent2
class UMaterialExpressionArctangent2 : public UMaterialExpression
{
public:
	struct FExpressionInput                      Y;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      X;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArctangent2");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionArctangent2Fast
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Y;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      X;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArctangent2Fast");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionArctangentFast
class UMaterialExpressionArctangentFast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArctangentFast");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionAtmosphericFogColor
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAtmosphericFogColor");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionAtmosphericLightColor
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAtmosphericLightColor");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionAtmosphericLightVector
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAtmosphericLightVector");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionBentNormalCustomOutput
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionBentNormalCustomOutput");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionBinaryOp
class UMaterialExpressionBinaryOp : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionBinaryOp");
		return Clss;
	}

};

// 0x0 (0x108 - 0x108)
// Class Engine.MaterialExpressionLess
class UMaterialExpressionLess : public UMaterialExpressionBinaryOp
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLess");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionBlackBody
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                      Temp;                                              // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionBlackBody");
		return Clss;
	}

};

// 0x90 (0x140 - 0xB0)
// Class Engine.MaterialExpressionBlendMaterialAttributes
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              A;                                                 // 0xB0(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMaterialAttributesInput              B;                                                 // 0xE0(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Alpha;                                             // 0x110(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class EMaterialAttributeBlend           PixelAttributeBlendType;                           // 0x138(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialAttributeBlend           VertexAttributeBlendType;                          // 0x139(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DC6[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionBlendMaterialAttributes");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionBreakMaterialAttributes
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              MaterialAttributes;                                // 0xB0(0x30)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionBreakMaterialAttributes");
		return Clss;
	}

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionBumpOffset
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinate;                                        // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Height;                                            // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      HeightRatioInput;                                  // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        HeightRatio;                                       // 0x128(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReferencePlane;                                    // 0x12C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       ConstCoordinate;                                   // 0x130(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DC8[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionBumpOffset");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionCameraPositionWS
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCameraPositionWS");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionCameraVectorWS
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCameraVectorWS");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionCeil
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCeil");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionParameter
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	class FName                                  ParameterName;                                     // 0xB0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ExpressionGUID;                                    // 0xB8(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Group;                                             // 0xC8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SortPriority;                                      // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DCC[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParameter");
		return Clss;
	}

};

// 0x78 (0x150 - 0xD8)
// Class Engine.MaterialExpressionVectorParameter
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                          DefaultValue;                                      // 0xD8(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseCustomPrimitiveData;                           // 0xE8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        PrimitiveDataIndex;                                // 0xE9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DCE[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FParameterChannelNames                ChannelNames;                                      // 0xF0(0x60)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVectorParameter");
		return Clss;
	}

};

// 0x30 (0x180 - 0x150)
// Class Engine.MaterialExpressionChannelMaskParameter
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{
public:
	enum class EChannelMaskParameterColor        MaskChannel;                                       // 0x150(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DCF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0x158(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionChannelMaskParameter");
		return Clss;
	}

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionClamp
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Min;                                               // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Max;                                               // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class EClampMode                        ClampMode;                                         // 0x128(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DD2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinDefault;                                        // 0x12C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDefault;                                        // 0x130(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DD3[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionClamp");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionClearCoatNormalCustomOutput");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionCloudSampleAttribute
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCloudSampleAttribute");
		return Clss;
	}

};

// 0x20 (0xD0 - 0xB0)
// Class Engine.MaterialExpressionCollectionParameter
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*          Collection;                                        // 0xB0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ParameterName;                                     // 0xB8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ParameterId;                                       // 0xC0(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCollectionParameter");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionComment
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int32                                        SizeX;                                             // 0xB0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeY;                                             // 0xB4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Text;                                              // 0xB8(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          CommentColor;                                      // 0xC8(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FontSize;                                          // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DD5[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionComment");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionComponentMask
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        R : 1;                                             // Mask: 0x1, PropSize: 0x10xD8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        G : 1;                                             // Mask: 0x2, PropSize: 0x10xD8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        B : 1;                                             // Mask: 0x4, PropSize: 0x10xD8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        A : 1;                                             // Mask: 0x8, PropSize: 0x10xD8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DD6[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionComponentMask");
		return Clss;
	}

};

// 0x20 (0xD0 - 0xB0)
// Class Engine.MaterialExpressionComposite
class UMaterialExpressionComposite : public UMaterialExpression
{
public:
	class FString                                SubgraphName;                                      // 0xB0(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialExpressionPinBase*            InputExpressions;                                  // 0xC0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialExpressionPinBase*            OutputExpressions;                                 // 0xC8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionComposite");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionConstant
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                        R;                                                 // 0xB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DD8[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstant");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionConstant2Vector
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                        R;                                                 // 0xB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        G;                                                 // 0xB4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstant2Vector");
		return Clss;
	}

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.MaterialExpressionConstant3Vector
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                          Constant;                                          // 0xB0(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstant3Vector");
		return Clss;
	}

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.MaterialExpressionConstant4Vector
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                          Constant;                                          // 0xB0(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstant4Vector");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionConstantBiasScale
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        Bias;                                              // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Scale;                                             // 0xDC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstantBiasScale");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionCosine
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        Period;                                            // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DD9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCosine");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionCrossProduct
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCrossProduct");
		return Clss;
	}

};

// 0x10 (0xE8 - 0xD8)
// Class Engine.MaterialExpressionScalarParameter
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                        DefaultValue;                                      // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseCustomPrimitiveData;                           // 0xDC(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        PrimitiveDataIndex;                                // 0xDD(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DDE[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SliderMin;                                         // 0xE0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SliderMax;                                         // 0xE4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionScalarParameter");
		return Clss;
	}

};

// 0x38 (0x120 - 0xE8)
// Class Engine.MaterialExpressionCurveAtlasRowParameter
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{
public:
	class UCurveLinearColor*                     Curve;                                             // 0xE8(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveLinearColorAtlas*                Atlas;                                             // 0xF0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                      InputTime;                                         // 0xF8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCurveAtlasRowParameter");
		return Clss;
	}

};

// 0x68 (0x118 - 0xB0)
// Class Engine.MaterialExpressionCustom
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	class FString                                Code;                                              // 0xB0(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECustomMaterialOutputType         OutputType;                                        // 0xC0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DE1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                Description;                                       // 0xC8(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomInput>                  Inputs;                                            // 0xD8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomOutput>                 AdditionalOutputs;                                 // 0xE8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomDefine>                 AdditionalDefines;                                 // 0xF8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        IncludeFilePaths;                                  // 0x108(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCustom");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionDBufferTexture
class UMaterialExpressionDBufferTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class EDBufferTextureId                 DBufferTextureId;                                  // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DE3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDBufferTexture");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDDX
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                      Value;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDDX");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDDY
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                      Value;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDDY");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDecalDerivative
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDecalDerivative");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDecalLifetimeOpacity
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDecalLifetimeOpacity");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionDecalMipmapLevel
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                      TextureSize;                                       // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstWidth;                                        // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstHeight;                                       // 0xDC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDecalMipmapLevel");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDeltaTime
class UMaterialExpressionDeltaTime : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDeltaTime");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionDepthFade
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                      InOpacity;                                         // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      FadeDistance;                                      // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        OpacityDefault;                                    // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeDistanceDefault;                               // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDepthFade");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionDepthOfFieldFunction
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	enum class EDepthOfFieldFunctionValue        FunctionValue;                                     // 0xB0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DE7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Depth;                                             // 0xB8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDepthOfFieldFunction");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDeriveNormalZ
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                      InXY;                                              // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDeriveNormalZ");
		return Clss;
	}

};

// 0x60 (0x110 - 0xB0)
// Class Engine.MaterialExpressionDesaturation
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Fraction;                                          // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                          LuminanceFactors;                                  // 0x100(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDesaturation");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionDistance
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDistance");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionDistanceCullFade
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDistanceCullFade");
		return Clss;
	}

};

// 0xB8 (0x168 - 0xB0)
// Class Engine.MaterialExpressionDistanceFieldApproxAO
class UMaterialExpressionDistanceFieldApproxAO : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Normal;                                            // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      BaseDistance;                                      // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        BaseDistanceDefault;                               // 0x128(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DE9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Radius;                                            // 0x130(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        RadiusDefault;                                     // 0x158(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumSteps;                                          // 0x15C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StepScaleDefault;                                  // 0x160(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DEB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDistanceFieldApproxAO");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDistanceFieldGradient
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDistanceFieldGradient");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionDistanceFieldsRenderingSwitch
class UMaterialExpressionDistanceFieldsRenderingSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      No;                                                // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Yes;                                               // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDistanceFieldsRenderingSwitch");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDistanceToNearestSurface
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDistanceToNearestSurface");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionDivide
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDivide");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionDotProduct
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDotProduct");
		return Clss;
	}

};

// 0x28 (0x100 - 0xD8)
// Class Engine.MaterialExpressionDoubleVectorParameter
class UMaterialExpressionDoubleVectorParameter : public UMaterialExpressionParameter
{
public:
	uint8                                        Pad_1DF0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector4d                             DefaultValue;                                      // 0xE0(0x20)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDoubleVectorParameter");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionDynamicParameter
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<class FString>                        ParamNames;                                        // 0xB0(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                          DefaultValue;                                      // 0xC0(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       ParameterIndex;                                    // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DF1[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDynamicParameter");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionExecBegin
class UMaterialExpressionExecBegin : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                 Exec;                                              // 0xB0(0x8)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionExecBegin");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionExecEnd
class UMaterialExpressionExecEnd : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionExecEnd");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionEyeAdaptation
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionEyeAdaptation");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionEyeAdaptationInverse
class UMaterialExpressionEyeAdaptationInverse : public UMaterialExpression
{
public:
	struct FExpressionInput                      LightValueInput;                                   // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      AlphaInput;                                        // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionEyeAdaptationInverse");
		return Clss;
	}

};

// 0xF0 (0x1A0 - 0xB0)
// Class Engine.MaterialExpressionFeatureLevelSwitch
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Inputs[0x5];                                       // 0xD8(0xC8)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFeatureLevelSwitch");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionFloor
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFloor");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionFmod
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFmod");
		return Clss;
	}

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.MaterialExpressionFontSample
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                 Font;                                              // 0xB0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FontTexturePage;                                   // 0xB8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DFA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFontSample");
		return Clss;
	}

};

// 0x28 (0xE8 - 0xC0)
// Class Engine.MaterialExpressionFontSampleParameter
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	class FName                                  ParameterName;                                     // 0xC0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ExpressionGUID;                                    // 0xC8(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Group;                                             // 0xD8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SortPriority;                                      // 0xE0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DFD[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFontSampleParameter");
		return Clss;
	}

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionForLoop
class UMaterialExpressionForLoop : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                 LoopBody;                                          // 0xB0(0x8)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionExecOutput                 Completed;                                         // 0xB8(0x8)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      StartIndex;                                        // 0xC0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      EndIndex;                                          // 0xE8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      IndexStep;                                         // 0x110(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionForLoop");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionFrac
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFrac");
		return Clss;
	}

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionFresnel
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                      ExponentIn;                                        // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        Exponent;                                          // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1DFF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      BaseReflectFractionIn;                             // 0xE0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        BaseReflectFraction;                               // 0x108(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E00[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Normal;                                            // 0x110(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFresnel");
		return Clss;
	}

};

// 0xB0 (0x160 - 0xB0)
// Class Engine.MaterialExpressionFunctionInput
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                      Preview;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                  InputName;                                         // 0xD8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Description;                                       // 0xE0(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ID;                                                // 0xF0(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFunctionInputType                InputType;                                         // 0x100(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E02[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector4f                             PreviewValue;                                      // 0x110(0x10)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePreviewValueAsDefault : 1;                     // Mask: 0x1, PropSize: 0x10x120(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_112 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E04[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SortPriority;                                      // 0x124(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCompilingFunctionPreview : 1;                     // Mask: 0x1, PropSize: 0x10x128(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E05[0x37];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFunctionInput");
		return Clss;
	}

};

// 0x60 (0x110 - 0xB0)
// Class Engine.MaterialExpressionFunctionOutput
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	class FName                                  OutputName;                                        // 0xB0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Description;                                       // 0xB8(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SortPriority;                                      // 0xC8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E08[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      A;                                                 // 0xD0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bLastPreviewed : 1;                                // Mask: 0x1, PropSize: 0x10xF8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_113 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E0A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 ID;                                                // 0xFC(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E0B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFunctionOutput");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionGenericConstant
class UMaterialExpressionGenericConstant : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionGenericConstant");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionConstantDouble
class UMaterialExpressionConstantDouble : public UMaterialExpressionGenericConstant
{
public:
	double                                       Value;                                             // 0xB0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstantDouble");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionGetLocal
class UMaterialExpressionGetLocal : public UMaterialExpression
{
public:
	class FName                                  LocalName;                                         // 0xB0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionGetLocal");
		return Clss;
	}

};

// 0x40 (0xF0 - 0xB0)
// Class Engine.MaterialExpressionGetMaterialAttributes
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              MaterialAttributes;                                // 0xB0(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                         AttributeGetTypes;                                 // 0xE0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionGetMaterialAttributes");
		return Clss;
	}

};

// 0x78 (0x128 - 0xB0)
// Class Engine.MaterialExpressionGIReplace
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      StaticIndirect;                                    // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      DynamicIndirect;                                   // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionGIReplace");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionHairAttributes
class UMaterialExpressionHairAttributes : public UMaterialExpression
{
public:
	uint8                                        bUseTangentSpace : 1;                              // Mask: 0x1, PropSize: 0x10xB0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E0C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionHairAttributes");
		return Clss;
	}

};

// 0x78 (0x128 - 0xB0)
// Class Engine.MaterialExpressionHairColor
class UMaterialExpressionHairColor : public UMaterialExpression
{
public:
	struct FExpressionInput                      Melanin;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Redness;                                           // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      DyeColor;                                          // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionHairColor");
		return Clss;
	}

};

// 0xD8 (0x188 - 0xB0)
// Class Engine.MaterialExpressionIf
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      AGreaterThanB;                                     // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      AEqualsB;                                          // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ALessThanB;                                        // 0x150(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        EqualsThreshold;                                   // 0x178(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x17C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstAEqualsB;                                     // 0x180(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E0F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionIf");
		return Clss;
	}

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionIfThenElse
class UMaterialExpressionIfThenElse : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                 Then;                                              // 0xB0(0x8)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionExecOutput                 Else;                                              // 0xB8(0x8)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Condition;                                         // 0xC0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionIfThenElse");
		return Clss;
	}

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionInverseLinearInterpolate
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Value;                                             // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0x128(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x12C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstValue;                                        // 0x130(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bClampResult;                                      // 0x134(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E18[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionInverseLinearInterpolate");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionIsOrthographic
class UMaterialExpressionIsOrthographic : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionIsOrthographic");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionLightmapUVs
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLightmapUVs");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionLightmassReplace
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Realtime;                                          // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Lightmass;                                         // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLightmassReplace");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionLightVector
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLightVector");
		return Clss;
	}

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionLinearInterpolate
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Alpha;                                             // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0x128(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x12C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstAlpha;                                        // 0x130(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E1A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLinearInterpolate");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionLogarithm10
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{
public:
	struct FExpressionInput                      X;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLogarithm10");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionLogarithm2
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                      X;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLogarithm2");
		return Clss;
	}

};

// 0x410 (0x4C0 - 0xB0)
// Class Engine.MaterialExpressionMakeMaterialAttributes
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Metallic;                                          // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Roughness;                                         // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Anisotropy;                                        // 0x150(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      EmissiveColor;                                     // 0x178(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Opacity;                                           // 0x1A0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      OpacityMask;                                       // 0x1C8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Normal;                                            // 0x1F0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Tangent;                                           // 0x218(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      WorldPositionOffset;                               // 0x240(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      SubsurfaceColor;                                   // 0x268(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ClearCoat;                                         // 0x290(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ClearCoatRoughness;                                // 0x2B8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      AmbientOcclusion;                                  // 0x2E0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Refraction;                                        // 0x308(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      CustomizedUVs[0x8];                                // 0x330(0x140)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      PixelDepthOffset;                                  // 0x470(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ShadingModel;                                      // 0x498(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMakeMaterialAttributes");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionMapARPassthroughCameraUV
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMapARPassthroughCameraUV");
		return Clss;
	}

};

// 0x168 (0x218 - 0xB0)
// Class Engine.MaterialExpressionMaterialAttributeLayers
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              Input;                                             // 0xB0(0x30)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMaterialLayersFunctions              DefaultLayers;                                     // 0xE0(0x100)(Edit, NativeAccessSpecifierPublic)
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                                      // 0x1E0(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                        NumActiveLayerCallers;                             // 0x1F0(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E24[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                                      // 0x1F8(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                        NumActiveBlendCallers;                             // 0x208(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsLayerGraphBuilt;                                // 0x20C(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E25[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMaterialAttributeLayers");
		return Clss;
	}

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionMaterialFunctionCall
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunctionInterface*            MaterialFunction;                                  // 0xB0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFunctionExpressionInput>      FunctionInputs;                                    // 0xB8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFunctionExpressionOutput>     FunctionOutputs;                                   // 0xC8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMaterialParameterInfo                FunctionParameterInfo;                             // 0xD8(0x10)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMaterialFunctionCall");
		return Clss;
	}

};

// 0x0 (0x110 - 0x110)
// Class Engine.MaterialExpressionMaterialLayerOutput
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMaterialLayerOutput");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionMaterialProxyReplace
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Realtime;                                          // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      MaterialProxy;                                     // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMaterialProxyReplace");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionMax
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMax");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionMin
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMin");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionMultiply
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMultiply");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionRerouteBase
class UMaterialExpressionRerouteBase : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRerouteBase");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionNamedRerouteBase
class UMaterialExpressionNamedRerouteBase : public UMaterialExpressionRerouteBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionNamedRerouteBase");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionNamedRerouteDeclaration
class UMaterialExpressionNamedRerouteDeclaration : public UMaterialExpressionNamedRerouteBase
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                  Name;                                              // 0xD8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          NodeColor;                                         // 0xE0(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 VariableGuid;                                      // 0xF0(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionNamedRerouteDeclaration");
		return Clss;
	}

};

// 0x18 (0xC8 - 0xB0)
// Class Engine.MaterialExpressionNamedRerouteUsage
class UMaterialExpressionNamedRerouteUsage : public UMaterialExpressionNamedRerouteBase
{
public:
	class UMaterialExpressionNamedRerouteDeclaration* Declaration;                                       // 0xB0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 DeclarationGuid;                                   // 0xB8(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionNamedRerouteUsage");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionNaniteReplace
class UMaterialExpressionNaniteReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Nanite;                                            // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionNaniteReplace");
		return Clss;
	}

};

// 0x78 (0x128 - 0xB0)
// Class Engine.MaterialExpressionNoise
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      FilterWidth;                                       // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        Scale;                                             // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Quality;                                           // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENoiseFunction                    NoiseFunction;                                     // 0x108(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E33[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bTurbulence : 1;                                   // Mask: 0x1, PropSize: 0x10x10C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_114 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E35[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Levels;                                            // 0x110(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutputMin;                                         // 0x114(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutputMax;                                         // 0x118(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LevelScale;                                        // 0x11C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTiling : 1;                                       // Mask: 0x1, PropSize: 0x10x120(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_115 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E38[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       RepeatSize;                                        // 0x124(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionNoise");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionNormalize
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                      VectorInput;                                       // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionNormalize");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionObjectBounds
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionObjectBounds");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionObjectOrientation
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionObjectOrientation");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionObjectPositionWS
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionObjectPositionWS");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionObjectRadius
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionObjectRadius");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionOneMinus
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionOneMinus");
		return Clss;
	}

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionPanner
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinate;                                        // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Time;                                              // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Speed;                                             // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        SpeedX;                                            // 0x128(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedY;                                            // 0x12C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       ConstCoordinate;                                   // 0x130(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFractionalPart;                                   // 0x134(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E3E[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPanner");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleColor
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleColor");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleDirection
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleDirection");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleMacroUV
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleMacroUV");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleMotionBlurFade
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleMotionBlurFade");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticlePositionWS
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticlePositionWS");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleRadius
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleRadius");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleRandom
class UMaterialExpressionParticleRandom : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleRandom");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleRelativeTime
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleRelativeTime");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleSize
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleSize");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleSpeed
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleSpeed");
		return Clss;
	}

};

// 0x8 (0x1C0 - 0x1B8)
// Class Engine.MaterialExpressionParticleSubUV
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	uint8                                        bBlend : 1;                                        // Mask: 0x1, PropSize: 0x10x1B8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E40[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleSubUV");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionParticleSubUVProperties
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleSubUVProperties");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionPathTracingQualitySwitch
class UMaterialExpressionPathTracingQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Normal;                                            // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      PathTraced;                                        // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPathTracingQualitySwitch");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceCustomData
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{
public:
	struct FExpressionInput                      DefaultValue;                                      // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstDefaultValue;                                 // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       DataIndex;                                         // 0xDC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPerInstanceCustomData");
		return Clss;
	}

};

// 0x40 (0xF0 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceCustomData3Vector
class UMaterialExpressionPerInstanceCustomData3Vector : public UMaterialExpression
{
public:
	struct FExpressionInput                      DefaultValue;                                      // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                          ConstDefaultValue;                                 // 0xD8(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       DataIndex;                                         // 0xE8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E46[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPerInstanceCustomData3Vector");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceFadeAmount
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPerInstanceFadeAmount");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPerInstanceRandom
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPerInstanceRandom");
		return Clss;
	}

};

// 0x18 (0xC8 - 0xB0)
// Class Engine.MaterialExpressionPinBase
class UMaterialExpressionPinBase : public UMaterialExpression
{
public:
	TArray<struct FCompositeReroute>             ReroutePins;                                       // 0xB0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EEdGraphPinDirection              PinDirection;                                      // 0xC0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E4A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPinBase");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPixelDepth
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPixelDepth");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPixelNormalWS
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPixelNormalWS");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionPower
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                      Base;                                              // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Exponent;                                          // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstExponent;                                     // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E4C[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPower");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPrecomputedAOMask
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPrecomputedAOMask");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPreSkinnedLocalBounds
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPreSkinnedLocalBounds");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPreSkinnedNormal
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPreSkinnedNormal");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionPreSkinnedPosition
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPreSkinnedPosition");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionPreviousFrameSwitch
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      CurrentFrame;                                      // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      PreviousFrame;                                     // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPreviousFrameSwitch");
		return Clss;
	}

};

// 0xC8 (0x178 - 0xB0)
// Class Engine.MaterialExpressionQualitySwitch
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Inputs[0x4];                                       // 0xD8(0xA0)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionQualitySwitch");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionRayTracingQualitySwitch
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Normal;                                            // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      RayTraced;                                         // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRayTracingQualitySwitch");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionReflectionCapturePassSwitch
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Reflection;                                        // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionReflectionCapturePassSwitch");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionReflectionVectorWS
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                      CustomWorldNormal;                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bNormalizeCustomWorldNormal : 1;                   // Mask: 0x1, PropSize: 0x10xD8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E56[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionReflectionVectorWS");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionReroute
class UMaterialExpressionReroute : public UMaterialExpressionRerouteBase
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionReroute");
		return Clss;
	}

};

// 0xA8 (0x158 - 0xB0)
// Class Engine.MaterialExpressionRotateAboutAxis
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                      NormalizedRotationAxis;                            // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      RotationAngle;                                     // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      PivotPoint;                                        // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Position;                                          // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        Period;                                            // 0x150(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E57[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRotateAboutAxis");
		return Clss;
	}

};

// 0x60 (0x110 - 0xB0)
// Class Engine.MaterialExpressionRotator
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinate;                                        // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Time;                                              // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        CenterX;                                           // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CenterY;                                           // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Speed;                                             // 0x108(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       ConstCoordinate;                                   // 0x10C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRotator");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionRound
class UMaterialExpressionRound : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRound");
		return Clss;
	}

};

// 0x118 (0x1C8 - 0xB0)
// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Specular;                                          // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Roughness;                                         // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Normal;                                            // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      WorldHeight;                                       // 0x150(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Opacity;                                           // 0x178(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Mask;                                              // 0x1A0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRuntimeVirtualTextureOutput");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      VirtualTextureOutput;                              // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRuntimeVirtualTextureReplace");
		return Clss;
	}

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      WorldPosition;                                     // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      MipValue;                                          // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	class URuntimeVirtualTexture*                VirtualTexture;                                    // 0x128(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERuntimeVirtualTextureMaterialType MaterialType;                                      // 0x130(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSinglePhysicalSpace;                              // 0x131(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAdaptive;                                         // 0x132(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERuntimeVirtualTextureMipValueMode MipValueMode;                                      // 0x133(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERuntimeVirtualTextureTextureAddressMode TextureAddressMode;                                // 0x134(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E5B[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRuntimeVirtualTextureSample");
		return Clss;
	}

};

// 0x28 (0x160 - 0x138)
// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{
public:
	class FName                                  ParameterName;                                     // 0x138(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ExpressionGUID;                                    // 0x140(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Group;                                             // 0x150(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SortPriority;                                      // 0x158(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E5F[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRuntimeVirtualTextureSampleParameter");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSamplePhysicsVectorField
class UMaterialExpressionSamplePhysicsVectorField : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class EFieldVectorType                  FieldTarget;                                       // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E61[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSamplePhysicsVectorField");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSamplePhysicsScalarField
class UMaterialExpressionSamplePhysicsScalarField : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class EFieldScalarType                  FieldTarget;                                       // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E62[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSamplePhysicsScalarField");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSamplePhysicsIntegerField
class UMaterialExpressionSamplePhysicsIntegerField : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class EFieldIntegerType                 FieldTarget;                                       // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E63[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSamplePhysicsIntegerField");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionSaturate
class UMaterialExpressionSaturate : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSaturate");
		return Clss;
	}

};

// 0x68 (0x118 - 0xB0)
// Class Engine.MaterialExpressionSceneColor
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	enum class EMaterialSceneAttributeInputMode  InputMode;                                         // 0xB0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E65[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0xB8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      OffsetFraction;                                    // 0xE0(0x28)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                             ConstInput;                                        // 0x108(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSceneColor");
		return Clss;
	}

};

// 0x68 (0x118 - 0xB0)
// Class Engine.MaterialExpressionSceneDepth
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	enum class EMaterialSceneAttributeInputMode  InputMode;                                         // 0xB0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E68[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0xB8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Coordinates;                                       // 0xE0(0x28)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                             ConstInput;                                        // 0x108(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSceneDepth");
		return Clss;
	}

};

// 0x48 (0xF8 - 0xB0)
// Class Engine.MaterialExpressionSceneDepthWithoutWater
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{
public:
	enum class EMaterialSceneAttributeInputMode  InputMode;                                         // 0xB0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E6A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0xB8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                             ConstInput;                                        // 0xE0(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FallbackDepth;                                     // 0xF0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E6B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSceneDepthWithoutWater");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionSceneTexelSize
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSceneTexelSize");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSceneTexture
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class ESceneTextureId                   SceneTextureId;                                    // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFiltered;                                         // 0xD9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E6E[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSceneTexture");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionScreenPosition
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionScreenPosition");
		return Clss;
	}

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionSetLocal
class UMaterialExpressionSetLocal : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                 Exec;                                              // 0xB0(0x8)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Value;                                             // 0xB8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                  LocalName;                                         // 0xE0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSetLocal");
		return Clss;
	}

};

// 0x20 (0xD0 - 0xB0)
// Class Engine.MaterialExpressionSetMaterialAttributes
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{
public:
	TArray<struct FExpressionInput>              Inputs;                                            // 0xB0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                         AttributeSetTypes;                                 // 0xC0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSetMaterialAttributes");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionShaderStageSwitch
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      PixelShader;                                       // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      VertexShader;                                      // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionShaderStageSwitch");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionShadingModel
class UMaterialExpressionShadingModel : public UMaterialExpression
{
public:
	enum class EMaterialShadingModel             ShadingModel;                                      // 0xB0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E71[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionShadingModel");
		return Clss;
	}

};

// 0xA0 (0x150 - 0xB0)
// Class Engine.MaterialExpressionShadingPathSwitch
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Inputs[0x3];                                       // 0xD8(0x78)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionShadingPathSwitch");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionShadowReplace
class UMaterialExpressionShadowReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Shadow;                                            // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionShadowReplace");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionSign
class UMaterialExpressionSign : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSign");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSine
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        Period;                                            // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E73[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSine");
		return Clss;
	}

};

// 0xA0 (0x150 - 0xB0)
// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      ScatteringCoefficients;                            // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      AbsorptionCoefficients;                            // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      PhaseG;                                            // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ColorScaleBehindWater;                             // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSingleLayerWaterMaterialOutput");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{
public:
	int32                                        LightIndex;                                        // 0xB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E78[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSkyAtmosphereLightDirection");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{
public:
	int32                                        LightIndex;                                        // 0xB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E79[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      WorldPosition;                                     // 0xB8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSkyAtmosphereLightIlluminance");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{
public:
	int32                                        LightIndex;                                        // 0xB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E7B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      DiskAngularDiameterOverride;                       // 0xB8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSkyAtmosphereLightDiskLuminance");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSkyAtmosphereAerialPerspective");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSkyAtmosphereViewLuminance");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionSkyLightEnvMapSample
class UMaterialExpressionSkyLightEnvMapSample : public UMaterialExpression
{
public:
	struct FExpressionInput                      Direction;                                         // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Roughness;                                         // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSkyLightEnvMapSample");
		return Clss;
	}

};

// 0x88 (0x138 - 0xB0)
// Class Engine.MaterialExpressionSmoothStep
class UMaterialExpressionSmoothStep : public UMaterialExpression
{
public:
	struct FExpressionInput                      Min;                                               // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Max;                                               // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Value;                                             // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstMin;                                          // 0x128(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstMax;                                          // 0x12C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstValue;                                        // 0x130(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E80[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSmoothStep");
		return Clss;
	}

};

// 0x90 (0x140 - 0xB0)
// Class Engine.MaterialExpressionSobol
class UMaterialExpressionSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                      Cell;                                              // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Index;                                             // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Seed;                                              // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	uint32                                       ConstIndex;                                        // 0x128(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E83[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             ConstSeed;                                         // 0x130(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSobol");
		return Clss;
	}

};

// 0xB0 (0x160 - 0xB0)
// Class Engine.MaterialExpressionSpeedTree
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	struct FExpressionInput                      GeometryInput;                                     // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      WindInput;                                         // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      LODInput;                                          // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ExtraBendWS;                                       // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class ESpeedTreeGeometryType            GeometryType;                                      // 0x150(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESpeedTreeWindType                WindType;                                          // 0x151(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESpeedTreeLODType                 LODType;                                           // 0x152(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E84[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BillboardThreshold;                                // 0x154(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAccurateWindVelocities;                           // 0x158(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E85[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSpeedTree");
		return Clss;
	}

};

// 0xA8 (0x158 - 0xB0)
// Class Engine.MaterialExpressionSphereMask
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Radius;                                            // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Hardness;                                          // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        AttenuationRadius;                                 // 0x150(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HardnessPercent;                                   // 0x154(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSphereMask");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionSphericalParticleOpacity
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                      Density;                                           // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstantDensity;                                   // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E87[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSphericalParticleOpacity");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionSquareRoot
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSquareRoot");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionStaticBool
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	uint8                                        Value : 1;                                         // Mask: 0x1, PropSize: 0x10xB0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E88[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStaticBool");
		return Clss;
	}

};

// 0x8 (0xE0 - 0xD8)
// Class Engine.MaterialExpressionStaticBoolParameter
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	uint8                                        DefaultValue : 1;                                  // Mask: 0x1, PropSize: 0x10xD8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E8A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStaticBoolParameter");
		return Clss;
	}

};

// 0x30 (0x108 - 0xD8)
// Class Engine.MaterialExpressionStaticComponentMaskParameter
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                      Input;                                             // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        DefaultR : 1;                                      // Mask: 0x1, PropSize: 0x10x100(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DefaultG : 1;                                      // Mask: 0x2, PropSize: 0x10x100(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DefaultB : 1;                                      // Mask: 0x4, PropSize: 0x10x100(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DefaultA : 1;                                      // Mask: 0x8, PropSize: 0x10x100(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E8D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStaticComponentMaskParameter");
		return Clss;
	}

};

// 0x80 (0x130 - 0xB0)
// Class Engine.MaterialExpressionStaticSwitch
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	uint8                                        DefaultValue : 1;                                  // Mask: 0x1, PropSize: 0x10xB0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_116 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1E8E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      A;                                                 // 0xB8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xE0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Value;                                             // 0x108(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStaticSwitch");
		return Clss;
	}

};

// 0x50 (0x130 - 0xE0)
// Class Engine.MaterialExpressionStaticSwitchParameter
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                      A;                                                 // 0xE0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x108(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStaticSwitchParameter");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionStep
class UMaterialExpressionStep : public UMaterialExpression
{
public:
	struct FExpressionInput                      Y;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      X;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstY;                                            // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstX;                                            // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStep");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionStrataBSDF
class UMaterialExpressionStrataBSDF : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataBSDF");
		return Clss;
	}

};

// 0x348 (0x3F8 - 0xB0)
// Class Engine.MaterialExpressionStrataLegacyConversion
class UMaterialExpressionStrataLegacyConversion : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Metallic;                                          // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Roughness;                                         // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Anisotropy;                                        // 0x150(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      EmissiveColor;                                     // 0x178(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Normal;                                            // 0x1A0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Tangent;                                           // 0x1C8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      SubsurfaceColor;                                   // 0x1F0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ClearCoat;                                         // 0x218(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ClearCoatRoughness;                                // 0x240(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Opacity;                                           // 0x268(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      TransmittanceColor;                                // 0x290(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      WaterScatteringCoefficients;                       // 0x2B8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      WaterAbsorptionCoefficients;                       // 0x2E0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      WaterPhaseG;                                       // 0x308(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ColorScaleBehindWater;                             // 0x330(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ClearCoatNormal;                                   // 0x358(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      CustomTangent;                                     // 0x380(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FShadingModelMaterialInput            ShadingModel;                                      // 0x3A8(0x28)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1E99[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USubsurfaceProfile*                    SubsurfaceProfile;                                 // 0x3D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStrataMaterialInfo                   ConvertedStrataMaterialInfo;                       // 0x3E0(0x18)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataLegacyConversion");
		return Clss;
	}

};

// 0x330 (0x3E0 - 0xB0)
// Class Engine.MaterialExpressionStrataSlabBSDF
class UMaterialExpressionStrataSlabBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      EdgeColor;                                         // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Metallic;                                          // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Specular;                                          // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      DiffuseAlbedo;                                     // 0x150(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      F0;                                                // 0x178(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      F90;                                               // 0x1A0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Roughness;                                         // 0x1C8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Anisotropy;                                        // 0x1F0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Normal;                                            // 0x218(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Tangent;                                           // 0x240(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      SSSMFP;                                            // 0x268(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      SSSMFPScale;                                       // 0x290(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      SSSPhaseAnisotropy;                                // 0x2B8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      EmissiveColor;                                     // 0x2E0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      SecondRoughness;                                   // 0x308(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      SecondRoughnessWeight;                             // 0x330(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Thickness;                                         // 0x358(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      FuzzAmount;                                        // 0x380(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      FuzzColor;                                         // 0x3A8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	class USubsurfaceProfile*                    SubsurfaceProfile;                                 // 0x3D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseMetalness : 1;                                 // Mask: 0x1, PropSize: 0x10x3D8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseSSSDiffusion : 1;                              // Mask: 0x2, PropSize: 0x10x3D8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EA4[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataSlabBSDF");
		return Clss;
	}

};

// 0x140 (0x1F0 - 0xB0)
// Class Engine.MaterialExpressionStrataSimpleClearCoatBSDF
class UMaterialExpressionStrataSimpleClearCoatBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Metallic;                                          // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Roughness;                                         // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ClearCoatCoverage;                                 // 0x150(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ClearCoatRoughness;                                // 0x178(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Normal;                                            // 0x1A0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      EmissiveColor;                                     // 0x1C8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataSimpleClearCoatBSDF");
		return Clss;
	}

};

// 0xA0 (0x150 - 0xB0)
// Class Engine.MaterialExpressionStrataVolumetricFogCloudBSDF
class UMaterialExpressionStrataVolumetricFogCloudBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Albedo;                                            // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Extinction;                                        // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      EmissiveColor;                                     // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      AmbientOcclusion;                                  // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataVolumetricFogCloudBSDF");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataUnlitBSDF
class UMaterialExpressionStrataUnlitBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      EmissiveColor;                                     // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      TransmittanceColor;                                // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataUnlitBSDF");
		return Clss;
	}

};

// 0x118 (0x1C8 - 0xB0)
// Class Engine.MaterialExpressionStrataHairBSDF
class UMaterialExpressionStrataHairBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Scatter;                                           // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Roughness;                                         // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Backlit;                                           // 0x150(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Tangent;                                           // 0x178(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      EmissiveColor;                                     // 0x1A0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataHairBSDF");
		return Clss;
	}

};

// 0x148 (0x1F8 - 0xB0)
// Class Engine.MaterialExpressionStrataEyeBSDF
class UMaterialExpressionStrataEyeBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      DiffuseColor;                                      // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Roughness;                                         // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      CorneaNormal;                                      // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      IrisNormal;                                        // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      IrisPlaneNormal;                                   // 0x150(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      IrisMask;                                          // 0x178(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      IrisDistance;                                      // 0x1A0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      EmissiveColor;                                     // 0x1C8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	class USubsurfaceProfile*                    SubsurfaceProfile;                                 // 0x1F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataEyeBSDF");
		return Clss;
	}

};

// 0x1B8 (0x268 - 0xB0)
// Class Engine.MaterialExpressionStrataSingleLayerWaterBSDF
class UMaterialExpressionStrataSingleLayerWaterBSDF : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Metallic;                                          // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Roughness;                                         // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Normal;                                            // 0x150(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      EmissiveColor;                                     // 0x178(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      TopMaterialOpacity;                                // 0x1A0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      WaterAlbedo;                                       // 0x1C8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      WaterExtinction;                                   // 0x1F0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      WaterPhaseG;                                       // 0x218(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ColorScaleBehindWater;                             // 0x240(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataSingleLayerWaterBSDF");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionStrataLightFunction
class UMaterialExpressionStrataLightFunction : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Color;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataLightFunction");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataPostProcess
class UMaterialExpressionStrataPostProcess : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Color;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Opacity;                                           // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataPostProcess");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataConvertToDecal
class UMaterialExpressionStrataConvertToDecal : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      DecalMaterial;                                     // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Coverage;                                          // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataConvertToDecal");
		return Clss;
	}

};

// 0x80 (0x130 - 0xB0)
// Class Engine.MaterialExpressionStrataHorizontalMixing
class UMaterialExpressionStrataHorizontalMixing : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Background;                                        // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Foreground;                                        // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Mix;                                               // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bUseParameterBlending : 1;                         // Mask: 0x1, PropSize: 0x10x128(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EC2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataHorizontalMixing");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionStrataVerticalLayering
class UMaterialExpressionStrataVerticalLayering : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      Top;                                               // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Base;                                              // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bUseParameterBlending : 1;                         // Mask: 0x1, PropSize: 0x10x100(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EC4[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataVerticalLayering");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionStrataAdd
class UMaterialExpressionStrataAdd : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bUseParameterBlending : 1;                         // Mask: 0x1, PropSize: 0x10x100(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EC5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataAdd");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataWeight
class UMaterialExpressionStrataWeight : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Weight;                                            // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataWeight");
		return Clss;
	}

};

// 0x78 (0x128 - 0xB0)
// Class Engine.MaterialExpressionStrataThinFilm
class UMaterialExpressionStrataThinFilm : public UMaterialExpressionStrataBSDF
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Thickness;                                         // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      IOR;                                               // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataThinFilm");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionStrataUtilityBase
class UMaterialExpressionStrataUtilityBase : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataUtilityBase");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataTransmittanceToMFP
class UMaterialExpressionStrataTransmittanceToMFP : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                      TransmittanceColor;                                // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Thickness;                                         // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataTransmittanceToMFP");
		return Clss;
	}

};

// 0x78 (0x128 - 0xB0)
// Class Engine.MaterialExpressionStrataMetalnessToDiffuseAlbedoF0
class UMaterialExpressionStrataMetalnessToDiffuseAlbedoF0 : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Metallic;                                          // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Specular;                                          // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataMetalnessToDiffuseAlbedoF0");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionStrataHazinessToSecondaryRoughness
class UMaterialExpressionStrataHazinessToSecondaryRoughness : public UMaterialExpressionStrataUtilityBase
{
public:
	struct FExpressionInput                      BaseRoughness;                                     // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Haziness;                                          // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStrataHazinessToSecondaryRoughness");
		return Clss;
	}

};

// 0x58 (0x108 - 0xB0)
// Class Engine.MaterialExpressionSubtract
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSubtract");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionTangent
class UMaterialExpressionTangent : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        Period;                                            // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ED2[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTangent");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionTangentOutput
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTangentOutput");
		return Clss;
	}

};

// 0x68 (0x118 - 0xB0)
// Class Engine.MaterialExpressionTemporalSobol
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{
public:
	struct FExpressionInput                      Index;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Seed;                                              // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	uint32                                       ConstIndex;                                        // 0x100(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ED5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             ConstSeed;                                         // 0x108(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTemporalSobol");
		return Clss;
	}

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.MaterialExpressionTextureCoordinate
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int32                                        CoordinateIndex;                                   // 0xB0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UTiling;                                           // 0xB4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VTiling;                                           // 0xB8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        UnMirrorU : 1;                                     // Mask: 0x1, PropSize: 0x10xBC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        UnMirrorV : 1;                                     // Mask: 0x2, PropSize: 0x10xBC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1ED9[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureCoordinate");
		return Clss;
	}

};

// 0x0 (0xC0 - 0xC0)
// Class Engine.MaterialExpressionTextureObject
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureObject");
		return Clss;
	}

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureObjectParameter
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureObjectParameter");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionTextureProperty
class UMaterialExpressionTextureProperty : public UMaterialExpression
{
public:
	struct FExpressionInput                      TextureObject;                                     // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class EMaterialExposedTextureProperty   Property;                                          // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EDC[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureProperty");
		return Clss;
	}

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameter2DArray
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameter2DArray");
		return Clss;
	}

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameterCube
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameterCube");
		return Clss;
	}

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameterCubeArray
class UMaterialExpressionTextureSampleParameterCubeArray : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameterCubeArray");
		return Clss;
	}

};

// 0x8 (0x248 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameterSubUV
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	uint8                                        bBlend : 1;                                        // Mask: 0x1, PropSize: 0x10x240(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EE0[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameterSubUV");
		return Clss;
	}

};

// 0x0 (0x240 - 0x240)
// Class Engine.MaterialExpressionTextureSampleParameterVolume
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameterVolume");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      TransmittanceColor;                                // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionThinTranslucentMaterialOutput");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionTime
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	uint8                                        bIgnorePause : 1;                                  // Mask: 0x1, PropSize: 0x10xB0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverride_Period : 1;                              // Mask: 0x2, PropSize: 0x10xB0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_117 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1EE3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Period;                                            // 0xB4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTime");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionTransform
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class EMaterialVectorCoordTransformSource TransformSourceType;                               // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialVectorCoordTransform     TransformType;                                     // 0xD9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EE4[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTransform");
		return Clss;
	}

};

// 0x30 (0xE0 - 0xB0)
// Class Engine.MaterialExpressionTransformPosition
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class EMaterialPositionTransformSource  TransformSourceType;                               // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialPositionTransformSource  TransformType;                                     // 0xD9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EE6[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTransformPosition");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionTruncate
class UMaterialExpressionTruncate : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTruncate");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionTwoSidedSign
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTwoSidedSign");
		return Clss;
	}

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionVectorNoise
class UMaterialExpressionVectorNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	enum class EVectorNoiseFunction              NoiseFunction;                                     // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EE8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Quality;                                           // 0xDC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTiling : 1;                                       // Mask: 0x1, PropSize: 0x10xE0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_118 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1EE9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       TileSize;                                          // 0xE4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVectorNoise");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionVertexColor
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVertexColor");
		return Clss;
	}

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionVertexInterpolator
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      Input;                                             // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EEA[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVertexInterpolator");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionVertexNormalWS
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVertexNormalWS");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionVertexTangentWS
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVertexTangentWS");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionViewProperty
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	enum class EMaterialExposedViewProperty      Property;                                          // 0xB0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EEC[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionViewProperty");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionViewSize
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionViewSize");
		return Clss;
	}

};

// 0x50 (0x100 - 0xB0)
// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      No;                                                // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Yes;                                               // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVirtualTextureFeatureSwitch");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVolumetricAdvancedMaterialInput");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingInput
class UMaterialExpressionVolumetricCloudEmptySpaceSkippingInput : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVolumetricCloudEmptySpaceSkippingInput");
		return Clss;
	}

};

// 0x140 (0x1F0 - 0xB0)
// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      PhaseG;                                            // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      PhaseG2;                                           // 0xD8(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      PhaseBlend;                                        // 0x100(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      MultiScatteringContribution;                       // 0x128(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      MultiScatteringOcclusion;                          // 0x150(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      MultiScatteringEccentricity;                       // 0x178(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      ConservativeDensity;                               // 0x1A0(0x28)(NoDestructor, NativeAccessSpecifierPublic)
	float                                        ConstPhaseG;                                       // 0x1C8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstPhaseG2;                                      // 0x1CC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstPhaseBlend;                                   // 0x1D0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         PerSamplePhaseEvaluation;                          // 0x1D4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EF1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       MultiScatteringApproximationOctaveCount;           // 0x1D8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstMultiScatteringContribution;                  // 0x1DC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstMultiScatteringOcclusion;                     // 0x1E0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstMultiScatteringEccentricity;                  // 0x1E4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bGroundContribution;                               // 0x1E8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bGrayScaleMaterial;                                // 0x1E9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRayMarchVolumeShadow;                             // 0x1EA(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bClampMultiScatteringContribution;                 // 0x1EB(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EF7[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVolumetricAdvancedMaterialOutput");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput
class UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      ContainsMatter;                                    // 0xB0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput");
		return Clss;
	}

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.MaterialExpressionWhileLoop
class UMaterialExpressionWhileLoop : public UMaterialExpression
{
public:
	struct FExpressionExecOutput                 LoopBody;                                          // 0xB0(0x8)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionExecOutput                 Completed;                                         // 0xB8(0x8)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                      Condition;                                         // 0xC0(0x28)(NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionWhileLoop");
		return Clss;
	}

};

// 0x8 (0xB8 - 0xB0)
// Class Engine.MaterialExpressionWorldPosition
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	enum class EWorldPositionIncludedOffsets     WorldPositionShaderOffset;                         // 0xB0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1EFD[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionWorldPosition");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.MaterialFunctionInterfaceEditorOnlyData
class UMaterialFunctionInterfaceEditorOnlyData : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialFunctionInterfaceEditorOnlyData");
		return Clss;
	}

};

// 0x30 (0x58 - 0x28)
// Class Engine.MaterialFunctionEditorOnlyData
class UMaterialFunctionEditorOnlyData : public UMaterialFunctionInterfaceEditorOnlyData
{
public:
	struct FMaterialExpressionCollection         ExpressionCollection;                              // 0x28(0x30)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialFunctionEditorOnlyData");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.MaterialFunctionInterface
class UMaterialFunctionInterface : public UObject
{
public:
	struct FGuid                                 StateId;                                           // 0x28(0x10)(ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialFunctionUsage            MaterialFunctionUsage;                             // 0x38(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1F02[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialFunctionInterface");
		return Clss;
	}

};

// 0x18 (0x58 - 0x40)
// Class Engine.MaterialFunction
class UMaterialFunction : public UMaterialFunctionInterface
{
public:
	class FString                                Description;                                       // 0x40(0x10)(Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bExposeToLibrary : 1;                              // Mask: 0x1, PropSize: 0x10x50(0x1)(Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPrefixParameterNames : 1;                         // Mask: 0x2, PropSize: 0x10x50(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableExecWire : 1;                               // Mask: 0x4, PropSize: 0x10x50(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableNewHLSLGenerator : 1;                       // Mask: 0x8, PropSize: 0x10x50(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F08[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialFunction");
		return Clss;
	}

};

// 0x90 (0xD0 - 0x40)
// Class Engine.MaterialFunctionInstance
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{
public:
	class UMaterialFunctionInterface*            Parent;                                            // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialFunctionInterface*            Base;                                              // 0x48(0x8)(ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FScalarParameterValue>         ScalarParameterValues;                             // 0x50(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorParameterValue>         VectorParameterValues;                             // 0x60(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDoubleVectorParameterValue>   DoubleVectorParameterValues;                       // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTextureParameterValue>        TextureParameterValues;                            // 0x80(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFontParameterValue>           FontParameterValues;                               // 0x90(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaticSwitchParameter>        StaticSwitchParameterValues;                       // 0xA0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameterValues;                // 0xB0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;              // 0xC0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialFunctionInstance");
		return Clss;
	}

};

// 0x0 (0x58 - 0x58)
// Class Engine.MaterialFunctionMaterialLayer
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialFunctionMaterialLayer");
		return Clss;
	}

};

// 0x0 (0xD0 - 0xD0)
// Class Engine.MaterialFunctionMaterialLayerInstance
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialFunctionMaterialLayerInstance");
		return Clss;
	}

};

// 0x0 (0x58 - 0x58)
// Class Engine.MaterialFunctionMaterialLayerBlend
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialFunctionMaterialLayerBlend");
		return Clss;
	}

};

// 0x0 (0xD0 - 0xD0)
// Class Engine.MaterialFunctionMaterialLayerBlendInstance
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialFunctionMaterialLayerBlendInstance");
		return Clss;
	}

};

// 0x48 (0x70 - 0x28)
// Class Engine.MaterialParameterCollection
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                 StateId;                                           // 0x28(0x10)(ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCollectionScalarParameter>    ScalarParameters;                                  // 0x38(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCollectionVectorParameter>    VectorParameters;                                  // 0x48(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F1B[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialParameterCollection");
		return Clss;
	}

	TArray<class FName> GetVectorParameterNames();
	struct FLinearColor GetVectorParameterDefaultValue(class FName InParameterName, bool* InbParameterFound);
	TArray<class FName> GetScalarParameterNames();
	float GetScalarParameterDefaultValue(class FName InParameterName, bool* InbParameterFound);
};

// 0xF8 (0x120 - 0x28)
// Class Engine.MaterialParameterCollectionInstance
class UMaterialParameterCollectionInstance : public UObject
{
public:
	uint8                                        Pad_1F1C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialParameterCollection*          Collection;                                        // 0x30(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1F1D[0xE8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialParameterCollectionInstance");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.MeshDeformer
class UMeshDeformer : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshDeformer");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.MeshDeformerInstanceSettings
class UMeshDeformerInstanceSettings : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshDeformerInstanceSettings");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.MeshDeformerInstance
class UMeshDeformerInstance : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshDeformerInstance");
		return Clss;
	}

};

// 0x30 (0x68 - 0x38)
// Class Engine.MicroTransactionBase
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                 AvailableProducts;                                 // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                LastError;                                         // 0x48(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LastErrorSolution;                                 // 0x58(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MicroTransactionBase");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.MorphTarget
class UMorphTarget : public UObject
{
public:
	class USkeletalMesh*                         BaseSkelMesh;                                      // 0x28(0x8)(ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F23[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MorphTarget");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavAgentInterface
class INavAgentInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavAgentInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.NavAreaBase
class UNavAreaBase : public UObject
{
public:
	uint8                                        Pad_1F25[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavAreaBase");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavEdgeProviderInterface
class INavEdgeProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavEdgeProviderInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavigationDataInterface
class INavigationDataInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationDataInterface");
		return Clss;
	}

};

// 0x28 (0x50 - 0x28)
// Class Engine.NavLinkDefinition
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>               Links;                                             // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNavigationSegmentLink>        SegmentLinks;                                      // 0x38(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F27[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavLinkDefinition");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavPathObserverInterface
class INavPathObserverInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavPathObserverInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavRelevantInterface
class INavRelevantInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavRelevantInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NetworkPredictionInterface
class INetworkPredictionInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetworkPredictionInterface");
		return Clss;
	}

};

// 0x198 (0x1C0 - 0x28)
// Class Engine.ParticleEmitter
class UParticleEmitter : public UObject
{
public:
	class FName                                  EmitterName;                                       // 0x28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubUVDataOffset;                                   // 0x30(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EEmitterRenderMode                EmitterRenderMode;                                 // 0x34(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleSignificanceLevel        SignificanceLevel;                                 // 0x35(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F29[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseLegacySpawningBehavior : 1;                    // Mask: 0x1, PropSize: 0x10x37(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_119 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        ConvertedModules : 1;                              // Mask: 0x10, PropSize: 0x10x37(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsSoloing : 1;                                    // Mask: 0x20, PropSize: 0x10x37(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCookedOut : 1;                                    // Mask: 0x40, PropSize: 0x10x37(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisabledLODsKeepEmitterAlive : 1;                 // Mask: 0x80, PropSize: 0x10x37(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableWhenInsignficant : 1;                      // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F2B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleLODLevel*>             LODLevels;                                         // 0x40(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                        PeakActiveParticles;                               // 0x50(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        InitialAllocationCount;                            // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QualityLevelSpawnRateScale;                        // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       DetailModeBitmask;                                 // 0x5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F2C[0x160];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleEmitter");
		return Clss;
	}

};

// 0x90 (0xB8 - 0x28)
// Class Engine.ParticleLODLevel
class UParticleLODLevel : public UObject
{
public:
	int32                                        Level;                                             // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x2C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F31[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleModuleRequired*               RequiredModule;                                    // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>               Modules;                                           // 0x38(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UParticleModuleTypeDataBase*           TypeDataModule;                                    // 0x48(0x8)(ExportObject, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleSpawn*                  SpawnModule;                                       // 0x50(0x8)(ExportObject, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleEventGenerator*         EventGenerator;                                    // 0x58(0x8)(ExportObject, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleSpawnBase*>      SpawningModules;                                   // 0x60(0x10)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>               SpawnModules;                                      // 0x70(0x10)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>               UpdateModules;                                     // 0x80(0x10)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleOrbit*>          OrbitModules;                                      // 0x90(0x10)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleEventReceiverBase*> EventReceiverModules;                              // 0xA0(0x10)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        ConvertedModules : 1;                              // Mask: 0x1, PropSize: 0x10xB0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F3C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PeakActiveParticles;                               // 0xB4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleLODLevel");
		return Clss;
	}

};

// 0x128 (0x158 - 0x30)
// Class Engine.ParticleSystem
class UParticleSystem : public UFXSystemAsset
{
public:
	float                                        UpdateTime_FPS;                                    // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UpdateTime_Delta;                                  // 0x34(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WarmupTime;                                        // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WarmupTickRate;                                    // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleEmitter*>              Emitters;                                          // 0x40(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              PreviewComponent;                                  // 0x50(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpCurveEdSetup*                   CurveEdSetup;                                      // 0x58(0x8)(ExportObject, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LODDistanceCheckTime;                              // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MacroUVRadius;                                     // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                LODDistances;                                      // 0x68(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FParticleSystemLOD>            LODSettings;                                       // 0x78(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                  FixedRelativeBoundingBox;                          // 0x88(0x38)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        SecondsBeforeInactive;                             // 0xC0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Delay;                                             // 0xC4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DelayLow;                                          // 0xC8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrientZAxisTowardCamera : 1;                      // Mask: 0x1, PropSize: 0x10xCC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFixedRelativeBoundingBox : 1;                  // Mask: 0x2, PropSize: 0x10xCC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldResetPeakCounts : 1;                        // Mask: 0x4, PropSize: 0x10xCC(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasPhysics : 1;                                   // Mask: 0x8, PropSize: 0x10xCC(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseRealtimeThumbnail : 1;                         // Mask: 0x10, PropSize: 0x10xCC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ThumbnailImageOutOfDate : 1;                       // Mask: 0x20, PropSize: 0x10xCC(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11D : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseDelayRange : 1;                                // Mask: 0x1, PropSize: 0x10xCD(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowManagedTicking : 1;                          // Mask: 0x2, PropSize: 0x10xCD(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoDeactivate : 1;                               // Mask: 0x4, PropSize: 0x10xCD(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRegenerateLODDuplicate : 1;                       // Mask: 0x8, PropSize: 0x10xCD(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11E : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EParticleSystemUpdateMode         SystemUpdateMode;                                  // 0xCE(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleSystemLODMethod          LODMethod;                                         // 0xCF(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleSystemInsignificanceReaction InsignificantReaction;                             // 0xD0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod;                             // 0xD1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F4C[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleSignificanceLevel        MaxSignificanceLevel;                              // 0xD3(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       MinTimeBetweenTicks;                               // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InsignificanceDelay;                               // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F50[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               MacroUVPosition;                                   // 0xE0(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                  CustomOcclusionBounds;                             // 0xF8(0x38)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLODSoloTrack>                 SoloTracking;                                      // 0x130(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FNamedEmitterMaterial>         NamedMaterialSlots;                                // 0x140(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F51[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleSystem");
		return Clss;
	}

	bool ContainsEmitterType(class UClass* InTypeData);
};

// 0x8 (0x30 - 0x28)
// Class Engine.ParticleModule
class UParticleModule : public UObject
{
public:
	uint8                                        bSpawnModule : 1;                                  // Mask: 0x1, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateModule : 1;                                 // Mask: 0x2, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFinalUpdateModule : 1;                            // Mask: 0x4, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateForGPUEmitter : 1;                          // Mask: 0x8, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCurvesAsColor : 1;                                // Mask: 0x10, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        b3DDrawMode : 1;                                   // Mask: 0x20, PropSize: 0x10x28(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupported3DDrawMode : 1;                          // Mask: 0x40, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x80, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEditable : 1;                                     // Mask: 0x1, PropSize: 0x10x29(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        LODDuplicate : 1;                                  // Mask: 0x2, PropSize: 0x10x29(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsRandomSeed : 1;                           // Mask: 0x4, PropSize: 0x10x29(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRequiresLoopingNotification : 1;                  // Mask: 0x8, PropSize: 0x10x29(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_120 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        LODValidity;                                       // 0x2A(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F5F[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModule");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleAccelerationBase
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	uint8                                        bAlwaysInWorldSpace : 1;                           // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F60[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAccelerationBase");
		return Clss;
	}

};

// 0x68 (0xA0 - 0x38)
// Class Engine.ParticleModuleAcceleration
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                Acceleration;                                      // 0x38(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bApplyOwnerScale : 1;                              // Mask: 0x1, PropSize: 0x10x98(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F64[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAcceleration");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.ParticleModuleAccelerationConstant
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                               Acceleration;                                      // 0x38(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAccelerationConstant");
		return Clss;
	}

};

// 0x38 (0x70 - 0x38)
// Class Engine.ParticleModuleAccelerationDrag
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                    DragCoefficient;                                   // 0x38(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 DragCoefficientRaw;                                // 0x40(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAccelerationDrag");
		return Clss;
	}

};

// 0x38 (0x70 - 0x38)
// Class Engine.ParticleModuleAccelerationDragScaleOverLife
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                    DragScale;                                         // 0x38(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 DragScaleRaw;                                      // 0x40(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAccelerationDragScaleOverLife");
		return Clss;
	}

};

// 0x60 (0x98 - 0x38)
// Class Engine.ParticleModuleAccelerationOverLifetime
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                AccelOverLife;                                     // 0x38(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAccelerationOverLifetime");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleAttractorBase
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAttractorBase");
		return Clss;
	}

};

// 0x90 (0xC0 - 0x30)
// Class Engine.ParticleModuleAttractorLine
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                               EndPoint0;                                         // 0x30(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               EndPoint1;                                         // 0x48(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Range;                                             // 0x60(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Strength;                                          // 0x90(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAttractorLine");
		return Clss;
	}

};

// 0x80 (0xB0 - 0x30)
// Class Engine.ParticleModuleAttractorParticle
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	class FName                                  EmitterName;                                       // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Range;                                             // 0x38(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bStrengthByDistance : 1;                           // Mask: 0x1, PropSize: 0x10x68(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_121 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F68[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 Strength;                                          // 0x70(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bAffectBaseVelocity : 1;                           // Mask: 0x1, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_122 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F6A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAttractorParticleSelectionMethod SelectionMethod;                                   // 0xA4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F6B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bRenewSource : 1;                                  // Mask: 0x1, PropSize: 0x10xA8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritSourceVel : 1;                             // Mask: 0x2, PropSize: 0x10xA8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_123 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F6C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LastSelIndex;                                      // 0xAC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAttractorParticle");
		return Clss;
	}

};

// 0xC8 (0xF8 - 0x30)
// Class Engine.ParticleModuleAttractorPoint
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                Position;                                          // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Range;                                             // 0x90(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Strength;                                          // 0xC0(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        StrengthByDistance : 1;                            // Mask: 0x1, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectBaseVelocity : 1;                           // Mask: 0x2, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideVelocity : 1;                             // Mask: 0x4, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseWorldSpacePosition : 1;                        // Mask: 0x8, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Positive_X : 1;                                    // Mask: 0x10, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Positive_Y : 1;                                    // Mask: 0x20, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Positive_Z : 1;                                    // Mask: 0x40, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_X : 1;                                    // Mask: 0x80, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_Y : 1;                                    // Mask: 0x1, PropSize: 0x10xF1(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_Z : 1;                                    // Mask: 0x2, PropSize: 0x10xF1(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F6F[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAttractorPoint");
		return Clss;
	}

};

// 0x58 (0x88 - 0x30)
// Class Engine.ParticleModuleAttractorPointGravity
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                               Position;                                          // 0x30(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Radius;                                            // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F70[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDistributionFloat*                    Strength;                                          // 0x50(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 StrengthRaw;                                       // 0x58(0x30)(Edit, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAttractorPointGravity");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleBeamBase
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleBeamBase");
		return Clss;
	}

};

// 0x108 (0x138 - 0x30)
// Class Engine.ParticleModuleBeamModifier
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	enum class EBeamModifierType                 ModifierType;                                      // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F72[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBeamModifierOptions                  PositionOptions;                                   // 0x34(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                Position;                                          // 0x38(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBeamModifierOptions                  TangentOptions;                                    // 0x98(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F74[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                Tangent;                                           // 0xA0(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bAbsoluteTangent : 1;                              // Mask: 0x1, PropSize: 0x10x100(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_124 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F75[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBeamModifierOptions                  StrengthOptions;                                   // 0x104(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Strength;                                          // 0x108(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleBeamModifier");
		return Clss;
	}

};

// 0x190 (0x1C0 - 0x30)
// Class Engine.ParticleModuleBeamNoise
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	uint8                                        bLowFreq_Enabled : 1;                              // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_125 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F76[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Frequency;                                         // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Frequency_LowRange;                                // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F77[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                NoiseRange;                                        // 0x40(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 NoiseRangeScale;                                   // 0xA0(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bNRScaleEmitterTime : 1;                           // Mask: 0x1, PropSize: 0x10xD0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_126 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F78[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                NoiseSpeed;                                        // 0xD8(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bSmooth : 1;                                       // Mask: 0x1, PropSize: 0x10x138(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_127 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F79[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NoiseLockRadius;                                   // 0x13C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoiseLock : 1;                                    // Mask: 0x1, PropSize: 0x10x140(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOscillate : 1;                                    // Mask: 0x2, PropSize: 0x10x140(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_128 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F7A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NoiseLockTime;                                     // 0x144(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NoiseTension;                                      // 0x148(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseNoiseTangents : 1;                             // Mask: 0x1, PropSize: 0x10x14C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_129 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F7B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 NoiseTangentStrength;                              // 0x150(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        NoiseTessellation;                                 // 0x180(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTargetNoise : 1;                                  // Mask: 0x1, PropSize: 0x10x184(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_12A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F7C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FrequencyDistance;                                 // 0x188(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyNoiseScale : 1;                              // Mask: 0x1, PropSize: 0x10x18C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_12B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F7D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 NoiseScale;                                        // 0x190(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleBeamNoise");
		return Clss;
	}

};

// 0x118 (0x148 - 0x30)
// Class Engine.ParticleModuleBeamSource
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	enum class EBeam2SourceTargetMethod          SourceMethod;                                      // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F7F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SourceName;                                        // 0x34(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSourceAbsolute : 1;                               // Mask: 0x1, PropSize: 0x10x3C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_12C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F80[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                Source;                                            // 0x40(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockSource : 1;                                   // Mask: 0x1, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_12D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F81[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EBeam2SourceTargetTangentMethod   SourceTangentMethod;                               // 0xA4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F83[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                SourceTangent;                                     // 0xA8(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockSourceTangent : 1;                            // Mask: 0x1, PropSize: 0x10x108(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_12E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F84[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 SourceStrength;                                    // 0x110(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockSourceStength : 1;                            // Mask: 0x1, PropSize: 0x10x140(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F85[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleBeamSource");
		return Clss;
	}

};

// 0x120 (0x150 - 0x30)
// Class Engine.ParticleModuleBeamTarget
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	enum class EBeam2SourceTargetMethod          TargetMethod;                                      // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F87[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  TargetName;                                        // 0x34(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F88[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                Target;                                            // 0x40(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bTargetAbsolute : 1;                               // Mask: 0x1, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockTarget : 1;                                   // Mask: 0x2, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_12F : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F8A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EBeam2SourceTargetTangentMethod   TargetTangentMethod;                               // 0xA4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F8B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                TargetTangent;                                     // 0xA8(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockTargetTangent : 1;                            // Mask: 0x1, PropSize: 0x10x108(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_130 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F8E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 TargetStrength;                                    // 0x110(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockTargetStength : 1;                            // Mask: 0x1, PropSize: 0x10x140(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_131 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F90[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LockRadius;                                        // 0x144(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F91[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleBeamTarget");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleCameraBase
class UParticleModuleCameraBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleCameraBase");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleCameraOffset
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                 CameraOffset;                                      // 0x30(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bSpawnTimeOnly : 1;                                // Mask: 0x1, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_132 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F94[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleCameraOffsetUpdateMethod UpdateMethod;                                      // 0x64(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F95[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleCameraOffset");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleCollisionBase
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleCollisionBase");
		return Clss;
	}

};

// 0x190 (0x1C0 - 0x30)
// Class Engine.ParticleModuleCollision
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                DampingFactor;                                     // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                DampingFactorRotation;                             // 0x90(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 MaxCollisions;                                     // 0xF0(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class EParticleCollisionComplete        CollisionCompletionOption;                         // 0x120(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F97[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EObjectTypeQuery>          CollisionTypes;                                    // 0x128(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F99[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bApplyPhysics : 1;                                 // Mask: 0x1, PropSize: 0x10x140(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreTriggerVolumes : 1;                         // Mask: 0x2, PropSize: 0x10x140(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_133 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F9A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 ParticleMass;                                      // 0x148(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        DirScalar;                                         // 0x178(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPawnsDoNotDecrementCount : 1;                     // Mask: 0x1, PropSize: 0x10x17C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOnlyVerticalNormalsDecrementCount : 1;            // Mask: 0x2, PropSize: 0x10x17C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_134 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F9B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VerticalFudgeFactor;                               // 0x180(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1F9C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 DelayAmount;                                       // 0x188(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bDropDetail : 1;                                   // Mask: 0x1, PropSize: 0x10x1B8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCollideOnlyIfVisible : 1;                         // Mask: 0x2, PropSize: 0x10x1B8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreSourceActor : 1;                            // Mask: 0x4, PropSize: 0x10x1B8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_135 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1F9E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxCollisionDistance;                              // 0x1BC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleCollision");
		return Clss;
	}

};

// 0x78 (0xA8 - 0x30)
// Class Engine.ParticleModuleCollisionGPU
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                 Resilience;                                        // 0x30(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 ResilienceScaleOverLife;                           // 0x60(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        Friction;                                          // 0x90(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RandomSpread;                                      // 0x94(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RandomDistribution;                                // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RadiusScale;                                       // 0x9C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RadiusBias;                                        // 0xA0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleCollisionResponse        Response;                                          // 0xA4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleCollisionMode            CollisionMode;                                     // 0xA5(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FA6[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleCollisionGPU");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleColorBase
class UParticleModuleColorBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleColorBase");
		return Clss;
	}

};

// 0x98 (0xC8 - 0x30)
// Class Engine.ParticleModuleColor
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                StartColor;                                        // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 StartAlpha;                                        // 0x90(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bClampAlpha : 1;                                   // Mask: 0x1, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FAA[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleColor");
		return Clss;
	}

};

// 0x98 (0xC8 - 0x30)
// Class Engine.ParticleModuleColorOverLife
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                ColorOverLife;                                     // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 AlphaOverLife;                                     // 0x90(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bClampAlpha : 1;                                   // Mask: 0x1, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FAE[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleColorOverLife");
		return Clss;
	}

};

// 0x98 (0xC8 - 0x30)
// Class Engine.ParticleModuleColorScaleOverLife
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                ColorScaleOverLife;                                // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 AlphaScaleOverLife;                                // 0x90(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bEmitterTime : 1;                                  // Mask: 0x1, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FB1[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleColorScaleOverLife");
		return Clss;
	}

};

// 0x20 (0xE8 - 0xC8)
// Class Engine.ParticleModuleColor_Seeded
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0xC8(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleColor_Seeded");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleEventBase
class UParticleModuleEventBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventBase");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleEventGenerator
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>   Events;                                            // 0x30(0x10)(Edit, ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventGenerator");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleEventReceiverBase
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	enum class EParticleEventType                EventGeneratorType;                                // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FB4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  EventName;                                         // 0x34(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FB5[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventReceiverBase");
		return Clss;
	}

};

// 0x8 (0x48 - 0x40)
// Class Engine.ParticleModuleEventReceiverKillParticles
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	uint8                                        bStopSpawning : 1;                                 // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FB6[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventReceiverKillParticles");
		return Clss;
	}

};

// 0xB0 (0xF0 - 0x40)
// Class Engine.ParticleModuleEventReceiverSpawn
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                 SpawnCount;                                        // 0x40(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bUseParticleTime : 1;                              // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePSysLocation : 1;                              // Mask: 0x2, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritVelocity : 1;                              // Mask: 0x4, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_136 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FB9[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                InheritVelocityScale;                              // 0x78(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPhysicalMaterial*>             PhysicalMaterials;                                 // 0xD8(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        bBanPhysicalMaterials : 1;                         // Mask: 0x1, PropSize: 0x10xE8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FBA[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventReceiverSpawn");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ParticleModuleEventSendToGame
class UParticleModuleEventSendToGame : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventSendToGame");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleKillBase
class UParticleModuleKillBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleKillBase");
		return Clss;
	}

};

// 0xC8 (0xF8 - 0x30)
// Class Engine.ParticleModuleKillBox
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                LowerLeftCorner;                                   // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                UpperRightCorner;                                  // 0x90(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bAbsolute : 1;                                     // Mask: 0x1, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bKillInside : 1;                                   // Mask: 0x2, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAxisAlignedAndFixedSize : 1;                      // Mask: 0x4, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FBE[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleKillBox");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleKillHeight
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                 Height;                                            // 0x30(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bAbsolute : 1;                                     // Mask: 0x1, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFloor : 1;                                        // Mask: 0x2, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyPSysScale : 1;                               // Mask: 0x4, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FBF[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleKillHeight");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleLifetimeBase
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLifetimeBase");
		return Clss;
	}

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleLifetime
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                 Lifetime;                                          // 0x30(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLifetime");
		return Clss;
	}

};

// 0x20 (0x80 - 0x60)
// Class Engine.ParticleModuleLifetime_Seeded
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x60(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLifetime_Seeded");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleLightBase
class UParticleModuleLightBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLightBase");
		return Clss;
	}

};

// 0x110 (0x140 - 0x30)
// Class Engine.ParticleModuleLight
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                         bUseInverseSquaredFalloff;                         // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAffectsTranslucency;                              // 0x31(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FC2[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOverrideInverseExposureBlend : 1;                 // Mask: 0x1, PropSize: 0x10x34(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_137 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FC3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bPreviewLightRadius;                               // 0x38(0x1)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FC4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpawnFraction;                                     // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                ColorScaleOverLife;                                // 0x40(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 BrightnessOverLife;                                // 0xA0(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 RadiusScale;                                       // 0xD0(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 LightExponent;                                     // 0x100(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        InverseExposureBlend;                              // 0x130(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                     LightingChannels;                                  // 0x134(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FC6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VolumetricScatteringIntensity;                     // 0x138(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHighQualityLights;                                // 0x13C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShadowCastingLights;                              // 0x13D(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FC8[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLight");
		return Clss;
	}

};

// 0x20 (0x160 - 0x140)
// Class Engine.ParticleModuleLight_Seeded
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x140(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLight_Seeded");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleLocationBase
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationBase");
		return Clss;
	}

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleLocation
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                StartLocation;                                     // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        DistributeOverNPoints;                             // 0x90(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistributeThreshold;                               // 0x94(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocation");
		return Clss;
	}

};

// 0x50 (0x80 - 0x30)
// Class Engine.ParticleModuleLocationBoneSocket
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	enum class ELocationBoneSocketSource         SourceType;                                        // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FCD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               UniversalOffset;                                   // 0x38(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLocationBoneSocketInfo>       SourceLocations;                                   // 0x50(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class ELocationBoneSocketSelectionMethod SelectionMethod;                                   // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FCE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUpdatePositionEachFrame : 1;                      // Mask: 0x1, PropSize: 0x10x64(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrientMeshEmitters : 1;                           // Mask: 0x2, PropSize: 0x10x64(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritBoneVelocity : 1;                          // Mask: 0x4, PropSize: 0x10x64(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_138 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FCF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritVelocityScale;                              // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SkelMeshActorParamName;                            // 0x6C(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumPreSelectedIndices;                             // 0x74(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FD0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationBoneSocket");
		return Clss;
	}

};

// 0x180 (0x1B0 - 0x30)
// Class Engine.ParticleModuleLocationDirect
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                Location;                                          // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                LocationOffset;                                    // 0x90(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                ScaleFactor;                                       // 0xF0(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                Direction;                                         // 0x150(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationDirect");
		return Clss;
	}

};

// 0x20 (0x50 - 0x30)
// Class Engine.ParticleModuleLocationEmitter
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	class FName                                  EmitterName;                                       // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ELocationEmitterSelectionMethod   SelectionMethod;                                   // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FD5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        InheritSourceVelocity : 1;                         // Mask: 0x1, PropSize: 0x10x3C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_139 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FD6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritSourceVelocityScale;                        // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritSourceRotation : 1;                        // Mask: 0x1, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FD8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritSourceRotationScale;                        // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FD9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationEmitter");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleLocationEmitterDirect
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	class FName                                  EmitterName;                                       // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationEmitterDirect");
		return Clss;
	}

};

// 0x98 (0xC8 - 0x30)
// Class Engine.ParticleModuleLocationPrimitiveBase
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	uint8                                        Positive_X : 1;                                    // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Positive_Y : 1;                                    // Mask: 0x2, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Positive_Z : 1;                                    // Mask: 0x4, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_X : 1;                                    // Mask: 0x8, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_Y : 1;                                    // Mask: 0x10, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_Z : 1;                                    // Mask: 0x20, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        SurfaceOnly : 1;                                   // Mask: 0x40, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Velocity : 1;                                      // Mask: 0x80, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FDD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 VelocityScale;                                     // 0x38(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                StartLocation;                                     // 0x68(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveBase");
		return Clss;
	}

};

// 0x70 (0x138 - 0xC8)
// Class Engine.ParticleModuleLocationPrimitiveCylinder
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	uint8                                        RadialVelocity : 1;                                // Mask: 0x1, PropSize: 0x10xC8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FE0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 StartRadius;                                       // 0xD0(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 StartHeight;                                       // 0x100(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class ECylinderHeightAxis               HeightAxis;                                        // 0x130(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FE2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveCylinder");
		return Clss;
	}

};

// 0x20 (0x158 - 0x138)
// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x138(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveCylinder_Seeded");
		return Clss;
	}

};

// 0x30 (0xF8 - 0xC8)
// Class Engine.ParticleModuleLocationPrimitiveSphere
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                 StartRadius;                                       // 0xC8(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveSphere");
		return Clss;
	}

};

// 0x20 (0x118 - 0xF8)
// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0xF8(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveSphere_Seeded");
		return Clss;
	}

};

// 0xF0 (0x120 - 0x30)
// Class Engine.ParticleModuleLocationPrimitiveTriangle
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                StartOffset;                                       // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Height;                                            // 0x90(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Angle;                                             // 0xC0(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Thickness;                                         // 0xF0(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveTriangle");
		return Clss;
	}

};

// 0x80 (0xB0 - 0x30)
// Class Engine.ParticleModuleLocationSkelVertSurface
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	enum class ELocationSkelVertSurfaceSource    SourceType;                                        // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FE6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               UniversalOffset;                                   // 0x38(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdatePositionEachFrame : 1;                      // Mask: 0x1, PropSize: 0x10x50(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrientMeshEmitters : 1;                           // Mask: 0x2, PropSize: 0x10x50(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritBoneVelocity : 1;                          // Mask: 0x4, PropSize: 0x10x50(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13C : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FE8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritVelocityScale;                              // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SkelMeshActorParamName;                            // 0x58(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                          ValidAssociatedBones;                              // 0x60(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bEnforceNormalCheck : 1;                           // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FEB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               NormalToCompare;                                   // 0x78(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NormalCheckToleranceDegrees;                       // 0x90(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NormalCheckTolerance;                              // 0x94(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                ValidMaterialIndices;                              // 0x98(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bInheritVertexColor : 1;                           // Mask: 0x1, PropSize: 0x10xA8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritUV : 1;                                    // Mask: 0x2, PropSize: 0x10xA8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13E : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1FEC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       InheritUVChannel;                                  // 0xAC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationSkelVertSurface");
		return Clss;
	}

};

// 0x0 (0x98 - 0x98)
// Class Engine.ParticleModuleLocationWorldOffset
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationWorldOffset");
		return Clss;
	}

};

// 0x20 (0xB8 - 0x98)
// Class Engine.ParticleModuleLocationWorldOffset_Seeded
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x98(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationWorldOffset_Seeded");
		return Clss;
	}

};

// 0x20 (0xB8 - 0x98)
// Class Engine.ParticleModuleLocation_Seeded
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x98(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocation_Seeded");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleMaterialBase
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMaterialBase");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleMeshMaterial
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>            MeshMaterials;                                     // 0x30(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshMaterial");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleRotationBase
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationBase");
		return Clss;
	}

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleMeshRotation
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                StartRotation;                                     // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bInheritParent : 1;                                // Mask: 0x1, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FF0[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotation");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleRotationRateBase
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationRateBase");
		return Clss;
	}

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleMeshRotationRate
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                StartRotationRate;                                 // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotationRate");
		return Clss;
	}

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                LifeMultiplier;                                    // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotationRateMultiplyLife");
		return Clss;
	}

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleMeshRotationRateOverLife
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                RotRate;                                           // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bScaleRotRate : 1;                                 // Mask: 0x1, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FF1[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotationRateOverLife");
		return Clss;
	}

};

// 0x20 (0xB0 - 0x90)
// Class Engine.ParticleModuleMeshRotationRate_Seeded
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x90(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotationRate_Seeded");
		return Clss;
	}

};

// 0x20 (0xB8 - 0x98)
// Class Engine.ParticleModuleMeshRotation_Seeded
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x98(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotation_Seeded");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleOrbitBase
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	uint8                                        bUseEmitterTime : 1;                               // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FF2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleOrbitBase");
		return Clss;
	}

};

// 0x140 (0x178 - 0x38)
// Class Engine.ParticleModuleOrbit
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	enum class EOrbitChainMode                   ChainMode;                                         // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FF3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                OffsetAmount;                                      // 0x40(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                         OffsetOptions;                                     // 0xA0(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FF5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                RotationAmount;                                    // 0xA8(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                         RotationOptions;                                   // 0x108(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FF6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                RotationRateAmount;                                // 0x110(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                         RotationRateOptions;                               // 0x170(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FF7[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleOrbit");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleOrientationBase
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleOrientationBase");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleOrientationAxisLock
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	enum class EParticleAxisLock                 LockAxisFlags;                                     // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FF8[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleOrientationAxisLock");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleParameterBase
class UParticleModuleParameterBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleParameterBase");
		return Clss;
	}

};

// 0x18 (0x48 - 0x30)
// Class Engine.ParticleModuleParameterDynamic
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>      DynamicParams;                                     // 0x30(0x10)(Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        UpdateFlags;                                       // 0x40(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsesVelocity : 1;                                 // Mask: 0x1, PropSize: 0x10x44(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1FFB[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleParameterDynamic");
		return Clss;
	}

};

// 0x20 (0x68 - 0x48)
// Class Engine.ParticleModuleParameterDynamic_Seeded
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x48(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleParameterDynamic_Seeded");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModulePivotOffset
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                             PivotOffset;                                       // 0x30(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModulePivotOffset");
		return Clss;
	}

};

// 0x148 (0x178 - 0x30)
// Class Engine.ParticleModuleRequired
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                    Material;                                          // 0x30(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinFacingCameraBlendDistance;                      // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxFacingCameraBlendDistance;                      // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               EmitterOrigin;                                     // 0x40(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              EmitterRotation;                                   // 0x58(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	enum class EParticleScreenAlignment          ScreenAlignment;                                   // 0x70(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseLocalSpace : 1;                                // Mask: 0x1, PropSize: 0x10x71(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bKillOnDeactivate : 1;                             // Mask: 0x2, PropSize: 0x10x71(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bKillOnCompleted : 1;                              // Mask: 0x4, PropSize: 0x10x71(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13F : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EParticleSortMode                 SortMode;                                          // 0x72(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseLegacyEmitterTime : 1;                         // Mask: 0x1, PropSize: 0x10x73(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRemoveHMDRoll : 1;                                // Mask: 0x2, PropSize: 0x10x73(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportLargeWorldCoordinates : 1;                 // Mask: 0x4, PropSize: 0x10x73(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEmitterDurationUseRange : 1;                      // Mask: 0x8, PropSize: 0x10x73(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_140 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	float                                        EmitterDuration;                                   // 0x74(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 SpawnRate;                                         // 0x78(0x30)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FParticleBurst>                BurstList;                                         // 0xA8(0x10)(ExportObject, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
	float                                        EmitterDelay;                                      // 0xB8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EmitterDelayLow;                                   // 0xBC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDelayFirstLoopOnly : 1;                           // Mask: 0x1, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_141 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EParticleSubUVInterpMethod        InterpolationMethod;                               // 0xC1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bScaleUV : 1;                                      // Mask: 0x1, PropSize: 0x10xC2(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEmitterDelayUseRange : 1;                         // Mask: 0x2, PropSize: 0x10xC2(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_142 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EParticleBurstMethod              ParticleBurstMethod;                               // 0xC3(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideSystemMacroUV : 1;                        // Mask: 0x1, PropSize: 0x10xC4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseMaxDrawCount : 1;                              // Mask: 0x2, PropSize: 0x10xC4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_143 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EOpacitySourceMode                OpacitySourceMode;                                 // 0xC5(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EEmitterNormalsMode               EmitterNormalsMode;                                // 0xC6(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrbitModuleAffectsVelocityAlignment : 1;          // Mask: 0x1, PropSize: 0x10xC7(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_144 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	int32                                        SubImages_Horizontal;                              // 0xC8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubImages_Vertical;                                // 0xCC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RandomImageTime;                                   // 0xD0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RandomImageChanges;                                // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MacroUVPosition;                                   // 0xD8(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MacroUVRadius;                                     // 0xF0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleUVFlipMode               UVFlippingMode;                                    // 0xF4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESubUVBoundingVertexCount         BoundingMode;                                      // 0xF5(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDurationRecalcEachLoop : 1;                       // Mask: 0x1, PropSize: 0x10xF6(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_145 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_200C[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               NormalsSphereCenter;                               // 0xF8(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AlphaThreshold;                                    // 0x110(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EmitterLoops;                                      // 0x114(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            CutoutTexture;                                     // 0x118(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxDrawCount;                                      // 0x120(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EmitterDurationLow;                                // 0x124(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               NormalsCylinderDirection;                          // 0x128(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                          NamedMaterialOverrides;                            // 0x140(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_200D[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRequired");
		return Clss;
	}

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleRotation
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                 StartRotation;                                     // 0x30(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotation");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleRotationOverLifetime
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                 RotationOverLife;                                  // 0x30(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Scale : 1;                                         // Mask: 0x1, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_200E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationOverLifetime");
		return Clss;
	}

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleRotationRate
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                 StartRotationRate;                                 // 0x30(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationRate");
		return Clss;
	}

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleRotationRateMultiplyLife
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                 LifeMultiplier;                                    // 0x30(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationRateMultiplyLife");
		return Clss;
	}

};

// 0x20 (0x80 - 0x60)
// Class Engine.ParticleModuleRotationRate_Seeded
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x60(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationRate_Seeded");
		return Clss;
	}

};

// 0x20 (0x80 - 0x60)
// Class Engine.ParticleModuleRotation_Seeded
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x60(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotation_Seeded");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleSizeBase
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSizeBase");
		return Clss;
	}

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleSize
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                StartSize;                                         // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSize");
		return Clss;
	}

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleSizeMultiplyLife
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                LifeMultiplier;                                    // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        MultiplyX : 1;                                     // Mask: 0x1, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MultiplyY : 1;                                     // Mask: 0x2, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MultiplyZ : 1;                                     // Mask: 0x4, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_200F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSizeMultiplyLife");
		return Clss;
	}

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleSizeScale
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                SizeScale;                                         // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        EnableX : 1;                                       // Mask: 0x1, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        EnableY : 1;                                       // Mask: 0x2, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        EnableZ : 1;                                       // Mask: 0x4, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2010[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSizeScale");
		return Clss;
	}

};

// 0x20 (0x50 - 0x30)
// Class Engine.ParticleModuleSizeScaleBySpeed
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                             SpeedScale;                                        // 0x30(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             MaxScale;                                          // 0x40(0x10)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSizeScaleBySpeed");
		return Clss;
	}

};

// 0x20 (0xB0 - 0x90)
// Class Engine.ParticleModuleSize_Seeded
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x90(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSize_Seeded");
		return Clss;
	}

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleSourceMovement
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                SourceMovementScale;                               // 0x30(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSourceMovement");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleSpawnBase
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	uint8                                        bProcessSpawnRate : 1;                             // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bProcessBurstList : 1;                             // Mask: 0x2, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2012[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSpawnBase");
		return Clss;
	}

};

// 0xA8 (0xE0 - 0x38)
// Class Engine.ParticleModuleSpawn
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                 Rate;                                              // 0x38(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 RateScale;                                         // 0x68(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FParticleBurst>                BurstList;                                         // 0x98(0x10)(Edit, ExportObject, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 BurstScale;                                        // 0xA8(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class EParticleBurstMethod              ParticleBurstMethod;                               // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2013[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bApplyGlobalSpawnRateScale : 1;                    // Mask: 0x1, PropSize: 0x10xDC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2014[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSpawn");
		return Clss;
	}

};

// 0x40 (0x78 - 0x38)
// Class Engine.ParticleModuleSpawnPerUnit
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                        UnitScalar;                                        // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementTolerance;                                 // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 SpawnPerUnit;                                      // 0x40(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        MaxFrameDistance;                                  // 0x70(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreSpawnRateWhenMoving : 1;                    // Mask: 0x1, PropSize: 0x10x74(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreMovementAlongX : 1;                         // Mask: 0x2, PropSize: 0x10x74(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreMovementAlongY : 1;                         // Mask: 0x4, PropSize: 0x10x74(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreMovementAlongZ : 1;                         // Mask: 0x8, PropSize: 0x10x74(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2015[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSpawnPerUnit");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleSubUVBase
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSubUVBase");
		return Clss;
	}

};

// 0x40 (0x70 - 0x30)
// Class Engine.ParticleModuleSubUV
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	class USubUVAnimation*                       Animation;                                         // 0x30(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 SubImageIndex;                                     // 0x38(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bUseRealTime : 1;                                  // Mask: 0x1, PropSize: 0x10x68(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2018[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSubUV");
		return Clss;
	}

};

// 0x40 (0xB0 - 0x70)
// Class Engine.ParticleModuleSubUVMovie
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	uint8                                        bUseEmitterTime : 1;                               // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_146 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2019[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 FrameRate;                                         // 0x78(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        StartingFrame;                                     // 0xA8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_201A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSubUVMovie");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleTrailBase
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTrailBase");
		return Clss;
	}

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleTrailSource
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	enum class ETrail2SourceMethod               SourceMethod;                                      // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_201B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SourceName;                                        // 0x34(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_201C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 SourceStrength;                                    // 0x40(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockSourceStength : 1;                            // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_147 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_201D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SourceOffsetCount;                                 // 0x74(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                       SourceOffsetDefaults;                              // 0x78(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EParticleSourceSelectionMethod    SelectionMethod;                                   // 0x88(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_201E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bInheritRotation : 1;                              // Mask: 0x1, PropSize: 0x10x8C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_201F[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTrailSource");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleTypeDataBase
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataBase");
		return Clss;
	}

};

// 0x18 (0x48 - 0x30)
// Class Engine.ParticleModuleTypeDataAnimTrail
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	uint8                                        bDeadTrailsOnDeactivate : 1;                       // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnablePreviousTangentRecalculation : 1;           // Mask: 0x2, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTangentRecalculationEveryFrame : 1;               // Mask: 0x4, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_148 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2020[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TilingDistance;                                    // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceTessellationStepSize;                      // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TangentTessellationStepSize;                       // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WidthTessellationStepSize;                         // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2021[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataAnimTrail");
		return Clss;
	}

};

// 0x120 (0x150 - 0x30)
// Class Engine.ParticleModuleTypeDataBeam2
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	enum class EBeam2Method                      BeamMethod;                                        // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2022[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TextureTile;                                       // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TextureTileDistance;                               // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Sheets;                                            // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxBeamCount;                                      // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Speed;                                             // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        InterpolationPoints;                               // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysOn : 1;                                     // Mask: 0x1, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_149 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2023[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        UpVectorStepSize;                                  // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BranchParentName;                                  // 0x54(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2025[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 Distance;                                          // 0x60(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class EBeamTaperMethod                  TaperMethod;                                       // 0x90(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2026[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 TaperFactor;                                       // 0x98(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 TaperScale;                                        // 0xC8(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        RenderGeometry : 1;                                // Mask: 0x1, PropSize: 0x10xF8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        RenderDirectLine : 1;                              // Mask: 0x2, PropSize: 0x10xF8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        RenderLines : 1;                                   // Mask: 0x4, PropSize: 0x10xF8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        RenderTessellation : 1;                            // Mask: 0x8, PropSize: 0x10xF8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2027[0x57];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataBeam2");
		return Clss;
	}

};

// 0x5A0 (0x5D0 - 0x30)
// Class Engine.ParticleModuleTypeDataGpu
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	struct FGPUSpriteEmitterInfo                 EmitterInfo;                                       // 0x30(0x350)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGPUSpriteResourceData                ResourceData;                                      // 0x380(0x240)(NativeAccessSpecifierPublic)
	float                                        CameraMotionBlurAmount;                            // 0x5C0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClearExistingParticlesOnInit : 1;                 // Mask: 0x1, PropSize: 0x10x5C4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_202A[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataGpu");
		return Clss;
	}

};

// 0x80 (0xB0 - 0x30)
// Class Engine.ParticleModuleTypeDataMesh
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                           Mesh;                                              // 0x30(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_202D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LODSizeScale;                                      // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseStaticMeshLODs : 1;                            // Mask: 0x1, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastShadows : 1;                                   // Mask: 0x2, PropSize: 0x10x44(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DoCollisions : 1;                                  // Mask: 0x4, PropSize: 0x10x44(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14A : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMeshScreenAlignment              MeshAlignment;                                     // 0x45(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideMaterial : 1;                             // Mask: 0x1, PropSize: 0x10x46(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideDefaultMotionBlurSettings : 1;            // Mask: 0x2, PropSize: 0x10x46(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMotionBlur : 1;                             // Mask: 0x4, PropSize: 0x10x46(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14B : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_202F[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                RollPitchYawRange;                                 // 0x48(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class EParticleAxisLock                 AxisLockOption;                                    // 0xA8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCameraFacing : 1;                                 // Mask: 0x1, PropSize: 0x10xA9(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMeshCameraFacingUpAxis           CameraFacingUpAxisOption;                          // 0xAA(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMeshCameraFacingOptions          CameraFacingOption;                                // 0xAB(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyParticleRotationAsSpin : 1;                  // Mask: 0x1, PropSize: 0x10xAC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFaceCameraDirectionRatherThanPosition : 1;        // Mask: 0x2, PropSize: 0x10xAC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCollisionsConsiderPartilceSize : 1;               // Mask: 0x4, PropSize: 0x10xAC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2032[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataMesh");
		return Clss;
	}

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleTypeDataRibbon
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int32                                        MaxTessellationBetweenParticles;                   // 0x30(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SheetsPerTrail;                                    // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxTrailCount;                                     // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxParticleInTrailCount;                           // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDeadTrailsOnDeactivate : 1;                       // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDeadTrailsOnSourceLoss : 1;                       // Mask: 0x2, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClipSourceSegement : 1;                           // Mask: 0x4, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnablePreviousTangentRecalculation : 1;           // Mask: 0x8, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTangentRecalculationEveryFrame : 1;               // Mask: 0x10, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSpawnInitialParticle : 1;                         // Mask: 0x20, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14D : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2034[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETrailsRenderAxisOption           RenderAxis;                                        // 0x44(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2035[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TangentSpawningScalar;                             // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderGeometry : 1;                               // Mask: 0x1, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderSpawnPoints : 1;                            // Mask: 0x2, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderTangents : 1;                               // Mask: 0x4, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderTessellation : 1;                           // Mask: 0x8, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14E : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2036[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TilingDistance;                                    // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceTessellationStepSize;                      // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableTangentDiffInterpScale : 1;                 // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2037[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TangentTessellationScalar;                         // 0x5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataRibbon");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleVectorFieldBase
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldBase");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleVectorFieldGlobal
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	uint8                                        bOverrideGlobalVectorFieldTightness : 1;           // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_150 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2038[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlobalVectorFieldScale;                            // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlobalVectorFieldTightness;                        // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2039[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldGlobal");
		return Clss;
	}

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleVectorFieldLocal
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                          VectorField;                                       // 0x30(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               RelativeTranslation;                               // 0x38(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RelativeRotation;                                  // 0x50(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               RelativeScale3D;                                   // 0x68(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Intensity;                                         // 0x80(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Tightness;                                         // 0x84(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreComponentTransform : 1;                     // Mask: 0x1, PropSize: 0x10x88(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTileX : 1;                                        // Mask: 0x2, PropSize: 0x10x88(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTileY : 1;                                        // Mask: 0x4, PropSize: 0x10x88(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTileZ : 1;                                        // Mask: 0x8, PropSize: 0x10x88(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFixDT : 1;                                     // Mask: 0x10, PropSize: 0x10x88(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_203D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldLocal");
		return Clss;
	}

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleVectorFieldRotation
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                               MinInitialRotation;                                // 0x30(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MaxInitialRotation;                                // 0x48(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldRotation");
		return Clss;
	}

};

// 0x18 (0x48 - 0x30)
// Class Engine.ParticleModuleVectorFieldRotationRate
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                               RotationRate;                                      // 0x30(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldRotationRate");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleVectorFieldScale
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                    VectorFieldScale;                                  // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 VectorFieldScaleRaw;                               // 0x38(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldScale");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleVectorFieldScaleOverLife
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                    VectorFieldScaleOverLife;                          // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 VectorFieldScaleOverLifeRaw;                       // 0x38(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldScaleOverLife");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleVelocityBase
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	uint8                                        bInWorldSpace : 1;                                 // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyOwnerScale : 1;                              // Mask: 0x2, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_203F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocityBase");
		return Clss;
	}

};

// 0x90 (0xC8 - 0x38)
// Class Engine.ParticleModuleVelocity
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                StartVelocity;                                     // 0x38(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 StartVelocityRadial;                               // 0x98(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocity");
		return Clss;
	}

};

// 0x78 (0xB0 - 0x38)
// Class Engine.ParticleModuleVelocityCone
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                 Angle;                                             // 0x38(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Velocity;                                          // 0x68(0x30)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                               Direction;                                         // 0x98(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocityCone");
		return Clss;
	}

};

// 0x60 (0x98 - 0x38)
// Class Engine.ParticleModuleVelocityInheritParent
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                Scale;                                             // 0x38(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocityInheritParent");
		return Clss;
	}

};

// 0x68 (0xA0 - 0x38)
// Class Engine.ParticleModuleVelocityOverLifetime
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                VelOverLife;                                       // 0x38(0x60)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Absolute : 1;                                      // Mask: 0x1, PropSize: 0x10x98(0x1)(Edit, ExportObject, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2045[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocityOverLifetime");
		return Clss;
	}

};

// 0x20 (0xE8 - 0xC8)
// Class Engine.ParticleModuleVelocity_Seeded
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0xC8(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocity_Seeded");
		return Clss;
	}

};

// 0x0 (0x1C0 - 0x1C0)
// Class Engine.ParticleSpriteEmitter
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleSpriteEmitter");
		return Clss;
	}

};

// 0x318 (0x850 - 0x538)
// Class Engine.ParticleSystemComponent
class UParticleSystemComponent : public UFXSystemComponent
{
public:
	class UParticleSystem*                       Template;                                          // 0x538(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>            EmitterMaterials;                                  // 0x540(0x10)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class USkeletalMeshComponent*>        SkelMeshComponents;                                // 0x550(0x10)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_20A8[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bResetOnDetach : 1;                                // Mask: 0x1, PropSize: 0x10x561(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateOnDedicatedServer : 1;                      // Mask: 0x2, PropSize: 0x10x561(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_152 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowRecycling : 1;                               // Mask: 0x10, PropSize: 0x10x561(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoManageAttachment : 1;                         // Mask: 0x20, PropSize: 0x10x561(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoAttachWeldSimulatedBodies : 1;                // Mask: 0x40, PropSize: 0x10x561(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_153 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_154 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWarmingUp : 1;                                    // Mask: 0x4, PropSize: 0x10x562(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideLODMethod : 1;                            // Mask: 0x8, PropSize: 0x10x562(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSkipUpdateDynamicDataDuringTick : 1;              // Mask: 0x10, PropSize: 0x10x562(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_155 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_20AB[0xA];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleSystemLODMethod          LODMethod;                                         // 0x56D(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleSignificanceLevel        RequiredSignificance;                              // 0x56E(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20AC[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FParticleSysParam>             InstanceParameters;                                // 0x570(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnParticleSpawn;                                   // 0x580(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnParticleBurst;                                   // 0x590(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnParticleDeath;                                   // 0x5A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnParticleCollide;                                 // 0x5B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                         bOldPositionValid;                                 // 0x5C0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20AE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               OldPosition;                                       // 0x5C8(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PartSysVelocity;                                   // 0x5E0(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WarmupTime;                                        // 0x5F8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WarmupTickRate;                                    // 0x5FC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20B1[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SecondsBeforeInactive;                             // 0x604(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20B2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxTimeBeforeForceUpdateTransform;                 // 0x60C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20B3[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleSystemReplay*>         ReplayClips;                                       // 0x630(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_20B4[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CustomTimeDilation;                                // 0x648(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20B5[0x54];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class USceneComponent>        AutoAttachParent;                                  // 0x6A0(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  AutoAttachSocketName;                              // 0x6A8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAttachmentRule                   AutoAttachLocationRule;                            // 0x6B0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAttachmentRule                   AutoAttachRotationRule;                            // 0x6B1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAttachmentRule                   AutoAttachScaleRule;                               // 0x6B2(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20B9[0x55];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnSystemFinished;                                  // 0x708(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_20BA[0x138];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleSystemComponent");
		return Clss;
	}

	void SetTrailSourceData(class FName InInFirstSocketName, class FName InInSecondSocketName, enum class ETrailWidthMode InInWidthMode, float InInWidth);
	void SetTemplate(class UParticleSystem* InNewTemplate);
	void SetMaterialParameter(class FName InParameterName, class UMaterialInterface* InParam);
	void SetBeamTargetTangent(int32 InEmitterIndex, const struct FVector& InNewTangentPoint, int32 InTargetIndex);
	void SetBeamTargetStrength(int32 InEmitterIndex, float InNewTargetStrength, int32 InTargetIndex);
	void SetBeamTargetPoint(int32 InEmitterIndex, const struct FVector& InNewTargetPoint, int32 InTargetIndex);
	void SetBeamSourceTangent(int32 InEmitterIndex, const struct FVector& InNewTangentPoint, int32 InSourceIndex);
	void SetBeamSourceStrength(int32 InEmitterIndex, float InNewSourceStrength, int32 InSourceIndex);
	void SetBeamSourcePoint(int32 InEmitterIndex, const struct FVector& InNewSourcePoint, int32 InSourceIndex);
	void SetBeamEndPoint(int32 InEmitterIndex, const struct FVector& InNewEndPoint);
	void SetAutoAttachParams(class USceneComponent* InParent, class FName InSocketName, enum class EAttachLocation InLocationType);
	int32 GetNumActiveParticles();
	class UMaterialInterface* GetNamedMaterial(class FName InInName);
	bool GetBeamTargetTangent(int32 InEmitterIndex, int32 InTargetIndex, struct FVector* InOutTangentPoint);
	bool GetBeamTargetStrength(int32 InEmitterIndex, int32 InTargetIndex, float* InOutTargetStrength);
	bool GetBeamTargetPoint(int32 InEmitterIndex, int32 InTargetIndex, struct FVector* InOutTargetPoint);
	bool GetBeamSourceTangent(int32 InEmitterIndex, int32 InSourceIndex, struct FVector* InOutTangentPoint);
	bool GetBeamSourceStrength(int32 InEmitterIndex, int32 InSourceIndex, float* InOutSourceStrength);
	bool GetBeamSourcePoint(int32 InEmitterIndex, int32 InSourceIndex, struct FVector* InOutSourcePoint);
	bool GetBeamEndPoint(int32 InEmitterIndex, struct FVector* InOutEndPoint);
	void GenerateParticleEvent(class FName InInEventName, float InInEmitterTime, const struct FVector& InInLocation, const struct FVector& InInDirection, const struct FVector& InInVelocity);
	void EndTrails();
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(class FName InInName, class UMaterialInterface* InSourceMaterial);
	void BeginTrails(class FName InInFirstSocketName, class FName InInSecondSocketName, enum class ETrailWidthMode InInWidthMode, float InInWidth);
};

// 0x18 (0x40 - 0x28)
// Class Engine.ParticleSystemReplay
class UParticleSystemReplay : public UObject
{
public:
	int32                                        ClipIDNumber;                                      // 0x28(0x4)(Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20CC[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleSystemReplay");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.PathFollowingAgentInterface
class IPathFollowingAgentInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PathFollowingAgentInterface");
		return Clss;
	}

};

// 0x30 (0x2D0 - 0x2A0)
// Class Engine.PhysicsSpringComponent
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                        SpringStiffness;                                   // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpringDamping;                                     // 0x2A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpringLengthAtRest;                                // 0x2A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpringRadius;                                      // 0x2AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 SpringChannel;                                     // 0x2B0(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIgnoreSelf;                                       // 0x2B1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20E3[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpringCompression;                                 // 0x2B4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20E4[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsSpringComponent");
		return Clss;
	}

	struct FVector GetSpringRestingPoint();
	struct FVector GetSpringDirection();
	struct FVector GetSpringCurrentEndPoint();
	float GetNormalizedCompressionScalar();
};

// 0x0 (0x28 - 0x28)
// Class Engine.PhysicsThreadLibrary
class UPhysicsThreadLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsThreadLibrary");
		return Clss;
	}

	void AddForce(const struct FBodyInstanceAsyncPhysicsTickHandle& InHandle, const struct FVector& InForce, bool InbAccelChange);
};

// 0x10 (0x2B0 - 0x2A0)
// Class Engine.PhysicsThrusterComponent
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	float                                        ThrustStrength;                                    // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20EF[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsThrusterComponent");
		return Clss;
	}

};

// 0x10 (0x2A0 - 0x290)
// Class Engine.SceneCapture
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                  MeshComp;                                          // 0x290(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                       SceneComponent;                                    // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCapture");
		return Clss;
	}

};

// 0x10 (0x2B0 - 0x2A0)
// Class Engine.PlanarReflection
class APlanarReflection : public ASceneCapture
{
public:
	class UPlanarReflectionComponent*            PlanarReflectionComponent;                         // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bShowPreviewPlane;                                 // 0x2A8(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_20F7[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlanarReflection");
		return Clss;
	}

	void OnInterpToggle(bool InbEnable);
};

// 0xB8 (0x358 - 0x2A0)
// Class Engine.SceneCaptureComponent
class USceneCaptureComponent : public USceneComponent
{
public:
	enum class ESceneCapturePrimitiveRenderMode  PrimitiveRenderMode;                               // 0x2A0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESceneCaptureSource               CaptureSource;                                     // 0x2A1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCaptureEveryFrame : 1;                            // Mask: 0x1, PropSize: 0x10x2A2(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCaptureOnMovement : 1;                            // Mask: 0x2, PropSize: 0x10x2A2(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_159 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	bool                                         bAlwaysPersistRenderingState;                      // 0x2A3(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_210D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> HiddenComponents;                                  // 0x2A8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        HiddenActors;                                      // 0x2B8(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> ShowOnlyComponents;                                // 0x2C8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        ShowOnlyActors;                                    // 0x2D8(0x10)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        LODDistanceFactor;                                 // 0x2E8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxViewDistanceOverride;                           // 0x2EC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CaptureSortPriority;                               // 0x2F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseRayTracingIfEnabled;                           // 0x2F4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_210F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FEngineShowFlagsSetting>       ShowFlagSettings;                                  // 0x2F8(0x10)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	uint8                                        Pad_2111[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ProfilingEventName;                                // 0x338(0x10)(Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2112[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCaptureComponent");
		return Clss;
	}

	void ShowOnlyComponent(class UPrimitiveComponent* InInComponent);
	void ShowOnlyActorComponents(class AActor* InInActor, bool InbIncludeFromChildActors);
	void SetCaptureSortPriority(int32 InNewCaptureSortPriority);
	void RemoveShowOnlyComponent(class UPrimitiveComponent* InInComponent);
	void RemoveShowOnlyActorComponents(class AActor* InInActor, bool InbIncludeFromChildActors);
	void HideComponent(class UPrimitiveComponent* InInComponent);
	void HideActorComponents(class AActor* InInActor, bool InbIncludeFromChildActors);
	void ClearShowOnlyComponents();
	void ClearHiddenComponents();
};

// 0x168 (0x4C0 - 0x358)
// Class Engine.PlanarReflectionComponent
class UPlanarReflectionComponent : public USceneCaptureComponent
{
public:
	class UBoxComponent*                         PreviewBox;                                        // 0x358(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NormalDistortionStrength;                          // 0x360(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PrefilterRoughness;                                // 0x364(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PrefilterRoughnessDistance;                        // 0x368(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ScreenPercentage;                                  // 0x36C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExtraFOV;                                          // 0x370(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFromPlaneFadeStart;                        // 0x374(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFromPlaneFadeEnd;                          // 0x378(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFromPlaneFadeoutStart;                     // 0x37C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFromPlaneFadeoutEnd;                       // 0x380(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngleFromPlaneFadeStart;                           // 0x384(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngleFromPlaneFadeEnd;                             // 0x388(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowPreviewPlane;                                 // 0x38C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRenderSceneTwoSided;                              // 0x38D(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_211F[0x132];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlanarReflectionComponent");
		return Clss;
	}

};

// 0x0 (0x298 - 0x298)
// Class Engine.PlaneReflectionCapture
class APlaneReflectionCapture : public AReflectionCapture
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlaneReflectionCapture");
		return Clss;
	}

};

// 0x20 (0x330 - 0x310)
// Class Engine.PlaneReflectionCaptureComponent
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                        InfluenceRadiusScale;                              // 0x310(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2123[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDrawSphereComponent*                  PreviewInfluenceRadius;                            // 0x318(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                         PreviewCaptureBox;                                 // 0x320(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2124[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlaneReflectionCaptureComponent");
		return Clss;
	}

};

// 0x88 (0xB0 - 0x28)
// Class Engine.PlatformInterfaceWebResponse
class UPlatformInterfaceWebResponse : public UObject
{
public:
	class FString                                OriginalURL;                                       // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ResponseCode;                                      // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Tag;                                               // 0x3C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                StringResponse;                                    // 0x40(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                BinaryResponse;                                    // 0x50(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2137[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlatformInterfaceWebResponse");
		return Clss;
	}

	int32 GetNumHeaders();
	class FString GetHeaderValue(const class FString& InHeaderName);
	void GetHeader(int32 InHeaderIndex, class FString* InHeader, class FString* InValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.PlayerStateCountLimiterConfig
class UPlayerStateCountLimiterConfig : public UNetObjectCountLimiterConfig
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerStateCountLimiterConfig");
		return Clss;
	}

};

// 0x8 (0x2A8 - 0x2A0)
// Class Engine.PointLight
class APointLight : public ALight
{
public:
	class UPointLightComponent*                  PointLightComponent;                               // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PointLight");
		return Clss;
	}

	void SetRadius(float InNewRadius);
	void SetLightFalloffExponent(float InNewLightFalloffExponent);
};

// 0x10 (0x38 - 0x28)
// Class Engine.Polys
class UPolys : public UObject
{
public:
	uint8                                        Pad_213F[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Polys");
		return Clss;
	}

};

// 0x30 (0x2F8 - 0x2C8)
// Class Engine.PrecomputedVisibilityOverrideVolume
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                        OverrideVisibleActors;                             // 0x2C8(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        OverrideInvisibleActors;                           // 0x2D8(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                          OverrideInvisibleLevels;                           // 0x2E8(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PrecomputedVisibilityOverrideVolume");
		return Clss;
	}

};

// 0x0 (0x290 - 0x290)
// Class Engine.RigidBodyBase
class ARigidBodyBase : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RigidBodyBase");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.RadialForceActor
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                 ForceComponent;                                    // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RadialForceActor");
		return Clss;
	}

	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
};

// 0x0 (0x28 - 0x28)
// Class Engine.RVOAvoidanceInterface
class IRVOAvoidanceInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RVOAvoidanceInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Scene
class UScene : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Scene");
		return Clss;
	}

};

// 0x8 (0x2A8 - 0x2A0)
// Class Engine.SceneCapture2D
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*              CaptureComponent2D;                                // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCapture2D");
		return Clss;
	}

	void OnInterpToggle(bool InbEnable);
};

// 0x7F8 (0xB50 - 0x358)
// Class Engine.SceneCaptureComponent2D
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	enum class ECameraProjectionMode             ProjectionType;                                    // 0x358(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_215A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FOVAngle;                                          // 0x35C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OrthoWidth;                                        // 0x360(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_215E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureRenderTarget2D*                TextureTarget;                                     // 0x368(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESceneCaptureCompositeMode        CompositeMode;                                     // 0x370(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2161[0xF];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x380(0x6E0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                        PostProcessBlendWeight;                            // 0xA60(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverride_CustomNearClippingPlane : 1;             // Mask: 0x1, PropSize: 0x10xA64(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2164[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CustomNearClippingPlane;                           // 0xA68(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseCustomProjectionMatrix;                        // 0xA6C(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_216A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMatrix                               CustomProjectionMatrix;                            // 0xA70(0x80)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                         bUseFauxOrthoViewPos;                              // 0xAF0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableOrthographicTiling;                         // 0xAF1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_216C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumXTiles;                                         // 0xAF4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumYTiles;                                         // 0xAF8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableClipPlane;                                  // 0xAFC(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_216D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ClipPlaneBase;                                     // 0xB00(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               ClipPlaneNormal;                                   // 0xB18(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCameraCutThisFrame : 1;                           // Mask: 0x1, PropSize: 0x10xB30(0x1)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // Mask: 0x2, PropSize: 0x10xB30(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_216E[0x1F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCaptureComponent2D");
		return Clss;
	}

	void RemoveBlendable(TScriptInterface<class IBlendableInterface> InInBlendableObject);
	void CaptureScene();
	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InInBlendableObject, float InInWeight);
};

// 0x18 (0x370 - 0x358)
// Class Engine.SceneCaptureComponentCube
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*              TextureTarget;                                     // 0x358(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCaptureRotation;                                  // 0x360(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2170[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCaptureComponentCube");
		return Clss;
	}

	void CaptureScene();
};

// 0x8 (0x2A8 - 0x2A0)
// Class Engine.SceneCaptureCube
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*            CaptureComponentCube;                              // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCaptureCube");
		return Clss;
	}

	void OnInterpToggle(bool InbEnable);
};

// 0x50 (0x2E0 - 0x290)
// Class Engine.ServerStreamingLevelsVisibility
class AServerStreamingLevelsVisibility : public AActor
{
public:
	uint8                                        Pad_2174[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ServerStreamingLevelsVisibility");
		return Clss;
	}

};

// 0x8 (0x2B0 - 0x2A8)
// Class Engine.ShadowMapTexture2D
class UShadowMapTexture2D : public UTexture2D
{
public:
	enum class EShadowMapFlags                   ShadowmapFlags;                                    // 0x2A8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2175[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ShadowMapTexture2D");
		return Clss;
	}

};

// 0x60 (0x88 - 0x28)
// Class Engine.SkeletalMeshSocket
class USkeletalMeshSocket : public UObject
{
public:
	class FName                                  SocketName;                                        // 0x28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BoneName;                                          // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               RelativeLocation;                                  // 0x38(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RelativeRotation;                                  // 0x50(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               RelativeScale;                                     // 0x68(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bForceAlwaysAnimated;                              // 0x80(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2184[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMeshSocket");
		return Clss;
	}

	void InitializeSocketFromLocation(class USkeletalMeshComponent* InSkelComp, const struct FVector& InWorldLocation, const struct FVector& InWorldNormal);
	struct FVector GetSocketLocation(class USkeletalMeshComponent* InSkelComp);
};

// 0x8 (0xD8 - 0xD0)
// Class Engine.SkinnedAsset
class USkinnedAsset : public UStreamableRenderAsset
{
public:
	uint8                                        Pad_2192[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkinnedAsset");
		return Clss;
	}

	class USkeletalMeshSocket* FindSocketInfo(class FName InInSocketName, struct FTransform* InOutTransform, int32* InOutBoneIndex, int32* InOutIndex);
	class USkeletalMeshSocket* FindSocket(class FName InInSocketName);
};

// 0x1D8 (0x4B0 - 0x2D8)
// Class Engine.SkyLightComponent
class USkyLightComponent : public ULightComponentBase
{
public:
	bool                                         bRealTimeCapture;                                  // 0x2D8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESkyLightSourceType               SourceType;                                        // 0x2D9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_21DE[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          Cubemap;                                           // 0x2E0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SourceCubemapAngle;                                // 0x2E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CubemapResolution;                                 // 0x2EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkyDistanceThreshold;                              // 0x2F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCaptureEmissiveOnly;                              // 0x2F4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLowerHemisphereIsBlack;                           // 0x2F5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_21E3[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          LowerHemisphereColor;                              // 0x2F8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OcclusionMaxDistance;                              // 0x308(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Contrast;                                          // 0x30C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OcclusionExponent;                                 // 0x310(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinOcclusion;                                      // 0x314(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                OcclusionTint;                                     // 0x318(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCloudAmbientOcclusion : 1;                        // Mask: 0x1, PropSize: 0x10x31C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_21E7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CloudAmbientOcclusionStrength;                     // 0x320(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CloudAmbientOcclusionExtent;                       // 0x324(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CloudAmbientOcclusionMapResolutionScale;           // 0x328(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CloudAmbientOcclusionApertureScale;                // 0x32C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EOcclusionCombineMode             OcclusionCombineMode;                              // 0x330(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_21EB[0xA7];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          BlendDestinationCubemap;                           // 0x3D8(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_21EC[0xD0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkyLightComponent");
		return Clss;
	}

	void SetVolumetricScatteringIntensity(float InNewIntensity);
	void SetSourceCubemapAngle(float InNewValue);
	void SetOcclusionTint(struct FColor& InInTint);
	void SetOcclusionExponent(float InInOcclusionExponent);
	void SetOcclusionContrast(float InInOcclusionContrast);
	void SetMinOcclusion(float InInMinOcclusion);
	void SetLowerHemisphereColor(struct FLinearColor& InInLowerHemisphereColor);
	void SetLightColor(const struct FLinearColor& InNewLightColor);
	void SetIntensity(float InNewIntensity);
	void SetIndirectLightingIntensity(float InNewIntensity);
	void SetCubemapBlend(class UTextureCube* InSourceCubemap, class UTextureCube* InDestinationCubemap, float InInBlendFraction);
	void SetCubemap(class UTextureCube* InNewCubemap);
	void RecaptureSky();
};

// 0x0 (0x28 - 0x28)
// Class Engine.SMInstanceManager
class ISMInstanceManager : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SMInstanceManager");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.SMInstanceManagerProvider
class ISMInstanceManagerProvider : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SMInstanceManagerProvider");
		return Clss;
	}

};

// 0x3C8 (0x3F0 - 0x28)
// Class Engine.SoundAttenuation
class USoundAttenuation : public UObject
{
public:
	struct FSoundAttenuationSettings             Attenuation;                                       // 0x28(0x3C8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundAttenuation");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.SoundEffectPresetWidgetInterface
class ISoundEffectPresetWidgetInterface : public IAudioPanelWidgetInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundEffectPresetWidgetInterface");
		return Clss;
	}

	void OnPropertyChanged(class USoundEffectPreset* InPreset, class FName InPropertyName);
	void OnConstructed(class USoundEffectPreset* InPreset);
	TSubclassOf<class USoundEffectPreset> GetClass();
};

// 0x18 (0x40 - 0x28)
// Class Engine.SoundEffectSourcePresetChain
class USoundEffectSourcePresetChain : public UObject
{
public:
	TArray<struct FSourceEffectChainEntry>       Chain;                                             // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bPlayEffectChainTails : 1;                         // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2204[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundEffectSourcePresetChain");
		return Clss;
	}

};

// 0x60 (0x88 - 0x28)
// Class Engine.SoundGroups
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                   SoundGroupProfiles;                                // 0x28(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2206[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundGroups");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.SoundNode
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                    ChildNodes;                                        // 0x28(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_2208[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNode");
		return Clss;
	}

};

// 0x40 (0x88 - 0x48)
// Class Engine.SoundNodeModulatorContinuous
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams            PitchModulationParams;                             // 0x48(0x20)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FModulatorContinuousParams            VolumeModulationParams;                            // 0x68(0x20)(Edit, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeModulatorContinuous");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.SoundSubmixWidgetInterface
class ISoundSubmixWidgetInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundSubmixWidgetInterface");
		return Clss;
	}

	void OnConstructed(class USoundSubmixBase* InSoundSubmix);
};

// 0x8 (0x2A0 - 0x298)
// Class Engine.SphereReflectionCapture
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                  DrawCaptureRadius;                                 // 0x298(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SphereReflectionCapture");
		return Clss;
	}

};

// 0x10 (0x320 - 0x310)
// Class Engine.SphereReflectionCaptureComponent
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                        InfluenceRadius;                                   // 0x310(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CaptureDistanceScale;                              // 0x314(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDrawSphereComponent*                  PreviewInfluenceRadius;                            // 0x318(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SphereReflectionCaptureComponent");
		return Clss;
	}

};

// 0x188 (0x258 - 0xD0)
// Class Engine.StaticMesh
class UStaticMesh : public UStreamableRenderAsset
{
public:
	uint8                                        Pad_2265[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerQualityLevelInt                   MinQualityLevelLOD;                                // 0xF0(0x68)(NativeAccessSpecifierPublic)
	struct FPerPlatformInt                       MinLOD;                                            // 0x158(0x4)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2268[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FStaticMaterial>               StaticMaterials;                                   // 0x160(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                        LightmapUVDensity;                                 // 0x170(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        LightMapResolution;                                // 0x174(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LightMapCoordinateIndex;                           // 0x178(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFieldSelfShadowBias;                       // 0x17C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                            BodySetup;                                         // 0x180(0x8)(Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        LODForCollision;                                   // 0x188(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateMeshDistanceField : 1;                    // Mask: 0x1, PropSize: 0x10x18C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStripComplexCollisionForConsole : 1;              // Mask: 0x2, PropSize: 0x10x18C(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasNavigationData : 1;                            // Mask: 0x4, PropSize: 0x10x18C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportUniformlyDistributedSampling : 1;          // Mask: 0x8, PropSize: 0x10x18C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportPhysicalMaterialMasks : 1;                 // Mask: 0x10, PropSize: 0x10x18C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportRayTracing : 1;                            // Mask: 0x20, PropSize: 0x10x18C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDoFastBuild : 1;                                  // Mask: 0x40, PropSize: 0x10x18C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsBuiltAtRuntime : 1;                             // Mask: 0x80, PropSize: 0x10x18C(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_15C : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowCPUAccess : 1;                               // Mask: 0x2, PropSize: 0x10x18D(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportGpuUniformlyDistributedSampling : 1;       // Mask: 0x4, PropSize: 0x10x18D(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15D : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2272[0x22];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UStaticMeshSocket*>             Sockets;                                           // 0x1B0(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_2273[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PositiveBoundsExtension;                           // 0x1D0(0x18)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               NegativeBoundsExtension;                           // 0x1E8(0x18)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                      ExtendedBounds;                                    // 0x200(0x38)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                        ElementToIgnoreForTexFactor;                       // 0x238(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2276[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x240(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UNavCollisionBase*                     NavCollision;                                      // 0x250(0x8)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StaticMesh");
		return Clss;
	}

	void SetStaticMaterials(TArray<struct FStaticMaterial>& InInStaticMaterials);
	void SetMinLODForQualityLevels(TMap<enum class EPerQualityLevels, int32>& InQualityLevelMinimumLODs, int32 InDefault);
	void SetMinimumLODForPlatforms(TMap<class FName, int32>& InPlatformMinimumLODs);
	void SetMinimumLODForPlatform(class FName& InPlatformName, int32 InInMinLOD);
	void RemoveSocket(class UStaticMeshSocket* InSocket);
	class UStaticMeshDescription* GetStaticMeshDescription(int32 InLODIndex);
	TArray<struct FStaticMaterial> GetStaticMaterials();
	TArray<class UStaticMeshSocket*> GetSocketsByTag(const class FString& InInSocketTag);
	int32 GetNumTriangles(int32 InLODIndex);
	int32 GetNumSections(int32 InInLOD);
	int32 GetNumLODs();
	void GetMinLODForQualityLevels(TMap<enum class EPerQualityLevels, int32>* InQualityLevelMinimumLODs, int32* InDefault);
	void GetMinimumLODForQualityLevels(TMap<class FName, int32>* InQualityLevelMinimumLODs);
	int32 GetMinimumLODForQualityLevel(class FName& InQualityLevel);
	void GetMinimumLODForPlatforms(TMap<class FName, int32>* InPlatformMinimumLODs);
	int32 GetMinimumLODForPlatform(class FName& InPlatformName);
	int32 GetMaterialIndex(class FName InMaterialSlotName);
	class UMaterialInterface* GetMaterial(int32 InMaterialIndex);
	struct FBoxSphereBounds GetBounds();
	struct FBox GetBoundingBox();
	class UStaticMeshSocket* FindSocket(class FName InInSocketName);
	class UStaticMeshDescription* CreateStaticMeshDescription(class UObject* InOuter);
	void BuildFromStaticMeshDescriptions(TArray<class UStaticMeshDescription*>& InStaticMeshDescriptions, bool InbBuildSimpleCollision, bool InbFastBuild);
	void AddSocket(class UStaticMeshSocket* InSocket);
	class FName AddMaterial(class UMaterialInterface* InMaterial);
};

// 0x60 (0x88 - 0x28)
// Class Engine.StaticMeshSocket
class UStaticMeshSocket : public UObject
{
public:
	class FName                                  SocketName;                                        // 0x28(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               RelativeLocation;                                  // 0x30(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RelativeRotation;                                  // 0x48(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               RelativeScale;                                     // 0x60(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Tag;                                               // 0x78(0x10)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StaticMeshSocket");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.StereoLayerShape
class UStereoLayerShape : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StereoLayerShape");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.StereoLayerShapeQuad
class UStereoLayerShapeQuad : public UStereoLayerShape
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StereoLayerShapeQuad");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.StereoLayerShapeCylinder
class UStereoLayerShapeCylinder : public UStereoLayerShape
{
public:
	float                                        Radius;                                            // 0x28(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OverlayArc;                                        // 0x2C(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Height;                                            // 0x30(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2295[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StereoLayerShapeCylinder");
		return Clss;
	}

	void SetRadius(float InInRadius);
	void SetOverlayArc(float InInOverlayArc);
	void SetHeight(int32 InInHeight);
};

// 0x0 (0x28 - 0x28)
// Class Engine.StereoLayerShapeCubemap
class UStereoLayerShapeCubemap : public UStereoLayerShape
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StereoLayerShapeCubemap");
		return Clss;
	}

};

// 0x90 (0xB8 - 0x28)
// Class Engine.StereoLayerShapeEquirect
class UStereoLayerShapeEquirect : public UStereoLayerShape
{
public:
	struct FBox2D                                LeftUVRect;                                        // 0x28(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                RightUVRect;                                       // 0x50(0x28)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                             LeftScale;                                         // 0x78(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             RightScale;                                        // 0x88(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             LeftBias;                                          // 0x98(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             RightBias;                                         // 0xA8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StereoLayerShapeEquirect");
		return Clss;
	}

	void SetEquirectProps(const struct FEquirectProps& InInScaleBiases);
};

// 0x190 (0x430 - 0x2A0)
// Class Engine.StereoLayerComponent
class UStereoLayerComponent : public USceneComponent
{
public:
	uint8                                        bLiveTexture : 1;                                  // Mask: 0x1, PropSize: 0x10x2A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsDepth : 1;                                // Mask: 0x2, PropSize: 0x10x2A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoAlphaChannel : 1;                               // Mask: 0x4, PropSize: 0x10x2A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16A : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_22C3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture*                              Texture;                                           // 0x2A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                              LeftTexture;                                       // 0x2B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bQuadPreserveTextureRatio : 1;                     // Mask: 0x1, PropSize: 0x10x2B8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_22C5[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             QuadSize;                                          // 0x2C0(0x10)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox2D                                UVRect;                                            // 0x2D0(0x28)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                        CylinderRadius;                                    // 0x2F8(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CylinderOverlayArc;                                // 0x2FC(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CylinderHeight;                                    // 0x300(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_22C9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FEquirectProps                        EquirectProps;                                     // 0x308(0x90)(Deprecated, NoDestructor, Protected, NativeAccessSpecifierProtected)
	enum class EStereoLayerType                  StereoLayerType;                                   // 0x398(0x1)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EStereoLayerShape                 StereoLayerShape;                                  // 0x399(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_22CC[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStereoLayerShape*                     Shape;                                             // 0x3A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        Priority;                                          // 0x3A8(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_22CE[0x84];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StereoLayerComponent");
		return Clss;
	}

	void SetUVRect(const struct FBox2D& InInUVRect);
	void SetTexture(class UTexture* InInTexture);
	void SetQuadSize(const struct FVector2D& InInQuadSize);
	void SetPriority(int32 InInPriority);
	void SetLeftTexture(class UTexture* InInTexture);
	void SetEquirectProps(const struct FEquirectProps& InInScaleBiases);
	void MarkTextureForUpdate();
	struct FBox2D GetUVRect();
	class UTexture* GetTexture();
	struct FVector2D GetQuadSize();
	int32 GetPriority();
	class UTexture* GetLeftTexture();
};

// 0x40 (0x68 - 0x28)
// Class Engine.SubUVAnimation
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                            SubUVTexture;                                      // 0x28(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubImages_Horizontal;                              // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubImages_Vertical;                                // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESubUVBoundingVertexCount         BoundingMode;                                      // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EOpacitySourceMode                OpacitySourceMode;                                 // 0x39(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22D2[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AlphaThreshold;                                    // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_22D3[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SubUVAnimation");
		return Clss;
	}

};

// 0x48 (0x70 - 0x28)
// Class Engine.TextPropertyTestObject
class UTextPropertyTestObject : public UObject
{
public:
	class FText                                  DefaultedText;                                     // 0x28(0x18)(NativeAccessSpecifierPublic)
	class FText                                  UndefaultedText;                                   // 0x40(0x18)(NativeAccessSpecifierPublic)
	class FText                                  TransientText;                                     // 0x58(0x18)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextPropertyTestObject");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.TextRenderActor
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                  TextRender;                                        // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextRenderActor");
		return Clss;
	}

};

// 0x58 (0x590 - 0x538)
// Class Engine.TextRenderComponent
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	class FText                                  Text;                                              // 0x538(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    TextMaterial;                                      // 0x550(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 Font;                                              // 0x558(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EHorizTextAligment                HorizontalAlignment;                               // 0x560(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVerticalTextAligment             VerticalAlignment;                                 // 0x561(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2308[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                TextRenderColor;                                   // 0x564(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        XScale;                                            // 0x568(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        YScale;                                            // 0x56C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WorldSize;                                         // 0x570(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InvDefaultSize;                                    // 0x574(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HorizSpacingAdjust;                                // 0x578(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VertSpacingAdjust;                                 // 0x57C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysRenderAsText : 1;                           // Mask: 0x1, PropSize: 0x10x580(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_230D[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextRenderComponent");
		return Clss;
	}

	void SetYScale(float InValue);
	void SetXScale(float InValue);
	void SetWorldSize(float InValue);
	void SetVertSpacingAdjust(float InValue);
	void SetVerticalAlignment(enum class EVerticalTextAligment InValue);
	void SetTextRenderColor(const struct FColor& InValue);
	void SetTextMaterial(class UMaterialInterface* InMaterial);
	void SetHorizSpacingAdjust(float InValue);
	void SetHorizontalAlignment(enum class EHorizTextAligment InValue);
	void SetFont(class UFont* InValue);
	void K2_SetText(class FText& InValue);
	struct FVector GetTextWorldSize();
	struct FVector GetTextLocalSize();
};

// 0x8 (0x1F8 - 0x1F0)
// Class Engine.TextureRenderTarget
class UTextureRenderTarget : public UTexture
{
public:
	float                                        TargetGamma;                                       // 0x1F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2311[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureRenderTarget");
		return Clss;
	}

};

// 0x28 (0x220 - 0x1F8)
// Class Engine.TextureRenderTarget2D
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int32                                        SizeX;                                             // 0x1F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeY;                                             // 0x1FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          ClearColor;                                        // 0x200(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   AddressX;                                          // 0x210(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   AddressY;                                          // 0x211(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceLinearGamma : 1;                             // Mask: 0x1, PropSize: 0x10x212(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHDR : 1;                                          // Mask: 0x2, PropSize: 0x10x212(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGPUSharedFlag : 1;                                // Mask: 0x4, PropSize: 0x10x212(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16D : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ETextureRenderTargetFormat        RenderTargetFormat;                                // 0x213(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoGenerateMips : 1;                             // Mask: 0x1, PropSize: 0x10x214(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ETextureFilter                    MipsSamplerFilter;                                 // 0x215(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   MipsAddressU;                                      // 0x216(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   MipsAddressV;                                      // 0x217(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPixelFormat                      OverrideFormat;                                    // 0x218(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2328[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureRenderTarget2D");
		return Clss;
	}

};

// 0xA0 (0x140 - 0xA0)
// Class Engine.TimelineComponent
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                             TheTimeline;                                       // 0xA0(0x98)(Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x1, PropSize: 0x10x138(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_238C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TimelineComponent");
		return Clss;
	}

	void Stop();
	void SetVectorCurve(class UCurveVector* InNewVectorCurve, class FName InVectorTrackName);
	void SetTimelineLengthMode(enum class ETimelineLengthMode InNewLengthMode);
	void SetTimelineLength(float InNewLength);
	void SetPlayRate(float InNewRate);
	void SetPlaybackPosition(float InNewPosition, bool InbFireEvents, bool InbFireUpdate);
	void SetNewTime(float InNewTime);
	void SetLooping(bool InbNewLooping);
	void SetLinearColorCurve(class UCurveLinearColor* InNewLinearColorCurve, class FName InLinearColorTrackName);
	void SetIgnoreTimeDilation(bool InbNewIgnoreTimeDilation);
	void SetFloatCurve(class UCurveFloat* InNewFloatCurve, class FName InFloatTrackName);
	void ReverseFromEnd();
	void Reverse();
	void PlayFromStart();
	void Play();
	void OnRep_Timeline(struct FTimeline* InOldTimeline);
	bool IsReversing();
	bool IsPlaying();
	bool IsLooping();
	float GetTimelineLength();
	float GetScaledTimelineLength();
	float GetPlayRate();
	float GetPlaybackPosition();
	bool GetIgnoreTimeDilation();
};

// 0x8 (0x298 - 0x290)
// Class Engine.TriggerBase
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                       CollisionComponent;                                // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TriggerBase");
		return Clss;
	}

};

// 0x0 (0x298 - 0x298)
// Class Engine.TriggerBox
class ATriggerBox : public ATriggerBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TriggerBox");
		return Clss;
	}

};

// 0x0 (0x298 - 0x298)
// Class Engine.TriggerCapsule
class ATriggerCapsule : public ATriggerBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TriggerCapsule");
		return Clss;
	}

};

// 0x0 (0x298 - 0x298)
// Class Engine.TriggerSphere
class ATriggerSphere : public ATriggerBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TriggerSphere");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.TwitterIntegrationBase
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TwitterIntegrationBase");
		return Clss;
	}

	bool TwitterRequest(const class FString& InURL, TArray<class FString>& InParamKeysAndValues, enum class ETwitterRequestMethod InRequestMethod, int32 InAccountIndex);
	bool ShowTweetUI(const class FString& InInitialMessage, const class FString& InURL, const class FString& InPicture);
	void Init();
	int32 GetNumAccounts();
	class FString GetAccountName(int32 InAccountIndex);
	bool CanShowTweetUI();
	bool AuthorizeAccounts();
};

// 0x48 (0x108 - 0xC0)
// Class Engine.UserDefinedStruct
class UUserDefinedStruct : public UScriptStruct
{
public:
	enum class EUserDefinedStructureStatus       Status;                                            // 0xC0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23CC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 Guid;                                              // 0xC4(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23CD[0x34];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("UserDefinedStruct");
		return Clss;
	}

};

// 0x40 (0x68 - 0x28)
// Class Engine.VectorField
class UVectorField : public UObject
{
public:
	struct FBox                                  Bounds;                                            // 0x28(0x38)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        Intensity;                                         // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23CF[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VectorField");
		return Clss;
	}

};

// 0x40 (0xA8 - 0x68)
// Class Engine.VectorFieldAnimated
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                            Texture;                                           // 0x68(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVectorFieldConstructionOp        ConstructionOp;                                    // 0x70(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23D3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        VolumeSizeX;                                       // 0x74(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        VolumeSizeY;                                       // 0x78(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        VolumeSizeZ;                                       // 0x7C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubImagesX;                                        // 0x80(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubImagesY;                                        // 0x84(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FrameCount;                                        // 0x88(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FramesPerSecond;                                   // 0x8C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLoop : 1;                                         // Mask: 0x1, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_170 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_23DD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UVectorFieldStatic*                    NoiseField;                                        // 0x98(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NoiseScale;                                        // 0xA0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NoiseMax;                                          // 0xA4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VectorFieldAnimated");
		return Clss;
	}

};

// 0x28 (0x560 - 0x538)
// Class Engine.VectorFieldComponent
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	class UVectorField*                          VectorField;                                       // 0x538(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Intensity;                                         // 0x540(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Tightness;                                         // 0x544(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPreviewVectorField : 1;                           // Mask: 0x1, PropSize: 0x10x548(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23EC[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VectorFieldComponent");
		return Clss;
	}

	void SetIntensity(float InNewIntensity);
};

// 0x48 (0xB0 - 0x68)
// Class Engine.VectorFieldStatic
class UVectorFieldStatic : public UVectorField
{
public:
	int32                                        SizeX;                                             // 0x68(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeY;                                             // 0x6C(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeZ;                                             // 0x70(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowCPUAccess;                                   // 0x74(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_23F0[0x3B];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VectorFieldStatic");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.VisualLoggerDebugSnapshotInterface
class IVisualLoggerDebugSnapshotInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VisualLoggerDebugSnapshotInterface");
		return Clss;
	}

};

// 0x20 (0x2C0 - 0x2A0)
// Class Engine.WindDirectionalSourceComponent
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                        Strength;                                          // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Speed;                                             // 0x2A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinGustAmount;                                     // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxGustAmount;                                     // 0x2AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Radius;                                            // 0x2B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPointWind : 1;                                    // Mask: 0x1, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_240F[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WindDirectionalSourceComponent");
		return Clss;
	}

	void SetWindType(enum class EWindSourceType InInNewType);
	void SetStrength(float InInNewStrength);
	void SetSpeed(float InInNewSpeed);
	void SetRadius(float InInNewRadius);
	void SetMinimumGustAmount(float InInNewMinGust);
	void SetMaximumGustAmount(float InInNewMaxGust);
};

// 0x8 (0x30 - 0x28)
// Class Engine.WorldPartitionEditorLoaderAdapter
class UWorldPartitionEditorLoaderAdapter : public UObject
{
public:
	uint8                                        Pad_2414[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionEditorLoaderAdapter");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionRuntimeCellOwner
class IWorldPartitionRuntimeCellOwner : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionRuntimeCellOwner");
		return Clss;
	}

};

// 0x40 (0x68 - 0x28)
// Class Engine.HierarchicalLODSetup
class UHierarchicalLODSetup : public UObject
{
public:
	TArray<struct FHierarchicalSimplification>   HierarchicalLODSetup;                              // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>     OverrideBaseMaterial;                              // 0x38(0x30)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HierarchicalLODSetup");
		return Clss;
	}

};

// 0x228 (0x4B8 - 0x290)
// Class Engine.WorldSettings
class AWorldSettings : public AInfo
{
public:
	uint8                                        Pad_241B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        VisibilityCellSize;                                // 0x298(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVisibilityAggressiveness         VisibilityAggressiveness;                          // 0x29C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPrecomputeVisibility : 1;                         // Mask: 0x1, PropSize: 0x10x29D(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPlaceCellsOnlyAlongCameraTracks : 1;              // Mask: 0x2, PropSize: 0x10x29D(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableWorldBoundsChecks : 1;                      // Mask: 0x4, PropSize: 0x10x29D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableNavigationSystem : 1;                       // Mask: 0x8, PropSize: 0x10x29D(0x1)(BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bEnableAISystem : 1;                               // Mask: 0x10, PropSize: 0x10x29D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bEnableWorldComposition : 1;                       // Mask: 0x20, PropSize: 0x10x29D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseClientSideLevelStreamingVolumes : 1;           // Mask: 0x40, PropSize: 0x10x29D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableWorldOriginRebasing : 1;                    // Mask: 0x80, PropSize: 0x10x29D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWorldGravitySet : 1;                              // Mask: 0x1, PropSize: 0x10x29E(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGlobalGravitySet : 1;                             // Mask: 0x2, PropSize: 0x10x29E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMinimizeBSPSections : 1;                          // Mask: 0x4, PropSize: 0x10x29E(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceNoPrecomputedLighting : 1;                   // Mask: 0x8, PropSize: 0x10x29E(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHighPriorityLoading : 1;                          // Mask: 0x10, PropSize: 0x10x29E(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHighPriorityLoadingLocal : 1;                     // Mask: 0x20, PropSize: 0x10x29E(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideDefaultBroadphaseSettings : 1;            // Mask: 0x40, PropSize: 0x10x29E(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateSingleClusterForLevel : 1;                // Mask: 0x80, PropSize: 0x10x29E(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2424[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftClassPtr<class UAISystemBase>           AISystemClass;                                     // 0x2A0(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LevelInstancePivotOffset;                          // 0x2D0(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationSystemConfig*               NavigationSystemConfig;                            // 0x2E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, NoDestructor, AdvancedDisplay, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNavigationSystemConfig*               NavigationSystemConfigOverride;                    // 0x2F0(0x8)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorldPartition*                       WorldPartition;                                    // 0x2F8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UDataLayerAsset*>               BaseNavmeshDataLayers;                             // 0x300(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        WorldToMeters;                                     // 0x310(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        KillZ;                                             // 0x314(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               KillZDamageType;                                   // 0x318(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WorldGravityZ;                                     // 0x320(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlobalGravityZ;                                    // 0x324(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADefaultPhysicsVolume>     DefaultPhysicsVolumeClass;                         // 0x328(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPhysicsCollisionHandler>  PhysicsCollisionHandlerClass;                      // 0x330(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameModeBase>             DefaultGameMode;                                   // 0x338(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameNetworkManager>       GameNetworkManagerClass;                           // 0x340(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PackedLightAndShadowMapTextureSize;                // 0x348(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2431[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DefaultColorScale;                                 // 0x350(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultMaxDistanceFieldOcclusionDistance;          // 0x368(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlobalDistanceFieldViewDistance;                   // 0x36C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DynamicIndirectShadowsSelfShadowingIntensity;      // 0x370(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2432[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FReverbSettings                       DefaultReverbSettings;                             // 0x378(0x20)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FInteriorSettings                     DefaultAmbientZoneSettings;                        // 0x398(0x24)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2435[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundMix*                             DefaultBaseSoundMix;                               // 0x3C0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeDilation;                                      // 0x3C8(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CinematicTimeDilation;                             // 0x3CC(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DemoPlayTimeDilation;                              // 0x3D0(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinGlobalTimeDilation;                             // 0x3D4(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxGlobalTimeDilation;                             // 0x3D8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinUndilatedFrameTime;                             // 0x3DC(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxUndilatedFrameTime;                             // 0x3E0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_243C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBroadphaseSettings                   BroadphaseSettings;                                // 0x3E8(0x80)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FNetViewer>                    ReplicationViewers;                                // 0x468(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x478(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class APlayerState*                          PauserPlayerState;                                 // 0x488(0x8)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxNumberOfBookmarks;                              // 0x490(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2442[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UBookmarkBase>             DefaultBookmarkClass;                              // 0x498(0x8)(ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UBookmarkBase*>                 BookmarkArray;                                     // 0x4A0(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSubclassOf<class UBookmarkBase>             LastBookmarkClass;                                 // 0x4B0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldSettings");
		return Clss;
	}

	void OnRep_WorldGravityZ();
};

// 0xB0 (0x2A0 - 0x1F0)
// Class Engine.Texture2DArray
class UTexture2DArray : public UTexture
{
public:
	uint8                                        Pad_2446[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETextureAddress                   AddressX;                                          // 0x290(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   AddressY;                                          // 0x291(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   AddressZ;                                          // 0x292(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_244B[0xD];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Texture2DArray");
		return Clss;
	}

};

// 0x2F0 (0x318 - 0x28)
// Class Engine.Level
class ULevel : public UObject
{
public:
	uint8                                        Pad_244E[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<AActor*>								 Actors;											// 0x98
	TArray<AActor*>								 ActorsForGC;										// 0xA8
	class UWorld*                                OwningWorld;                                       // 0xB8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModel*                                Model;                                             // 0xC0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UModelComponent*>               ModelComponents;                                   // 0xC8(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class ULevelActorContainer*                  ActorCluster;                                      // 0xD8(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumTextureStreamingUnbuiltComponents;              // 0xE0(0x4)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumTextureStreamingDirtyResources;                 // 0xE4(0x4)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelScriptActor*                     LevelScriptActor;                                  // 0xE8(0x8)(ZeroConstructor, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationObjectBase*                 NavListStart;                                      // 0xF0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationObjectBase*                 NavListEnd;                                        // 0xF8(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNavigationDataChunk*>          NavDataChunks;                                     // 0x100(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        LightmapTotalSize;                                 // 0x110(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowmapTotalSize;                                // 0x114(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                       StaticNavigableGeometry;                           // 0x118(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                         StreamingTextureGuids;                             // 0x128(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                          StreamingTextures;                                 // 0x138(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                       PackedTextureStreamingQualityLevelFeatureLevel;    // 0x148(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2459[0xC4];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 LevelBuildDataId;                                  // 0x210(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapBuildDataRegistry*                 MapBuildData;                                      // 0x220(0x8)(ZeroConstructor, NoDestructor, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                            LightBuildLevelOffset;                             // 0x228(0xC)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsLightingScenario : 1;                           // Mask: 0x1, PropSize: 0x10x234(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_174 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bTextureStreamingRotationChanged : 1;              // Mask: 0x8, PropSize: 0x10x234(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStaticComponentsRegisteredInStreamingManager : 1; // Mask: 0x10, PropSize: 0x10x234(0x1)(Transient, DuplicateTransient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsVisible : 1;                                    // Mask: 0x20, PropSize: 0x10x234(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_175 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_245A[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_176 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsPartitioned : 1;                                // Mask: 0x40, PropSize: 0x10x236(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_177 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_245C[0x61];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class AWorldSettings*                        WorldSettings;                                     // 0x298(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AWorldDataLayers*                      WorldDataLayers;                                   // 0x2A0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UWorldPartitionRuntimeCell> WorldPartitionRuntimeCell;                         // 0x2A8(0x30)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2461[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x2E0(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_2463[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors;                   // 0x300(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2466[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Level");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ActorFolder
class UActorFolder : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorFolder");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ActorPartitionSubsystem
class UActorPartitionSubsystem : public UWorldSubsystem
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorPartitionSubsystem");
		return Clss;
	}

};

// 0x38 (0x60 - 0x28)
// Class Engine.AISystemBase
class UAISystemBase : public UObject
{
public:
	struct FSoftClassPath                        AISystemClassName;                                 // 0x28(0x20)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  AISystemModuleName;                                // 0x48(0x8)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_246D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bInstantiateAISystemOnClient;                      // 0x58(0x1)(ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2470[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AISystemBase");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavigationSystemBase
class UNavigationSystemBase : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationSystemBase");
		return Clss;
	}

};

// 0x30 (0x58 - 0x28)
// Class Engine.NavigationSystemConfig
class UNavigationSystemConfig : public UObject
{
public:
	struct FSoftClassPath                        NavigationSystemClass;                             // 0x28(0x20)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAgentSelector                     SupportedAgentsMask;                               // 0x48(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                  DefaultAgentName;                                  // 0x4C(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsOverriden : 1;                                  // Mask: 0x1, PropSize: 0x10x54(0x1)(Edit, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2475[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationSystemConfig");
		return Clss;
	}

};

// 0x0 (0x58 - 0x58)
// Class Engine.NullNavSysConfig
class UNullNavSysConfig : public UNavigationSystemConfig
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NullNavSysConfig");
		return Clss;
	}

};

// 0xB8 (0xE0 - 0x28)
// Class Engine.AvoidanceManager
class UAvoidanceManager : public UObject
{
public:
	uint8                                        Pad_2495[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultTimeToLive;                                 // 0x30(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LockTimeAfterAvoid;                                // 0x34(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LockTimeAfterClean;                                // 0x38(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DeltaTimeToPredict;                                // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArtificialRadiusExpansion;                         // 0x40(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TestHeightDifference;                              // 0x44(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeightCheckMargin;                                 // 0x48(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_249B[0x94];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AvoidanceManager");
		return Clss;
	}

	bool RegisterMovementComponent(class UMovementComponent* InMovementComp, float InAvoidanceWeight);
	int32 GetObjectCount();
	int32 GetNewAvoidanceUID();
	struct FVector GetAvoidanceVelocityForComponent(class UMovementComponent* InMovementComp);
};

// 0x48 (0x70 - 0x28)
// Class Engine.NavCollisionBase
class UNavCollisionBase : public UObject
{
public:
	uint8                                        bIsDynamicObstacle : 1;                            // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_24A0[0x47];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavCollisionBase");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.NavigationDataChunk
class UNavigationDataChunk : public UObject
{
public:
	class FName                                  NavigationDataName;                                // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationDataChunk");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.AmbientSound
class AAmbientSound : public AActor
{
public:
	class UAudioComponent*                       AudioComponent;                                    // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AmbientSound");
		return Clss;
	}

	void Stop();
	void Play(float InStartTime);
	void FadeOut(float InFadeOutDuration, float InFadeVolumeLevel);
	void FadeIn(float InFadeInDuration, float InFadeVolumeLevel);
	void AdjustVolume(float InAdjustVolumeDuration, float InAdjustVolumeLevel);
};

// 0x0 (0x1A0 - 0x1A0)
// Class Engine.AimOffsetBlendSpace
class UAimOffsetBlendSpace : public UBlendSpace
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AimOffsetBlendSpace");
		return Clss;
	}

};

// 0x8 (0x1A8 - 0x1A0)
// Class Engine.BlendSpace1D
class UBlendSpace1D : public UBlendSpace
{
public:
	bool                                         bScaleAnimation;                                   // 0x1A0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24B7[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlendSpace1D");
		return Clss;
	}

};

// 0x0 (0x1A8 - 0x1A8)
// Class Engine.AimOffsetBlendSpace1D
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AimOffsetBlendSpace1D");
		return Clss;
	}

};

// 0x100 (0x138 - 0x38)
// Class Engine.AnimationSettings
class UAnimationSettings : public UDeveloperSettings
{
public:
	int32                                        CompressCommandletVersion;                         // 0x38(0x4)(Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24BD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        KeyEndEffectorsMatchNameArray;                     // 0x40(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                         ForceRecompression;                                // 0x50(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bForceBelowThreshold;                              // 0x51(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFirstRecompressUsingCurrentOrDefault;             // 0x52(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRaiseMaxErrorToExisting;                          // 0x53(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnablePerformanceLog;                             // 0x54(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStripAnimationDataOnDedicatedServer;              // 0x55(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTickAnimationOnSkeletalMeshInit;                  // 0x56(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24C3[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTimecodeCustomAttributeNameSettings  BoneTimecodeCustomAttributeNameSettings;           // 0x58(0x38)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomAttributeSetting>       BoneCustomAttributesNames;                         // 0x90(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        BoneNamesWithCustomAttributes;                     // 0xA0(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<class FName, enum class ECustomAttributeBlendType> AttributeBlendModes;                               // 0xB0(0x50)(Edit, Config, NativeAccessSpecifierPublic)
	enum class ECustomAttributeBlendType         DefaultAttributeBlendMode;                         // 0x100(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24C5[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        TransformAttributeNames;                           // 0x108(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UUserDefinedStruct>> UserDefinedStructAttributes;                       // 0x118(0x10)(Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FMirrorFindReplaceExpression>  MirrorFindReplaceExpressions;                      // 0x128(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimationSettings");
		return Clss;
	}

	TArray<class FString> GetBoneCustomAttributeNamesToImport();
};

// 0x0 (0xC0 - 0xC0)
// Class Engine.AnimBlueprintGeneratedStruct
class UAnimBlueprintGeneratedStruct : public UScriptStruct
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimBlueprintGeneratedStruct");
		return Clss;
	}

};

// 0x268 (0x5E8 - 0x380)
// Class Engine.AnimBlueprintGeneratedClass
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	uint8                                        Pad_24C9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBakedAnimationStateMachine>   BakedStateMachines;                                // 0x388(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeleton*                             TargetSkeleton;                                    // 0x398(0x8)(ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>              AnimNotifies;                                      // 0x3A0(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap;                        // 0x3B0(0x50)(NativeAccessSpecifierPublic)
	uint8                                        Pad_24CB[0x80];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          SyncGroupNames;                                    // 0x480(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation;                       // 0x490(0x50)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FAnimGraphBlendOptions> GraphBlendOptions;                                 // 0x4E0(0x50)(NativeAccessSpecifierPublic)
	TArray<struct FAnimNodeData>                 AnimNodeData;                                      // 0x530(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class UScriptStruct*, struct FAnimNodeStructData> NodeTypeMap;                                       // 0x540(0x50)(NativeAccessSpecifierPrivate)
	uint8                                        Pad_24CD[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimBlueprintGeneratedClass");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.AnimBoneCompressionCodec
class UAnimBoneCompressionCodec : public UObject
{
public:
	class FString                                Description;                                       // 0x28(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimBoneCompressionCodec");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.AnimBoneCompressionSettings
class UAnimBoneCompressionSettings : public UObject
{
public:
	TArray<class UAnimBoneCompressionCodec*>     Codecs;                                            // 0x28(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimBoneCompressionSettings");
		return Clss;
	}

};

// 0x230 (0x258 - 0x28)
// Class Engine.AnimClassData
class UAnimClassData : public UObject
{
public:
	uint8                                        Pad_24D1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBakedAnimationStateMachine>   BakedStateMachines;                                // 0x30(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeleton*                             TargetSkeleton;                                    // 0x40(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>              AnimNotifies;                                      // 0x48(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap;                        // 0x58(0x50)(NativeAccessSpecifierPublic)
	TArray<struct FAnimBlueprintFunction>        AnimBlueprintFunctions;                            // 0xA8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimBlueprintFunctionData>    AnimBlueprintFunctionData;                         // 0xB8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<FFieldPathProperty_>                  AnimNodeProperties;                                // 0xC8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_24D5[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  LinkedAnimGraphNodeProperties;                     // 0xE8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_24D6[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  LinkedAnimLayerNodeProperties;                     // 0x108(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_24D7[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  PreUpdateNodeProperties;                           // 0x128(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_24D9[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  DynamicResetNodeProperties;                        // 0x148(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_24DA[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  StateMachineNodeProperties;                        // 0x168(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_24DB[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<FFieldPathProperty_>                  InitializationNodeProperties;                      // 0x188(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_24DC[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers;                             // 0x1A8(0x50)(NativeAccessSpecifierPublic)
	TArray<class FName>                          SyncGroupNames;                                    // 0x1F8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FAnimGraphBlendOptions> GraphBlendOptions;                                 // 0x208(0x50)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimClassData");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimClassInterface
class IAnimClassInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimClassInterface");
		return Clss;
	}

};

// 0x0 (0xB0 - 0xB0)
// Class Engine.AnimCompositeBase
class UAnimCompositeBase : public UAnimSequenceBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompositeBase");
		return Clss;
	}

};

// 0x10 (0xC0 - 0xB0)
// Class Engine.AnimComposite
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                            AnimationTrack;                                    // 0xB0(0x10)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimComposite");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.AnimCompress
class UAnimCompress : public UAnimBoneCompressionCodec
{
public:
	uint8                                        bNeedsSkeleton : 1;                                // Mask: 0x1, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_17C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24E3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAnimationCompressionFormat       TranslationCompressionFormat;                      // 0x3C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAnimationCompressionFormat       RotationCompressionFormat;                         // 0x3D(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAnimationCompressionFormat       ScaleCompressionFormat;                            // 0x3E(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24EB[0x1];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.AnimCompress_BitwiseCompressOnly
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_BitwiseCompressOnly");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.AnimCompress_LeastDestructive
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_LeastDestructive");
		return Clss;
	}

};

// 0x20 (0x60 - 0x40)
// Class Engine.AnimCompress_RemoveLinearKeys
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                        MaxPosDiff;                                        // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxAngleDiff;                                      // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxScaleDiff;                                      // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxEffectorDiff;                                   // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinEffectorDiff;                                   // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EffectorDiffSocket;                                // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ParentKeyScale;                                    // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRetarget : 1;                                     // Mask: 0x1, PropSize: 0x10x5C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bActuallyFilterLinearKeys : 1;                     // Mask: 0x2, PropSize: 0x10x5C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24F2[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_RemoveLinearKeys");
		return Clss;
	}

};

// 0x78 (0xD8 - 0x60)
// Class Engine.AnimCompress_PerTrackCompression
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                        MaxZeroingThreshold;                               // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxPosDiffBitwise;                                 // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxAngleDiffBitwise;                               // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxScaleDiffBitwise;                               // 0x6C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<enum class EAnimationCompressionFormat> AllowedRotationFormats;                            // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<enum class EAnimationCompressionFormat> AllowedTranslationFormats;                         // 0x80(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<enum class EAnimationCompressionFormat> AllowedScaleFormats;                               // 0x90(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bResampleAnimation : 1;                            // Mask: 0x1, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_17F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24F7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ResampledFramerate;                                // 0xA4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinKeysForResampling;                              // 0xA8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseAdaptiveError : 1;                             // Mask: 0x1, PropSize: 0x10xAC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseOverrideForEndEffectors : 1;                   // Mask: 0x2, PropSize: 0x10xAC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_180 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24FA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TrackHeightBias;                                   // 0xB0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ParentingDivisor;                                  // 0xB4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ParentingDivisorExponent;                          // 0xB8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseAdaptiveError2 : 1;                            // Mask: 0x1, PropSize: 0x10xBC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_181 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_24FC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RotationErrorSourceRatio;                          // 0xC0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslationErrorSourceRatio;                       // 0xC4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ScaleErrorSourceRatio;                             // 0xC8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxErrorPerTrackRatio;                             // 0xCC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PerturbationProbeSize;                             // 0xD0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_24FD[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_PerTrackCompression");
		return Clss;
	}

};

// 0x8 (0x48 - 0x40)
// Class Engine.AnimCompress_RemoveEverySecondKey
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int32                                        MinKeys;                                           // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStartAtSecondKey : 1;                             // Mask: 0x1, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2501[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_RemoveEverySecondKey");
		return Clss;
	}

};

// 0x10 (0x50 - 0x40)
// Class Engine.AnimCompress_RemoveTrivialKeys
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                        MaxPosDiff;                                        // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxAngleDiff;                                      // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxScaleDiff;                                      // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2505[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_RemoveTrivialKeys");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimCurveCompressionCodec
class UAnimCurveCompressionCodec : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCurveCompressionCodec");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCurveCompressionCodec_CompressedRichCurve");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimCurveCompressionCodec_UniformIndexable
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCurveCompressionCodec_UniformIndexable");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimCurveCompressionCodec_UniformlySampled
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCurveCompressionCodec_UniformlySampled");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.AnimCurveCompressionSettings
class UAnimCurveCompressionSettings : public UObject
{
public:
	class UAnimCurveCompressionCodec*            Codec;                                             // 0x28(0x8)(Edit, ExportObject, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCurveCompressionSettings");
		return Clss;
	}

};

// 0x88 (0xB0 - 0x28)
// Class Engine.AnimDataModel
class UAnimDataModel : public UObject
{
public:
	int32                                        BracketCounter;                                    // 0x28(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2547[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            ModifiedEventDynamic;                              // 0x30(0x10)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2548[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBoneAnimationTrack>           BoneAnimationTracks;                               // 0x58(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	float                                        PlayLength;                                        // 0x68(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFrameRate                            FrameRate;                                         // 0x6C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        NumberOfFrames;                                    // 0x74(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        NumberOfKeys;                                      // 0x78(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_254C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAnimationCurveData                   CurveData;                                         // 0x80(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FAnimatedBoneAttribute>        AnimatedBoneAttributes;                            // 0xA0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimDataModel");
		return Clss;
	}

	bool IsValidBoneTrackIndex(int32 InTrackIndex);
	float GetPlayLength();
	int32 GetNumBoneTracks();
	int32 GetNumberOfTransformCurves();
	int32 GetNumberOfKeys();
	int32 GetNumberOfFrames();
	int32 GetNumberOfFloatCurves();
	struct FFrameRate GetFrameRate();
	void GetBoneTrackNames(TArray<class FName>* InOutNames);
	int32 GetBoneTrackIndexByName(class FName InTrackName);
	int32 GetBoneTrackIndex(struct FBoneAnimationTrack& InTrack);
	struct FBoneAnimationTrack GetBoneTrackByName(class FName InTrackName);
	struct FBoneAnimationTrack GetBoneTrackByIndex(int32 InTrackIndex);
	TArray<struct FBoneAnimationTrack> GetBoneAnimationTracks();
	class UAnimSequence* GetAnimationSequence();
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimMetaData
class UAnimMetaData : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimMetaData");
		return Clss;
	}

};

// 0x148 (0x1F8 - 0xB0)
// Class Engine.AnimMontage
class UAnimMontage : public UAnimCompositeBase
{
public:
	enum class EMontageBlendMode                 BlendModeIn;                                       // 0xB0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMontageBlendMode                 BlendModeOut;                                      // 0xB1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2588[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAlphaBlend                           BlendIn;                                           // 0xB8(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                        BlendInTime;                                       // 0xE8(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_258A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAlphaBlend                           BlendOut;                                          // 0xF0(0x30)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                        BlendOutTime;                                      // 0x120(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendOutTriggerTime;                               // 0x124(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SyncGroup;                                         // 0x128(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SyncSlotIndex;                                     // 0x130(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_258E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMarkerSyncData                       MarkerData;                                        // 0x138(0x20)(NativeAccessSpecifierPublic)
	TArray<struct FCompositeSection>             CompositeSections;                                 // 0x158(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSlotAnimationTrack>           SlotAnimTracks;                                    // 0x168(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBranchingPoint>               BranchingPoints;                                   // 0x178(0x10)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	bool                                         bEnableRootMotionTranslation;                      // 0x188(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableRootMotionRotation;                         // 0x189(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableAutoBlendOut;                               // 0x18A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2598[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBlendProfile*                         BlendProfileIn;                                    // 0x190(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendProfile*                         BlendProfileOut;                                   // 0x198(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERootMotionRootLock               RootMotionRootLock;                                // 0x1A0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_259B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBranchingPointMarker>         BranchingPointMarkers;                             // 0x1A8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                BranchingPointStateNotifyIndices;                  // 0x1B8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimeStretchCurve                     TimeStretchCurve;                                  // 0x1C8(0x28)(Edit, NativeAccessSpecifierPublic)
	class FName                                  TimeStretchCurveName;                              // 0x1F0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimMontage");
		return Clss;
	}

	bool IsValidSectionName(class FName InInSectionName);
	class FName GetSectionName(int32 InSectionIndex);
	int32 GetSectionIndex(class FName InInSectionName);
	int32 GetNumSections();
	float GetDefaultBlendOutTime();
	float GetDefaultBlendInTime();
	struct FAlphaBlendArgs GetBlendOutArgs();
	struct FAlphaBlendArgs GetBlendInArgs();
	class UAnimMontage* CreateSlotAnimationAsDynamicMontage_WithBlendSettings(class UAnimSequenceBase* InAsset, class FName InSlotNodeName, struct FMontageBlendSettings& InBlendInSettings, struct FMontageBlendSettings& InBlendOutSettings, float InInPlayRate, int32 InLoopCount, float InInBlendOutTriggerTime);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimNotifyLibrary
class UAnimNotifyLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyLibrary");
		return Clss;
	}

	bool NotifyStateReachedEnd(struct FAnimNotifyEventReference& InEventReference);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimNotifyMirrorInspectionLibrary
class UAnimNotifyMirrorInspectionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyMirrorInspectionLibrary");
		return Clss;
	}

	bool IsTriggeredByMirroredAnimation(struct FAnimNotifyEventReference& InEventReference);
	class UMirrorDataTable* GetMirrorDataTable(struct FAnimNotifyEventReference& InEventReference);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimNotifyStateMachineInspectionLibrary
class UAnimNotifyStateMachineInspectionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyStateMachineInspectionLibrary");
		return Clss;
	}

	bool IsTriggeredByStateMachine(struct FAnimNotifyEventReference& InEventReference, class UAnimInstance* InAnimInstance, class FName InStateMachineName);
	bool IsTriggeredByStateInStateMachine(struct FAnimNotifyEventReference& InEventReference, class UAnimInstance* InAnimInstance, class FName InStateMachineName, class FName InStateName);
	bool IsTriggeredByState(struct FAnimNotifyEventReference& InEventReference, class UAnimInstance* InAnimInstance, class FName InStateName);
};

// 0x0 (0x30 - 0x30)
// Class Engine.AnimNotifyState_DisableRootMotion
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyState_DisableRootMotion");
		return Clss;
	}

};

// 0x48 (0x78 - 0x30)
// Class Engine.AnimNotifyState_TimedParticleEffect
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                       PSTemplate;                                        // 0x30(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SocketName;                                        // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LocationOffset;                                    // 0x40(0x18)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RotationOffset;                                    // 0x58(0x18)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bDestroyAtEnd;                                     // 0x70(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25D8[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyState_TimedParticleEffect");
		return Clss;
	}

};

// 0x28 (0x58 - 0x30)
// Class Engine.AnimNotifyState_Trail
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                       PSTemplate;                                        // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  FirstSocketName;                                   // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SecondSocketName;                                  // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETrailWidthMode                   WidthScaleMode;                                    // 0x48(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25E5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  WidthScaleCurve;                                   // 0x4C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRecycleSpawnedSystems : 1;                        // Mask: 0x1, PropSize: 0x10x54(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25E6[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyState_Trail");
		return Clss;
	}

	class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* InMeshComp, class UAnimSequenceBase* InAnimation);
};

// 0x0 (0x38 - 0x38)
// Class Engine.AnimNotify_PauseClothingSimulation
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify_PauseClothingSimulation");
		return Clss;
	}

};

// 0x88 (0xC0 - 0x38)
// Class Engine.AnimNotify_PlayParticleEffect
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                       PSTemplate;                                        // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LocationOffset;                                    // 0x40(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RotationOffset;                                    // 0x58(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               Scale;                                             // 0x70(0x18)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25EA[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        Attached : 1;                                      // Mask: 0x1, PropSize: 0x10xB0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_18A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_25ED[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SocketName;                                        // 0xB4(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25EF[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify_PlayParticleEffect");
		return Clss;
	}

};

// 0x20 (0x58 - 0x38)
// Class Engine.AnimNotify_PlaySound
class UAnimNotify_PlaySound : public UAnimNotify
{
public:
	class USoundBase*                            Sound;                                             // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMultiplier;                                  // 0x40(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchMultiplier;                                   // 0x44(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFollow : 1;                                       // Mask: 0x1, PropSize: 0x10x48(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_18B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_25F2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  AttachName;                                        // 0x4C(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25F4[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify_PlaySound");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.AnimNotify_ResetClothingSimulation
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify_ResetClothingSimulation");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.AnimNotify_ResetDynamics
class UAnimNotify_ResetDynamics : public UAnimNotify
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify_ResetDynamics");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.AnimNotify_ResumeClothingSimulation
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify_ResumeClothingSimulation");
		return Clss;
	}

};

// 0x128 (0x1D8 - 0xB0)
// Class Engine.AnimSequence
class UAnimSequence : public UAnimSequenceBase
{
public:
	class UAnimBoneCompressionSettings*          BoneCompressionSettings;                           // 0xB0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimCurveCompressionSettings*         CurveCompressionSettings;                          // 0xB8(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_25FF[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAdditiveAnimationType            AdditiveAnimType;                                  // 0x130(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAdditiveBasePoseType             RefPoseType;                                       // 0x131(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2601[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RefFrameIndex;                                     // 0x134(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                         RefPoseSeq;                                        // 0x138(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  RetargetSource;                                    // 0x140(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                    RetargetSourceAssetReferencePose;                  // 0x148(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EAnimInterpolationType            Interpolation;                                     // 0x158(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableRootMotion;                                 // 0x159(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERootMotionRootLock               RootMotionRootLock;                                // 0x15A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bForceRootLock;                                    // 0x15B(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseNormalizedRootMotionScale;                     // 0x15C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRootMotionSettingsCopiedFromMontage;              // 0x15D(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2608[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAnimSyncMarker>               AuthoredSyncMarkers;                               // 0x160(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_260A[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FFrameRate                            TargetFrameRate;                                   // 0x180(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FAnimationAttributeIdentifier, struct FAttributeCurve> AttributeCurves;                                   // 0x188(0x50)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimSequence");
		return Clss;
	}

};

// 0xC8 (0xF0 - 0x28)
// Class Engine.AnimSet
class UAnimSet : public UObject
{
public:
	uint8                                        bAnimRotationOnly : 1;                             // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_18C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2611[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          TrackBoneNames;                                    // 0x30(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimSetMeshLinkup>            LinkupCache;                                       // 0x40(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<uint8>                                BoneUseAnimTranslation;                            // 0x50(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<uint8>                                ForceUseMeshTranslation;                           // 0x60(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class FName>                          UseTranslationBoneNames;                           // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                          ForceMeshTranslationBoneNames;                     // 0x80(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                  PreviewSkelMeshName;                               // 0x90(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BestRatioSkelMeshName;                             // 0x98(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_261D[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimSet");
		return Clss;
	}

};

// 0x10 (0x360 - 0x350)
// Class Engine.AnimSingleNodeInstance
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	class UAnimationAsset*                       CurrentAsset;                                      // 0x348(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FDelegateProperty_                           PostEvaluateAnimEvent;                             // 0x350(0x10)(ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimSingleNodeInstance");
		return Clss;
	}

	void StopAnim();
	void SetReverse(bool InbInReverse);
	void SetPreviewCurveOverride(class FName& InPoseName, float InValue, bool InbRemoveIfZero);
	void SetPositionWithPreviousTime(float InInPosition, float InInPreviousTime, bool InbFireNotifies);
	void SetPosition(float InInPosition, bool InbFireNotifies);
	void SetPlayRate(float InInPlayRate);
	void SetPlaying(bool InbIsPlaying);
	void SetMirrorDataTable(class UMirrorDataTable* InMirrorDataTable);
	void SetLooping(bool InbIsLooping);
	void SetBlendSpacePosition(struct FVector& InInPosition);
	void SetAnimationAsset(class UAnimationAsset* InNewAsset, bool InbIsLooping, float InInPlayRate);
	void PlayAnim(bool InbIsLooping, float InInPlayRate, float InInStartPosition);
	class UMirrorDataTable* GetMirrorDataTable();
	float GetLength();
	class UAnimationAsset* GetAnimationAsset();
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimStateMachineTypes
class UAnimStateMachineTypes : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimStateMachineTypes");
		return Clss;
	}

};

// 0x38 (0xE8 - 0xB0)
// Class Engine.AnimStreamable
class UAnimStreamable : public UAnimSequenceBase
{
public:
	int32                                        NumberOfKeys;                                      // 0xB0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAnimInterpolationType            Interpolation;                                     // 0xB4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_265D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  RetargetSource;                                    // 0xB8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_265E[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimBoneCompressionSettings*          BoneCompressionSettings;                           // 0xD0(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimCurveCompressionSettings*         CurveCompressionSettings;                          // 0xD8(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableRootMotion;                                 // 0xE0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERootMotionRootLock               RootMotionRootLock;                                // 0xE1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bForceRootLock;                                    // 0xE2(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseNormalizedRootMotionScale;                     // 0xE3(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2660[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimStreamable");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.AssetMappingTable
class UAssetMappingTable : public UObject
{
public:
	TArray<struct FAssetMapping>                 MappedAssets;                                      // 0x28(0x10)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetMappingTable");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationAttributeIdentifierExtensions
class UAnimationAttributeIdentifierExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimationAttributeIdentifierExtensions");
		return Clss;
	}

	bool IsValid(struct FAnimationAttributeIdentifier& InIdentifier);
};

// 0x4A0 (0x4C8 - 0x28)
// Class Engine.Skeleton
class USkeleton : public UObject
{
public:
	uint8                                        Pad_2668[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBoneNode>                     BoneTree;                                          // 0x38(0x10)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                    RefLocalPoses;                                     // 0x48(0x10)(ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2669[0x118];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 VirtualBoneGuid;                                   // 0x170(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVirtualBone>                  VirtualBones;                                      // 0x180(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class USkeleton>>      CompatibleSkeletons;                               // 0x190(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class USkeletalMeshSocket*>           Sockets;                                           // 0x1A0(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_2675[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSmartNameContainer                   SmartNames;                                        // 0x200(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_2677[0x30];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UBlendProfile*>                 BlendProfiles;                                     // 0x280(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FAnimSlotGroup>                SlotGroups;                                        // 0x290(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2678[0x218];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x4B8(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Skeleton");
		return Clss;
	}

	class UBlendProfile* GetBlendProfile(class FName& InInProfileName);
	void AddCompatibleSkeleton(class USkeleton* InSourceSkeleton);
};

// 0x28 (0x50 - 0x28)
// Class Engine.BlendProfile
class UBlendProfile : public UObject
{
public:
	uint8                                        Pad_2679[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             OwningSkeleton;                                    // 0x30(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBlendProfileBoneEntry>        ProfileEntries;                                    // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EBlendProfileMode                 Mode;                                              // 0x48(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_267C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlendProfile");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.BoneMaskFilter
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>               BlendPoses;                                        // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BoneMaskFilter");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.CachedAnimDataLibrary
class UCachedAnimDataLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CachedAnimDataLibrary");
		return Clss;
	}

	bool StateMachine_IsStateRelevant(class UAnimInstance* InInAnimInstance, struct FCachedAnimStateData& InCachedAnimStateData);
	float StateMachine_GetLocalWeight(class UAnimInstance* InInAnimInstance, struct FCachedAnimStateData& InCachedAnimStateData);
	float StateMachine_GetGlobalWeight(class UAnimInstance* InInAnimInstance, struct FCachedAnimStateData& InCachedAnimStateData);
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimationCurveIdentifierExtensions
class UAnimationCurveIdentifierExtensions : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimationCurveIdentifierExtensions");
		return Clss;
	}

	bool IsValid(struct FAnimationCurveIdentifier& InIdentifier);
	enum class ERawCurveTrackTypes GetType(struct FAnimationCurveIdentifier& InIdentifier);
	class FName GetName(struct FAnimationCurveIdentifier& InIdentifier);
};

// 0x0 (0x28 - 0x28)
// Class Engine.CurveSourceInterface
class ICurveSourceInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveSourceInterface");
		return Clss;
	}

	float GetCurveValue(class FName InCurveName);
	void GetCurves(TArray<struct FNamedCurveValue>* InOutValues);
	class FName GetBindingName();
};

// 0xF0 (0x1A0 - 0xB0)
// Class Engine.MirrorDataTable
class UMirrorDataTable : public UDataTable
{
public:
	TArray<struct FMirrorFindReplaceExpression>  MirrorFindReplaceExpressions;                      // 0xB0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EAxis                             MirrorAxis;                                        // 0xC0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26A4[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0xC8(0x8)(Edit, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26A5[0xD0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MirrorDataTable");
		return Clss;
	}

};

// 0x150 (0x178 - 0x28)
// Class Engine.NodeMappingContainer
class UNodeMappingContainer : public UObject
{
public:
	TMap<class FName, struct FNodeItem>          SourceItems;                                       // 0x28(0x50)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FNodeItem>          TargetItems;                                       // 0x78(0x50)(Edit, EditConst, NativeAccessSpecifierPrivate)
	TMap<class FName, class FName>               SourceToTarget;                                    // 0xC8(0x50)(Edit, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UObject>                SourceAsset;                                       // 0x118(0x30)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UObject>                TargetAsset;                                       // 0x148(0x30)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NodeMappingContainer");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NodeMappingProviderInterface
class INodeMappingProviderInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NodeMappingProviderInterface");
		return Clss;
	}

};

// 0x80 (0x100 - 0x80)
// Class Engine.PoseAsset
class UPoseAsset : public UAnimationAsset
{
public:
	struct FPoseDataContainer                    PoseContainer;                                     // 0x80(0x60)(NativeAccessSpecifierPrivate)
	bool                                         bAdditivePose;                                     // 0xE0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_26A7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BasePoseIndex;                                     // 0xE4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  RetargetSource;                                    // 0xE8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                    RetargetSourceAssetReferencePose;                  // 0xF0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PoseAsset");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.PreviewCollectionInterface
class IPreviewCollectionInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PreviewCollectionInterface");
		return Clss;
	}

};

// 0x20 (0x50 - 0x30)
// Class Engine.PreviewMeshCollection
class UPreviewMeshCollection : public UDataAsset
{
public:
	uint8                                        Pad_26A8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0x38(0x8)(Edit, ZeroConstructor, EditConst, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPreviewMeshCollectionEntry>   SkeletalMeshes;                                    // 0x40(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PreviewMeshCollection");
		return Clss;
	}

};

// 0x28 (0x50 - 0x28)
// Class Engine.Rig
class URig : public UObject
{
public:
	uint8                                        Pad_26A9[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTransformBase>                TransformBases;                                    // 0x30(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNode>                         Nodes;                                             // 0x40(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Rig");
		return Clss;
	}

};

// 0x80 (0x310 - 0x290)
// Class Engine.SkeletalMeshActor
class ASkeletalMeshActor : public AActor
{
public:
	uint8                                        bShouldDoAnimNotifies : 1;                         // Mask: 0x1, PropSize: 0x10x290(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWakeOnLevelStart : 1;                             // Mask: 0x2, PropSize: 0x10x290(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_18D : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_26B0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                SkeletalMeshComponent;                             // 0x298(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMesh*                         ReplicatedMesh;                                    // 0x2A0(0x8)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                         ReplicatedPhysAsset;                               // 0x2A8(0x8)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    ReplicatedMaterial0;                               // 0x2B0(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    ReplicatedMaterial1;                               // 0x2B8(0x8)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26B1[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMeshActor");
		return Clss;
	}

	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};

// 0x28 (0xD0 - 0xA8)
// Class Engine.AnimBlueprint
class UAnimBlueprint : public UBlueprint
{
public:
	uint8                                        Pad_26B3[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             TargetSkeleton;                                    // 0xB0(0x8)(Edit, ZeroConstructor, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimGroupInfo>                Groups;                                            // 0xB8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bIsTemplate;                                       // 0xC8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseMultiThreadedAnimationUpdate;                  // 0xC9(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWarnAboutBlueprintUsage;                          // 0xCA(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_26B4[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimBlueprint");
		return Clss;
	}

};

// 0x48 (0x78 - 0x30)
// Class Engine.AsyncActionLoadPrimaryAssetBase
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{
public:
	uint8                                        Pad_26B5[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AsyncActionLoadPrimaryAssetBase");
		return Clss;
	}

};

// 0x10 (0x88 - 0x78)
// Class Engine.AsyncActionLoadPrimaryAsset
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AsyncActionLoadPrimaryAsset");
		return Clss;
	}

	class UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(class UObject* InWorldContextObject, const struct FPrimaryAssetId& InPrimaryAsset, TArray<class FName>& InLoadBundles);
};

// 0x10 (0x88 - 0x78)
// Class Engine.AsyncActionLoadPrimaryAssetClass
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AsyncActionLoadPrimaryAssetClass");
		return Clss;
	}

	class UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(class UObject* InWorldContextObject, const struct FPrimaryAssetId& InPrimaryAsset, TArray<class FName>& InLoadBundles);
};

// 0x10 (0x88 - 0x78)
// Class Engine.AsyncActionLoadPrimaryAssetList
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AsyncActionLoadPrimaryAssetList");
		return Clss;
	}

	class UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(class UObject* InWorldContextObject, TArray<struct FPrimaryAssetId>& InPrimaryAssetList, TArray<class FName>& InLoadBundles);
};

// 0x10 (0x88 - 0x78)
// Class Engine.AsyncActionLoadPrimaryAssetClassList
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AsyncActionLoadPrimaryAssetClassList");
		return Clss;
	}

	class UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(class UObject* InWorldContextObject, TArray<struct FPrimaryAssetId>& InPrimaryAssetList, TArray<class FName>& InLoadBundles);
};

// 0x10 (0x88 - 0x78)
// Class Engine.AsyncActionChangePrimaryAssetBundles
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x78(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AsyncActionChangePrimaryAssetBundles");
		return Clss;
	}

	class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(class UObject* InWorldContextObject, TArray<struct FPrimaryAssetId>& InPrimaryAssetList, TArray<class FName>& InAddBundles, TArray<class FName>& InRemoveBundles);
	class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* InWorldContextObject, TArray<class FName>& InNewBundles, TArray<class FName>& InOldBundles);
};

// 0x8 (0x298 - 0x290)
// Class Engine.AtmosphericFog
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*              AtmosphericFogComponent;                           // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AtmosphericFog");
		return Clss;
	}

};

// 0x100 (0x3A0 - 0x2A0)
// Class Engine.SkyAtmosphereComponent
class USkyAtmosphereComponent : public USceneComponent
{
public:
	enum class ESkyAtmosphereTransformMode       TransformMode;                                     // 0x2A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2702[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BottomRadius;                                      // 0x2A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                GroundAlbedo;                                      // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AtmosphereHeight;                                  // 0x2AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MultiScatteringFactor;                             // 0x2B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TraceSampleCountScale;                             // 0x2B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RayleighScatteringScale;                           // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          RayleighScattering;                                // 0x2BC(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RayleighExponentialDistribution;                   // 0x2CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MieScatteringScale;                                // 0x2D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          MieScattering;                                     // 0x2D4(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MieAbsorptionScale;                                // 0x2E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          MieAbsorption;                                     // 0x2E8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MieAnisotropy;                                     // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MieExponentialDistribution;                        // 0x2FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OtherAbsorptionScale;                              // 0x300(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          OtherAbsorption;                                   // 0x304(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTentDistribution                     OtherTentDistribution;                             // 0x314(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                          SkyLuminanceFactor;                                // 0x320(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AerialPespectiveViewDistanceScale;                 // 0x330(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeightFogContribution;                             // 0x334(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TransmittanceMinLightElevationAngle;               // 0x338(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AerialPerspectiveStartDepth;                       // 0x33C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_270A[0x40];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 bStaticLightingBuiltGUID;                          // 0x380(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_270B[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkyAtmosphereComponent");
		return Clss;
	}

	void SetSkyLuminanceFactor(const struct FLinearColor& InNewValue);
	void SetRayleighScatteringScale(float InNewValue);
	void SetRayleighScattering(const struct FLinearColor& InNewValue);
	void SetRayleighExponentialDistribution(float InNewValue);
	void SetOtherAbsorptionScale(float InNewValue);
	void SetOtherAbsorption(const struct FLinearColor& InNewValue);
	void SetMultiScatteringFactor(float InNewValue);
	void SetMieScatteringScale(float InNewValue);
	void SetMieScattering(const struct FLinearColor& InNewValue);
	void SetMieExponentialDistribution(float InNewValue);
	void SetMieAnisotropy(float InNewValue);
	void SetMieAbsorptionScale(float InNewValue);
	void SetMieAbsorption(const struct FLinearColor& InNewValue);
	void SetHeightFogContribution(float InNewValue);
	void SetAtmosphereHeight(float InNewValue);
	void SetAerialPespectiveViewDistanceScale(float InNewValue);
	void OverrideAtmosphereLightDirection(int32 InAtmosphereLightIndex, struct FVector& InLightDirection);
	struct FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(class UDirectionalLightComponent* InDirectionalLight);
};

// 0x0 (0x3A0 - 0x3A0)
// Class Engine.AtmosphericFogComponent
class UAtmosphericFogComponent : public USkyAtmosphereComponent
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AtmosphericFogComponent");
		return Clss;
	}

	void SetSunMultiplier(float InNewSunMultiplier);
	void SetStartDistance(float InNewStartDistance);
	void SetPrecomputeParams(float InDensityHeight, int32 InMaxScatteringOrder, int32 InInscatterAltitudeSampleNum);
	void SetFogMultiplier(float InNewFogMultiplier);
	void SetDistanceScale(float InNewDistanceScale);
	void SetDistanceOffset(float InNewDistanceOffset);
	void SetDensityOffset(float InNewDensityOffset);
	void SetDensityMultiplier(float InNewDensityMultiplier);
	void SetDefaultLightColor(const struct FLinearColor& InNewLightColor);
	void SetDefaultBrightness(float InNewBrightness);
	void SetAltitudeScale(float InNewAltitudeScale);
	void DisableSunDisk(bool InNewSunDisk);
	void DisableGroundScattering(bool InNewGroundScattering);
};

// 0x10 (0x38 - 0x28)
// Class Engine.AudioBus
class UAudioBus : public UObject
{
public:
	uint8                                        Pad_272D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAudioBusChannels                 AudioBusChannels;                                  // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_272E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioBus");
		return Clss;
	}

};

// 0x1A8 (0x1E0 - 0x38)
// Class Engine.AudioSettings
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FSoftObjectPath                       DefaultSoundClassName;                             // 0x38(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultMediaSoundClassName;                        // 0x58(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultSoundConcurrencyName;                       // 0x78(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       DefaultBaseSoundMix;                               // 0x98(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       VoiPSoundClass;                                    // 0xB8(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       MasterSubmix;                                      // 0xD8(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       BaseDefaultSubmix;                                 // 0xF8(0x20)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       ReverbSubmix;                                      // 0x118(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       EQSubmix;                                          // 0x138(0x20)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVoiceSampleRate                  VoiPSampleRate;                                    // 0x158(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDefaultAudioCompressionType      DefaultAudioCompressionType;                       // 0x15C(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2731[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultReverbSendLevel;                            // 0x160(0x4)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaximumConcurrentStreams;                          // 0x164(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlobalMinPitchScale;                               // 0x168(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlobalMaxPitchScale;                               // 0x16C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioQualitySettings>         QualityLevels;                                     // 0x170(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        bAllowPlayWhenSilent : 1;                          // Mask: 0x1, PropSize: 0x10x180(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableMasterEQ : 1;                              // Mask: 0x2, PropSize: 0x10x180(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowCenterChannel3DPanning : 1;                  // Mask: 0x4, PropSize: 0x10x180(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_18E : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2732[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       NumStoppingSources;                                // 0x184(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPanningMethod                    PanningMethod;                                     // 0x188(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMonoChannelUpmixMethod           MonoChannelUpmixMethod;                            // 0x189(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2734[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DialogueFilenameFormat;                            // 0x190(0x10)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundDebugEntry>              DebugSounds;                                       // 0x1A0(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDefaultAudioBusSettings>      DefaultAudioBuses;                                 // 0x1B0(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class USoundClass*                           DefaultSoundClass;                                 // 0x1C0(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundClass*                           DefaultMediaSoundClass;                            // 0x1C8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundConcurrency*                     DefaultSoundConcurrency;                           // 0x1D0(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2737[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioSettings");
		return Clss;
	}

};

// 0x70 (0x338 - 0x2C8)
// Class Engine.AudioVolume
class AAudioVolume : public AVolume
{
public:
	float                                        Priority;                                          // 0x2C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x2CC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_18F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_274B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FReverbSettings                       Settings;                                          // 0x2D0(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	struct FInteriorSettings                     AmbientZoneSettings;                               // 0x2F0(0x24)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_274C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAudioVolumeSubmixSendSettings> SubmixSendSettings;                                // 0x318(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FAudioVolumeSubmixOverrideSettings> SubmixOverrideSettings;                            // 0x328(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioVolume");
		return Clss;
	}

	void SetSubmixSendSettings(TArray<struct FAudioVolumeSubmixSendSettings>& InNewSubmixSendSettings);
	void SetSubmixOverrideSettings(TArray<struct FAudioVolumeSubmixOverrideSettings>& InNewSubmixOverrideSettings);
	void SetReverbSettings(struct FReverbSettings& InNewReverbSettings);
	void SetPriority(float InNewPriority);
	void SetInteriorSettings(struct FInteriorSettings& InNewInteriorSettings);
	void SetEnabled(bool InbNewEnabled);
	void OnRep_bEnabled();
};

// 0x0 (0x28 - 0x28)
// Class Engine.ActorSoundParameterInterface
class IActorSoundParameterInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorSoundParameterInterface");
		return Clss;
	}

	void GetActorSoundParams(TArray<struct FAudioParameter>* InParams);
};

// 0x0 (0x30 - 0x30)
// Class Engine.AudioWidgetSubsystem
class UAudioWidgetSubsystem : public UEngineSubsystem
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioWidgetSubsystem");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.SoundParameterControllerInterface
class ISoundParameterControllerInterface : public IAudioParameterControllerInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundParameterControllerInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AudioParameterConversionStatics
class UAudioParameterConversionStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioParameterConversionStatics");
		return Clss;
	}

	struct FAudioParameter StringToAudioParameter(class FName InName, const class FString& InString);
	struct FAudioParameter StringArrayToAudioParameter(class FName InName, const TArray<class FString>& InStrings);
	struct FAudioParameter ObjectToAudioParameter(class FName InName, class UObject* InObject);
	struct FAudioParameter ObjectArrayToAudioParameter(class FName InName, const TArray<class UObject*>& InObjects);
	struct FAudioParameter IntegerToAudioParameter(class FName InName, int32 InInteger);
	struct FAudioParameter IntegerArrayToAudioParameter(class FName InName, const TArray<int32>& InIntegers);
	struct FAudioParameter FloatToAudioParameter(class FName InName, float InFloat);
	struct FAudioParameter FloatArrayToAudioParameter(class FName InName, const TArray<float>& InFloats);
	struct FAudioParameter BooleanToAudioParameter(class FName InName, bool InBool);
	struct FAudioParameter BooleanArrayToAudioParameter(class FName InName, const TArray<bool>& InBools);
};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.BlockingVolume
class ABlockingVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlockingVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintMapLibrary
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintMapLibrary");
		return Clss;
	}

	void SetMapPropertyByName(class UObject* InObject, class FName InPropertyName, TMap<int32, int32>& InValue);
	void Map_Values(TMap<int32, int32>& InTargetMap, TArray<int32>* InValues);
	bool Map_Remove(TMap<int32, int32>& InTargetMap, int32& InKey);
	int32 Map_Length(TMap<int32, int32>& InTargetMap);
	void Map_Keys(TMap<int32, int32>& InTargetMap, TArray<int32>* InKeys);
	bool Map_IsNotEmpty(TMap<int32, int32>& InTargetMap);
	bool Map_IsEmpty(TMap<int32, int32>& InTargetMap);
	bool Map_Find(TMap<int32, int32>& InTargetMap, int32& InKey, int32* InValue);
	bool Map_Contains(TMap<int32, int32>& InTargetMap, int32& InKey);
	void Map_Clear(TMap<int32, int32>& InTargetMap);
	void Map_Add(TMap<int32, int32>& InTargetMap, int32& InKey, int32& InValue);
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintSetLibrary
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintSetLibrary");
		return Clss;
	}

	void SetSetPropertyByName(class UObject* InObject, class FName InPropertyName, TSet<int32>& InValue);
	void Set_Union(TSet<int32>& InA, TSet<int32>& InB, TSet<int32>* InResult);
	void Set_ToArray(TSet<int32>& InA, TArray<int32>* InResult);
	void Set_RemoveItems(TSet<int32>& InTargetSet, TArray<int32>& InItems);
	bool Set_Remove(TSet<int32>& InTargetSet, int32& InItem);
	int32 Set_Length(TSet<int32>& InTargetSet);
	bool Set_IsNotEmpty(TSet<int32>& InTargetSet);
	bool Set_IsEmpty(TSet<int32>& InTargetSet);
	void Set_Intersection(TSet<int32>& InA, TSet<int32>& InB, TSet<int32>* InResult);
	void Set_Difference(TSet<int32>& InA, TSet<int32>& InB, TSet<int32>* InResult);
	bool Set_Contains(TSet<int32>& InTargetSet, int32& InItemToFind);
	void Set_Clear(TSet<int32>& InTargetSet);
	void Set_AddItems(TSet<int32>& InTargetSet, TArray<int32>& InNewItems);
	void Set_Add(TSet<int32>& InTargetSet, int32& InNewItem);
};

// 0x40 (0x68 - 0x28)
// Class Engine.BookMark
class UBookMark : public UBookmarkBase
{
public:
	struct FVector                               Location;                                          // 0x28(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              Rotation;                                          // 0x40(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        HiddenLevels;                                      // 0x58(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BookMark");
		return Clss;
	}

};

// 0x58 (0x80 - 0x28)
// Class Engine.BrushBuilder
class UBrushBuilder : public UObject
{
public:
	class FString                                BitmapFilename;                                    // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Tooltip;                                           // 0x38(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        NotifyBadParams : 1;                               // Mask: 0x1, PropSize: 0x10x48(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_190 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_27DE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       Vertices;                                          // 0x50(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBuilderPoly>                  Polys;                                             // 0x60(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                  Layer;                                             // 0x70(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        MergeCoplanars : 1;                                // Mask: 0x1, PropSize: 0x10x78(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_27E2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BrushBuilder");
		return Clss;
	}

};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.BrushShape
class ABrushShape : public ABrush
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BrushShape");
		return Clss;
	}

};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.CameraBlockingVolume
class ACameraBlockingVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraBlockingVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.CameraLensEffectInterface
class ICameraLensEffectInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraLensEffectInterface");
		return Clss;
	}

	class UFXSystemComponent* GetPrimaryParticleComponent();
	TArray<class UFXSystemComponent*> GetParticleComponents();
};

// 0x0 (0x28 - 0x28)
// Class Engine.CameraLensEffectInterfaceClassSupportLibrary
class UCameraLensEffectInterfaceClassSupportLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraLensEffectInterfaceClassSupportLibrary");
		return Clss;
	}

	void SetInterfaceClass(TSubclassOf<class AActor> InClass, struct FCameraLensInterfaceClassSupport& InVar, enum class EInterfaceValidResult* InResult);
	void IsInterfaceValid(TScriptInterface<class ICameraLensEffectInterface>& InCameraLens, enum class EInterfaceValidResult* InResult);
	void IsInterfaceClassValid(struct FCameraLensInterfaceClassSupport& InCameraLens, enum class EInterfaceValidResult* InResult);
	TSubclassOf<class AActor> GetInterfaceClass(struct FCameraLensInterfaceClassSupport& InCameraLens);
};

// 0x68 (0xB0 - 0x48)
// Class Engine.CameraModifier_CameraShake
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<struct FActiveCameraShakeInfo>        ActiveShakes;                                      // 0x48(0x10)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class UCameraShakeBase>, struct FPooledCameraShakes> ExpiredPooledShakesMap;                            // 0x58(0x50)(Protected, NativeAccessSpecifierProtected)
	float                                        SplitScreenShakeScale;                             // 0xA8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_27EE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraModifier_CameraShake");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.CameraShakeSourceActor
class ACameraShakeSourceActor : public AActor
{
public:
	class UCameraShakeSourceComponent*           CameraShakeSourceComponent;                        // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraShakeSourceActor");
		return Clss;
	}

};

// 0x20 (0x2C0 - 0x2A0)
// Class Engine.CameraShakeSourceComponent
class UCameraShakeSourceComponent : public USceneComponent
{
public:
	enum class ECameraShakeAttenuation           Attenuation;                                       // 0x2A0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27FD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InnerAttenuationRadius;                            // 0x2A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OuterAttenuationRadius;                            // 0x2A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_27FF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UCameraShakeBase>          CameraShake;                                       // 0x2B0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAutoStart;                                        // 0x2B8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2800[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraShakeSourceComponent");
		return Clss;
	}

	void StopAllCameraShakesOfType(TSubclassOf<class UCameraShakeBase> InInCameraShake, bool InbImmediately);
	void StopAllCameraShakes(bool InbImmediately);
	void StartCameraShake(TSubclassOf<class UCameraShakeBase> InInCameraShake, float InScale, enum class ECameraShakePlaySpace InPlaySpace, const struct FRotator& InUserPlaySpaceRot);
	void Start();
	float GetAttenuationFactor(struct FVector& InLocation);
};

// 0x20 (0x240 - 0x220)
// Class Engine.CanvasRenderTarget2D
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	FMulticastInlineDelegateProperty_            OnCanvasRenderTargetUpdate;                        // 0x220(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UWorld>                 World;                                             // 0x230(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldClearRenderTargetOnReceiveUpdate;           // 0x238(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2804[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CanvasRenderTarget2D");
		return Clss;
	}

	void UpdateResource();
	void ReceiveUpdate(class UCanvas* InCanvas, int32 InWidth, int32 InHeight);
	void GetSize(int32* InWidth, int32* InHeight);
	class UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(class UObject* InWorldContextObject, TSubclassOf<class UCanvasRenderTarget2D> InCanvasRenderTarget2DClass, int32 InWidth, int32 InHeight);
};

// 0x0 (0x28 - 0x28)
// Class Engine.CheatManagerExtension
class UCheatManagerExtension : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CheatManagerExtension");
		return Clss;
	}

	void RemovedFromCheatManager();
	class APlayerController* GetPlayerController();
	void AddedToCheatManager();
};

// 0x138 (0x170 - 0x38)
// Class Engine.CollisionProfile
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>    Profiles;                                          // 0x38(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FCustomChannelSetup>           DefaultChannelResponses;                           // 0x48(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FCustomProfile>                EditProfiles;                                      // 0x58(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FRedirector>                   ProfileRedirects;                                  // 0x68(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FRedirector>                   CollisionChannelRedirects;                         // 0x78(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	uint8                                        Pad_280A[0xE8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CollisionProfile");
		return Clss;
	}

};

// 0x20 (0xA0 - 0x80)
// Class Engine.PluginCommandlet
class UPluginCommandlet : public UCommandlet
{
public:
	uint8                                        Pad_280C[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PluginCommandlet");
		return Clss;
	}

};

// 0x0 (0x80 - 0x80)
// Class Engine.SmokeTestCommandlet
class USmokeTestCommandlet : public UCommandlet
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SmokeTestCommandlet");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.ComponentDelegateBinding
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings;                         // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ComponentDelegateBinding");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ActorComponentInstanceDataTransientOuter
class UActorComponentInstanceDataTransientOuter : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorComponentInstanceDataTransientOuter");
		return Clss;
	}

};

// 0x90 (0x130 - 0xA0)
// Class Engine.ApplicationLifecycleComponent
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            ApplicationWillDeactivateDelegate;                 // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationHasReactivatedDelegate;                 // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationWillEnterBackgroundDelegate;            // 0xC0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationHasEnteredForegroundDelegate;           // 0xD0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationWillTerminateDelegate;                  // 0xE0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationShouldUnloadResourcesDelegate;          // 0xF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationReceivedStartupArgumentsDelegate;       // 0x100(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnTemperatureChangeDelegate;                       // 0x110(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnLowPowerModeDelegate;                            // 0x120(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ApplicationLifecycleComponent");
		return Clss;
	}

};

// 0x18 (0x550 - 0x538)
// Class Engine.ArrowComponent
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                ArrowColor;                                        // 0x538(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArrowSize;                                         // 0x53C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArrowLength;                                       // 0x540(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ScreenSize;                                        // 0x544(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsScreenSizeScaled : 1;                           // Mask: 0x1, PropSize: 0x10x548(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTreatAsASprite : 1;                               // Mask: 0x2, PropSize: 0x10x548(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_280F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ArrowComponent");
		return Clss;
	}

	void SetArrowColor(const struct FLinearColor& InNewColor);
};

// 0x10 (0x38 - 0x28)
// Class Engine.InitialActiveSoundParams
class UInitialActiveSoundParams : public UObject
{
public:
	TArray<struct FAudioParameter>               AudioParams;                                       // 0x28(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InitialActiveSoundParams");
		return Clss;
	}

};

// 0xB0 (0x150 - 0xA0)
// Class Engine.BoundsCopyComponent
class UBoundsCopyComponent : public UActorComponent
{
public:
	TSoftObjectPtr<class AActor>                 BoundsSourceActor;                                 // 0xA0(0x30)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseCollidingComponentsForSourceBounds;            // 0xD0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bKeepOwnBoundsScale;                               // 0xD1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseCollidingComponentsForOwnBounds;               // 0xD2(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2815[0xD];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            PostTransform;                                     // 0xE0(0x60)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCopyXBounds;                                      // 0x140(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCopyYBounds;                                      // 0x141(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCopyZBounds;                                      // 0x142(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2816[0xD];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BoundsCopyComponent");
		return Clss;
	}

};

// 0x18 (0x550 - 0x538)
// Class Engine.BrushComponent
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                Brush;                                             // 0x538(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                            BrushBodySetup;                                    // 0x540(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2819[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BrushComponent");
		return Clss;
	}

};

// 0x40 (0x2E0 - 0x2A0)
// Class Engine.ChildActorComponent
class UChildActorComponent : public USceneComponent
{
public:
	TSubclassOf<class AActor>                    ChildActorClass;                                   // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                ChildActor;                                        // 0x2A8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NoDestructor, TextExportTransient, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                ChildActorTemplate;                                // 0x2B0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2820[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ChildActorComponent");
		return Clss;
	}

	void SetChildActorClass(TSubclassOf<class AActor> InInClass);
	void OnChildActorDestroyed(class AActor* InDestroyedActor);
};

// 0x50 (0x2F0 - 0x2A0)
// Class Engine.DecalComponent
class UDecalComponent : public USceneComponent
{
public:
	class UMaterialInterface*                    DecalMaterial;                                     // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        SortOrder;                                         // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeScreenSize;                                    // 0x2AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeStartDelay;                                    // 0x2B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeDuration;                                      // 0x2B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeInDuration;                                    // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeInStartDelay;                                  // 0x2BC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDestroyOwnerAfterFade : 1;                        // Mask: 0x1, PropSize: 0x10x2C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_191 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_283B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DecalSize;                                         // 0x2C8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_283C[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DecalComponent");
		return Clss;
	}

	void SetSortOrder(int32 InValue);
	void SetFadeScreenSize(float InNewFadeScreenSize);
	void SetFadeOut(float InStartDelay, float InDuration, bool InDestroyOwnerAfterFade);
	void SetFadeIn(float InStartDelay, float InDuaration);
	void SetDecalMaterial(class UMaterialInterface* InNewDecalMaterial);
	float GetFadeStartDelay();
	float GetFadeInStartDelay();
	float GetFadeInDuration();
	float GetFadeDuration();
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};

// 0x108 (0x3E0 - 0x2D8)
// Class Engine.LightComponent
class ULightComponent : public ULightComponentBase
{
public:
	float                                        Temperature;                                       // 0x2D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDrawDistance;                                   // 0x2DC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDistanceFadeRange;                              // 0x2E0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseTemperature : 1;                               // Mask: 0x1, PropSize: 0x10x2E4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_192 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_285A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ShadowMapChannel;                                  // 0x2E8(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_285B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinRoughness;                                      // 0x2F0(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpecularScale;                                     // 0x2F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowResolutionScale;                             // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowBias;                                        // 0x2FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowSlopeBias;                                   // 0x300(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowSharpen;                                     // 0x304(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ContactShadowLength;                               // 0x308(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ContactShadowLengthInWS : 1;                       // Mask: 0x1, PropSize: 0x10x30C(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        InverseSquaredFalloff : 1;                         // Mask: 0x2, PropSize: 0x10x30C(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastTranslucentShadows : 1;                        // Mask: 0x4, PropSize: 0x10x30C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastShadowsFromCinematicObjectsOnly : 1;          // Mask: 0x8, PropSize: 0x10x30C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectDynamicIndirectLighting : 1;                // Mask: 0x10, PropSize: 0x10x30C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceCachedShadowsForMovablePrimitives : 1;       // Mask: 0x20, PropSize: 0x10x30C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_193 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_285C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLightingChannels                     LightingChannels;                                  // 0x310(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                        Pad_285D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    LightFunctionMaterial;                             // 0x318(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LightFunctionScale;                                // 0x320(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureLightProfile*                  IESTexture;                                        // 0x338(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseIESBrightness : 1;                             // Mask: 0x1, PropSize: 0x10x340(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_194 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_285E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IESBrightnessScale;                                // 0x344(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightFunctionFadeDistance;                         // 0x348(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DisabledBrightness;                                // 0x34C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableLightShaftBloom : 1;                        // Mask: 0x1, PropSize: 0x10x350(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_195 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_285F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BloomScale;                                        // 0x354(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BloomThreshold;                                    // 0x358(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BloomMaxBrightness;                                // 0x35C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                BloomTint;                                         // 0x360(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseRayTracedDistanceFieldShadows;                 // 0x364(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2860[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RayStartOffsetDepthScale;                          // 0x368(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2861[0x74];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightComponent");
		return Clss;
	}

	void SetVolumetricScatteringIntensity(float InNewIntensity);
	void SetUseTemperature(bool InbNewValue);
	void SetUseIESBrightness(bool InbNewValue);
	void SetTransmission(bool InbNewValue);
	void SetTemperature(float InNewTemperature);
	void SetSpecularScale(float InNewValue);
	void SetShadowSlopeBias(float InNewValue);
	void SetShadowBias(float InNewValue);
	void SetLightingChannels(bool InbChannel0, bool InbChannel1, bool InbChannel2);
	void SetLightFunctionScale(const struct FVector& InNewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* InNewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float InNewLightFunctionFadeDistance);
	void SetLightFunctionDisabledBrightness(float InNewValue);
	void SetLightFColor(const struct FColor& InNewLightColor);
	void SetLightColor(const struct FLinearColor& InNewLightColor, bool InbSRGB);
	void SetIntensity(float InNewIntensity);
	void SetIndirectLightingIntensity(float InNewIntensity);
	void SetIESTexture(class UTextureLightProfile* InNewValue);
	void SetIESBrightnessScale(float InNewValue);
	void SetForceCachedShadowsForMovablePrimitives(bool InbNewValue);
	void SetEnableLightShaftBloom(bool InbNewValue);
	void SetBloomTint(const struct FColor& InNewValue);
	void SetBloomThreshold(float InNewValue);
	void SetBloomScale(float InNewValue);
	void SetBloomMaxBrightness(float InNewValue);
	void SetAffectTranslucentLighting(bool InbNewValue);
	void SetAffectDynamicIndirectLighting(bool InbNewValue);
};

// 0xD0 (0x4B0 - 0x3E0)
// Class Engine.DirectionalLightComponent
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                        ShadowCascadeBiasDistribution;                     // 0x3E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableLightShaftOcclusion : 1;                    // Mask: 0x1, PropSize: 0x10x3E4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_196 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_286D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OcclusionMaskDarkness;                             // 0x3E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OcclusionDepthRange;                               // 0x3EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LightShaftOverrideDirection;                       // 0x3F0(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WholeSceneDynamicShadowRadius;                     // 0x408(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DynamicShadowDistanceMovableLight;                 // 0x40C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DynamicShadowDistanceStationaryLight;              // 0x410(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DynamicShadowCascades;                             // 0x414(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CascadeDistributionExponent;                       // 0x418(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CascadeTransitionFraction;                         // 0x41C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowDistanceFadeoutFraction;                     // 0x420(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseInsetShadowsForMovableObjects : 1;             // Mask: 0x1, PropSize: 0x10x424(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_197 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_286F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        FarShadowCascadeCount;                             // 0x428(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FarShadowDistance;                                 // 0x42C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFieldShadowDistance;                       // 0x430(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ForwardShadingPriority;                            // 0x434(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightSourceAngle;                                  // 0x438(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightSourceSoftAngle;                              // 0x43C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowSourceAngleFactor;                           // 0x440(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TraceDistance;                                     // 0x444(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedAsAtmosphereSunLight : 1;                     // Mask: 0x1, PropSize: 0x10x448(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAtmosphereSunLight : 1;                           // Mask: 0x2, PropSize: 0x10x448(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_198 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2873[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        AtmosphereSunLightIndex;                           // 0x44C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          AtmosphereSunDiskColorScale;                       // 0x450(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPerPixelAtmosphereTransmittance : 1;              // Mask: 0x1, PropSize: 0x10x460(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastShadowsOnClouds : 1;                          // Mask: 0x2, PropSize: 0x10x460(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastShadowsOnAtmosphere : 1;                      // Mask: 0x4, PropSize: 0x10x460(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastCloudShadows : 1;                             // Mask: 0x8, PropSize: 0x10x460(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_199 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2877[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CloudShadowStrength;                               // 0x464(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CloudShadowOnAtmosphereStrength;                   // 0x468(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CloudShadowOnSurfaceStrength;                      // 0x46C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CloudShadowDepthBias;                              // 0x470(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CloudShadowExtent;                                 // 0x474(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CloudShadowMapResolutionScale;                     // 0x478(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CloudShadowRaySampleCountScale;                    // 0x47C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          CloudScatteredLuminanceScale;                      // 0x480(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassDirectionalLightSettings    LightmassSettings;                                 // 0x490(0x10)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bCastModulatedShadows : 1;                         // Mask: 0x1, PropSize: 0x10x4A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_19A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2879[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                ModulatedShadowColor;                              // 0x4A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowAmount;                                      // 0x4A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_287A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DirectionalLightComponent");
		return Clss;
	}

	void SetShadowSourceAngleFactor(float InNewValue);
	void SetShadowDistanceFadeoutFraction(float InNewValue);
	void SetShadowCascadeBiasDistribution(float InNewValue);
	void SetShadowAmount(float InNewValue);
	void SetOcclusionMaskDarkness(float InNewValue);
	void SetOcclusionDepthRange(float InNewValue);
	void SetLightSourceSoftAngle(float InNewValue);
	void SetLightSourceAngle(float InNewValue);
	void SetLightShaftOverrideDirection(const struct FVector& InNewValue);
	void SetEnableLightShaftOcclusion(bool InbNewValue);
	void SetDynamicShadowDistanceStationaryLight(float InNewValue);
	void SetDynamicShadowDistanceMovableLight(float InNewValue);
	void SetDynamicShadowCascades(int32 InNewValue);
	void SetCascadeTransitionFraction(float InNewValue);
	void SetCascadeDistributionExponent(float InNewValue);
	void SetAtmosphereSunLightIndex(int32 InNewValue);
	void SetAtmosphereSunLight(bool InbNewValue);
};

// 0x28 (0x560 - 0x538)
// Class Engine.DrawFrustumComponent
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	bool                                         bFrustumEnabled;                                   // 0x538(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_287B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                FrustumColor;                                      // 0x53C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrustumAngle;                                      // 0x540(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrustumAspectRatio;                                // 0x544(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrustumStartDist;                                  // 0x548(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrustumEndDist;                                    // 0x54C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                              Texture;                                           // 0x550(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_287C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DrawFrustumComponent");
		return Clss;
	}

};

// 0x8 (0x560 - 0x558)
// Class Engine.SphereComponent
class USphereComponent : public UShapeComponent
{
public:
	float                                        SphereRadius;                                      // 0x558(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2882[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SphereComponent");
		return Clss;
	}

	void SetSphereRadius(float InInSphereRadius, bool InbUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
};

// 0x0 (0x560 - 0x560)
// Class Engine.DrawSphereComponent
class UDrawSphereComponent : public USphereComponent
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DrawSphereComponent");
		return Clss;
	}

};

// 0xF0 (0x390 - 0x2A0)
// Class Engine.ForceFeedbackComponent
class UForceFeedbackComponent : public USceneComponent
{
public:
	class UForceFeedbackEffect*                  ForceFeedbackEffect;                               // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoDestroy : 1;                                  // Mask: 0x1, PropSize: 0x10x2A8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStopWhenOwnerDestroyed : 1;                       // Mask: 0x2, PropSize: 0x10x2A8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLooping : 1;                                      // Mask: 0x4, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x8, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x10, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_19B : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2885[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IntensityMultiplier;                               // 0x2AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackAttenuation*             AttenuationSettings;                               // 0x2B0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FForceFeedbackAttenuationSettings     AttenuationOverrides;                              // 0x2B8(0xC0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnForceFeedbackFinished;                           // 0x378(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2886[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ForceFeedbackComponent");
		return Clss;
	}

	void Stop();
	void SetIntensityMultiplier(float InNewIntensityMultiplier);
	void SetForceFeedbackEffect(class UForceFeedbackEffect* InNewForceFeedbackEffect);
	void Play(float InStartTime);
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* InOutAttenuationSettings);
	void AdjustAttenuation(struct FForceFeedbackAttenuationSettings& InInAttenuationSettings);
};

// 0xB0 (0x1B8 - 0x108)
// Class Engine.InterpToMovementComponent
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                        Duration;                                          // 0x108(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPauseOnImpact : 1;                                // Mask: 0x1, PropSize: 0x10x10C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_19C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2892[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bSweep;                                            // 0x110(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETeleportType                     TeleportType;                                      // 0x111(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EInterpToBehaviourType            BehaviourType;                                     // 0x112(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCheckIfStillInWorld;                              // 0x113(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceSubStepping : 1;                             // Mask: 0x1, PropSize: 0x10x114(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_19D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2893[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	FMulticastInlineDelegateProperty_            OnInterpToReverse;                                 // 0x118(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnInterpToStop;                                    // 0x128(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWaitBeginDelegate;                               // 0x138(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnWaitEndDelegate;                                 // 0x148(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnResetDelegate;                                   // 0x158(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        MaxSimulationTimeStep;                             // 0x168(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxSimulationIterations;                           // 0x16C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInterpControlPoint>           ControlPoints;                                     // 0x170(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_2894[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpToMovementComponent");
		return Clss;
	}

	void StopSimulating(struct FHitResult& InHitResult);
	void RestartMovement(float InInitialDirection);
	void ResetControlPoints();
	void OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult& InImpactResult, float InTime);
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult& InImpactResult, float InTime);
	void OnInterpToStopDelegate__DelegateSignature(struct FHitResult& InImpactResult, float InTime);
	void OnInterpToReverseDelegate__DelegateSignature(struct FHitResult& InImpactResult, float InTime);
	void OnInterpToResetDelegate__DelegateSignature(struct FHitResult& InImpactResult, float InTime);
	void FinaliseControlPoints();
	void AddControlPointPosition(const struct FVector& InPos, bool InbPositionIsRelative);
};

// 0x48 (0x580 - 0x538)
// Class Engine.LineBatchComponent
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_2895[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LineBatchComponent");
		return Clss;
	}

};

// 0x20 (0x400 - 0x3E0)
// Class Engine.LocalLightComponent
class ULocalLightComponent : public ULightComponent
{
public:
	enum class ELightUnits                       IntensityUnits;                                    // 0x3E0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_289D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InverseExposureBlend;                              // 0x3E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Radius;                                            // 0x3E8(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AttenuationRadius;                                 // 0x3EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassPointLightSettings          LightmassSettings;                                 // 0x3F0(0xC)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_289E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LocalLightComponent");
		return Clss;
	}

	void SetIntensityUnits(enum class ELightUnits InNewIntensityUnits);
	void SetAttenuationRadius(float InNewRadius);
	float GetUnitsConversionFactor(enum class ELightUnits InSrcUnits, enum class ELightUnits InTargetUnits, float InCosHalfConeAngle);
};

// 0x98 (0x138 - 0xA0)
// Class Engine.LODSyncComponent
class ULODSyncComponent : public UActorComponent
{
public:
	int32                                        NumLODs;                                           // 0xA0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ForcedLOD;                                         // 0xA4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinLOD;                                            // 0xA8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_28A0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FComponentSync>                ComponentsToSync;                                  // 0xB0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLODMappingData>    CustomLODMapping;                                  // 0xC0(0x50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                        CurrentLOD;                                        // 0x110(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        CurrentNumLODs;                                    // 0x114(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UPrimitiveComponent*>           DriveComponents;                                   // 0x118(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UPrimitiveComponent*>           SubComponents;                                     // 0x128(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LODSyncComponent");
		return Clss;
	}

	class FString GetLODSyncDebugText();
};

// 0x18 (0x550 - 0x538)
// Class Engine.MaterialBillboardComponent
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>        Elements;                                          // 0x538(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_28A7[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialBillboardComponent");
		return Clss;
	}

	void SetElements(TArray<struct FMaterialSpriteElement>& InNewElements);
	void AddElement(class UMaterialInterface* InMaterial, class UCurveFloat* InDistanceToOpacityCurve, bool InbSizeIsInScreenSpace, float InBaseSizeX, float InBaseSizeY, class UCurveFloat* InDistanceToSizeCurve);
};

// 0x48 (0x580 - 0x538)
// Class Engine.ModelComponent
class UModelComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_28A8[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UBodySetup*                            ModelBodySetup;                                    // 0x550(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_28A9[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ModelComponent");
		return Clss;
	}

};

// 0x38 (0xD8 - 0xA0)
// Class Engine.PawnNoiseEmitterComponent
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	uint8                                        bAIPerceptionSystemCompatibilityMode : 1;          // Mask: 0x1, PropSize: 0x10xA0(0x1)(Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_19E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_28B0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastRemoteNoisePosition;                           // 0xA8(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NoiseLifetime;                                     // 0xC0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastRemoteNoiseVolume;                             // 0xC4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LastRemoteNoiseTime;                               // 0xC8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LastLocalNoiseVolume;                              // 0xCC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LastLocalNoiseTime;                                // 0xD0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_28B2[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PawnNoiseEmitterComponent");
		return Clss;
	}

	void MakeNoise(class AActor* InNoiseMaker, float InLoudness, struct FVector& InNoiseLocation);
};

// 0x20 (0xC0 - 0xA0)
// Class Engine.PlatformEventsComponent
class UPlatformEventsComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_            PlatformChangedToLaptopModeDelegate;               // 0xA0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            PlatformChangedToTabletModeDelegate;               // 0xB0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlatformEventsComponent");
		return Clss;
	}

	bool SupportsConvertibleLaptops();
	void PlatformEventDelegate__DelegateSignature();
	bool IsInTabletMode();
	bool IsInLaptopMode();
};

// 0x18 (0x418 - 0x400)
// Class Engine.PointLightComponent
class UPointLightComponent : public ULocalLightComponent
{
public:
	uint8                                        bUseInverseSquaredFalloff : 1;                     // Mask: 0x1, PropSize: 0x10x400(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_19F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_28BC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LightFalloffExponent;                              // 0x404(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SourceRadius;                                      // 0x408(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SoftSourceRadius;                                  // 0x40C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SourceLength;                                      // 0x410(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_28BE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PointLightComponent");
		return Clss;
	}

	void SetUseInverseSquaredFalloff(bool InbNewValue);
	void SetSourceRadius(float InbNewValue);
	void SetSourceLength(float InNewValue);
	void SetSoftSourceRadius(float InbNewValue);
	void SetLightFalloffExponent(float InNewLightFalloffExponent);
	void SetInverseExposureBlend(float InNewInverseExposureBlend);
};

// 0x1A0 (0xA40 - 0x8A0)
// Class Engine.PoseableMeshComponent
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	uint8                                        Pad_28E0[0x1A0];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PoseableMeshComponent");
		return Clss;
	}

	void SetBoneTransformByName(class FName InBoneName, struct FTransform& InInTransform, enum class EBoneSpaces InBoneSpace);
	void SetBoneScaleByName(class FName InBoneName, const struct FVector& InInScale3D, enum class EBoneSpaces InBoneSpace);
	void SetBoneRotationByName(class FName InBoneName, const struct FRotator& InInRotation, enum class EBoneSpaces InBoneSpace);
	void SetBoneLocationByName(class FName InBoneName, const struct FVector& InInLocation, enum class EBoneSpaces InBoneSpace);
	void ResetBoneTransformByName(class FName InBoneName);
	struct FTransform GetBoneTransformByName(class FName InBoneName, enum class EBoneSpaces InBoneSpace);
	struct FVector GetBoneScaleByName(class FName InBoneName, enum class EBoneSpaces InBoneSpace);
	struct FRotator GetBoneRotationByName(class FName InBoneName, enum class EBoneSpaces InBoneSpace);
	struct FVector GetBoneLocationByName(class FName InBoneName, enum class EBoneSpaces InBoneSpace);
	void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InInComponentToCopy);
};

// 0x700 (0x9A0 - 0x2A0)
// Class Engine.PostProcessComponent
class UPostProcessComponent : public USceneComponent
{
public:
	uint8                                        Pad_28E7[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  Settings;                                          // 0x2B0(0x6E0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                        Priority;                                          // 0x990(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendRadius;                                       // 0x994(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendWeight;                                       // 0x998(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x99C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUnbound : 1;                                      // Mask: 0x2, PropSize: 0x10x99C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_28E9[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PostProcessComponent");
		return Clss;
	}

	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InInBlendableObject, float InInWeight);
};

// 0x138 (0x240 - 0x108)
// Class Engine.ProjectileMovementComponent
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                        InitialSpeed;                                      // 0x108(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSpeed;                                          // 0x10C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRotationFollowsVelocity : 1;                      // Mask: 0x1, PropSize: 0x10x110(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRotationRemainsVertical : 1;                      // Mask: 0x2, PropSize: 0x10x110(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldBounce : 1;                                 // Mask: 0x4, PropSize: 0x10x110(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInitialVelocityInLocalSpace : 1;                  // Mask: 0x8, PropSize: 0x10x110(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceSubStepping : 1;                             // Mask: 0x10, PropSize: 0x10x110(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSimulationEnabled : 1;                            // Mask: 0x20, PropSize: 0x10x110(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSweepCollision : 1;                               // Mask: 0x40, PropSize: 0x10x110(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsHomingProjectile : 1;                           // Mask: 0x80, PropSize: 0x10x110(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBounceAngleAffectsFriction : 1;                   // Mask: 0x1, PropSize: 0x10x111(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsSliding : 1;                                    // Mask: 0x2, PropSize: 0x10x111(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInterpMovement : 1;                               // Mask: 0x4, PropSize: 0x10x111(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInterpRotation : 1;                               // Mask: 0x8, PropSize: 0x10x111(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1A0 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2905[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PreviousHitTime;                                   // 0x114(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PreviousHitNormal;                                 // 0x118(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ProjectileGravityScale;                            // 0x130(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Buoyancy;                                          // 0x134(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Bounciness;                                        // 0x138(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Friction;                                          // 0x13C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BounceVelocityStopSimulatingThreshold;             // 0x140(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinFrictionFraction;                               // 0x144(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnProjectileBounce;                                // 0x148(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnProjectileStop;                                  // 0x158(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        HomingAccelerationMagnitude;                       // 0x168(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>        HomingTargetComponent;                             // 0x16C(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSimulationTimeStep;                             // 0x174(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxSimulationIterations;                           // 0x178(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BounceAdditionalIterations;                        // 0x17C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InterpLocationTime;                                // 0x180(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InterpRotationTime;                                // 0x184(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InterpLocationMaxLagDistance;                      // 0x188(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InterpLocationSnapToTargetDistance;                // 0x18C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2910[0xB0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ProjectileMovementComponent");
		return Clss;
	}

	void StopSimulating(struct FHitResult& InHitResult);
	void SetVelocityInLocalSpace(const struct FVector& InNewVelocity);
	void SetInterpolatedComponent(class USceneComponent* InComponent);
	void ResetInterpolation();
	void OnProjectileStopDelegate__DelegateSignature(struct FHitResult& InImpactResult);
	void OnProjectileBounceDelegate__DelegateSignature(struct FHitResult& InImpactResult, struct FVector& InImpactVelocity);
	void MoveInterpolationTarget(struct FVector& InNewLocation, struct FRotator& InNewRotation);
	struct FVector LimitVelocity(const struct FVector& InNewVelocity);
	bool IsVelocityUnderSimulationThreshold();
	bool IsInterpolationComplete();
};

// 0x20 (0x420 - 0x400)
// Class Engine.RectLightComponent
class URectLightComponent : public ULocalLightComponent
{
public:
	float                                        SourceWidth;                                       // 0x400(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SourceHeight;                                      // 0x404(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BarnDoorAngle;                                     // 0x408(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BarnDoorLength;                                    // 0x40C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                              SourceTexture;                                     // 0x410(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_291A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RectLightComponent");
		return Clss;
	}

	void SetSourceWidth(float InNewValue);
	void SetSourceTexture(class UTexture* InNewValue);
	void SetSourceHeight(float InNewValue);
	void SetBarnDoorLength(float InNewValue);
	void SetBarnDoorAngle(float InNewValue);
};

// 0x38 (0x140 - 0x108)
// Class Engine.RotatingMovementComponent
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                              RotationRate;                                      // 0x108(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               PivotTranslation;                                  // 0x120(0x18)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRotationInLocalSpace : 1;                         // Mask: 0x1, PropSize: 0x10x138(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_291D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RotatingMovementComponent");
		return Clss;
	}

};

// 0x90 (0x330 - 0x2A0)
// Class Engine.RuntimeVirtualTextureComponent
class URuntimeVirtualTextureComponent : public USceneComponent
{
public:
	TSoftObjectPtr<class AActor>                 BoundsAlignActor;                                  // 0x2A0(0x30)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSetBoundsButton;                                  // 0x2D0(0x1)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSnapBoundsToLandscape;                            // 0x2D1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2922[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class URuntimeVirtualTexture*                VirtualTexture;                                    // 0x2D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, TextExportTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bEnableScalability;                                // 0x2E0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2923[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       ScalabilityGroup;                                  // 0x2E4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHidePrimitives;                                   // 0x2E8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2924[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UVirtualTextureBuilder*                StreamingTexture;                                  // 0x2F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        StreamLowMips;                                     // 0x2F8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bBuildStreamingMipsButton;                         // 0x2FC(0x1)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETextureLossyCompressionAmount    LossyCompressionAmount;                            // 0x2FD(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseStreamingLowMipsInEditor;                      // 0x2FE(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bBuildDebugStreamingMips;                          // 0x2FF(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2927[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RuntimeVirtualTextureComponent");
		return Clss;
	}

	void Invalidate(struct FBoxSphereBounds& InWorldBounds);
};

// 0x8 (0x298 - 0x290)
// Class Engine.SkyAtmosphere
class ASkyAtmosphere : public AInfo
{
public:
	class USkyAtmosphereComponent*               SkyAtmosphereComponent;                            // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkyAtmosphere");
		return Clss;
	}

};

// 0x100 (0x700 - 0x600)
// Class Engine.SplineMeshComponent
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	struct FSplineMeshParams                     SplineParams;                                      // 0x600(0xB0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               SplineUpDir;                                       // 0x6B0(0x18)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SplineBoundaryMin;                                 // 0x6C8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 CachedMeshBodySetupGuid;                           // 0x6CC(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2956[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBodySetup*                            BodySetup;                                         // 0x6E0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SplineBoundaryMax;                                 // 0x6E8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowSplineEditingPerInstance : 1;                // Mask: 0x1, PropSize: 0x10x6EC(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSmoothInterpRollScale : 1;                        // Mask: 0x2, PropSize: 0x10x6EC(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMeshDirty : 1;                                    // Mask: 0x4, PropSize: 0x10x6EC(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1A1 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class ESplineMeshAxis                   ForwardAxis;                                       // 0x6ED(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2959[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VirtualTextureMainPassMaxDrawDistance;             // 0x6F0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_295A[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SplineMeshComponent");
		return Clss;
	}

	void UpdateMesh();
	void SetStartTangent(const struct FVector& InStartTangent, bool InbUpdateMesh);
	void SetStartScale(const struct FVector2D& InStartScale, bool InbUpdateMesh);
	void SetStartRoll(float InStartRoll, bool InbUpdateMesh);
	void SetStartPosition(const struct FVector& InStartPos, bool InbUpdateMesh);
	void SetStartOffset(const struct FVector2D& InStartOffset, bool InbUpdateMesh);
	void SetStartAndEnd(const struct FVector& InStartPos, const struct FVector& InStartTangent, const struct FVector& InEndPos, const struct FVector& InEndTangent, bool InbUpdateMesh);
	void SetSplineUpDir(struct FVector& InInSplineUpDir, bool InbUpdateMesh);
	void SetForwardAxis(enum class ESplineMeshAxis InInForwardAxis, bool InbUpdateMesh);
	void SetEndTangent(const struct FVector& InEndTangent, bool InbUpdateMesh);
	void SetEndScale(const struct FVector2D& InEndScale, bool InbUpdateMesh);
	void SetEndRoll(float InEndRoll, bool InbUpdateMesh);
	void SetEndPosition(const struct FVector& InEndPos, bool InbUpdateMesh);
	void SetEndOffset(const struct FVector2D& InEndOffset, bool InbUpdateMesh);
	void SetBoundaryMin(float InInBoundaryMin, bool InbUpdateMesh);
	void SetBoundaryMax(float InInBoundaryMax, bool InbUpdateMesh);
	struct FVector GetStartTangent();
	struct FVector2D GetStartScale();
	float GetStartRoll();
	struct FVector GetStartPosition();
	struct FVector2D GetStartOffset();
	struct FVector GetSplineUpDir();
	enum class ESplineMeshAxis GetForwardAxis();
	struct FVector GetEndTangent();
	struct FVector2D GetEndScale();
	float GetEndRoll();
	struct FVector GetEndPosition();
	struct FVector2D GetEndOffset();
	float GetBoundaryMin();
	float GetBoundaryMax();
};

// 0x8 (0x420 - 0x418)
// Class Engine.SpotLightComponent
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                        InnerConeAngle;                                    // 0x418(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OuterConeAngle;                                    // 0x41C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpotLightComponent");
		return Clss;
	}

	void SetOuterConeAngle(float InNewOuterConeAngle);
	void SetInnerConeAngle(float InNewInnerConeAngle);
};

// 0x60 (0x300 - 0x2A0)
// Class Engine.VolumetricCloudComponent
class UVolumetricCloudComponent : public USceneComponent
{
public:
	float                                        LayerBottomAltitude;                               // 0x2A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LayerHeight;                                       // 0x2A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TracingStartMaxDistance;                           // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVolumetricCloudTracingMaxDistanceMode TracingMaxDistanceMode;                            // 0x2AC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_296C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TracingMaxDistance;                                // 0x2B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlanetRadius;                                      // 0x2B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                GroundAlbedo;                                      // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_296D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    Material;                                          // 0x2C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePerSampleAtmosphericLightTransmittance : 1;    // Mask: 0x1, PropSize: 0x10x2C8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1A2 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_296E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SkyLightCloudBottomOcclusion;                      // 0x2CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewSampleCountScale;                              // 0x2D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReflectionViewSampleCountScaleValue;               // 0x2D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReflectionViewSampleCountScale;                    // 0x2D8(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReflectionSampleCountScale;                        // 0x2DC(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowViewSampleCountScale;                        // 0x2E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowReflectionViewSampleCountScaleValue;         // 0x2E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowReflectionViewSampleCountScale;              // 0x2E8(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowReflectionSampleCountScale;                  // 0x2EC(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowTracingDistance;                             // 0x2F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StopTracingTransmittanceThreshold;                 // 0x2F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_296F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VolumetricCloudComponent");
		return Clss;
	}

	void SetViewSampleCountScale(float InNewValue);
	void SetTracingStartMaxDistance(float InNewValue);
	void SetTracingMaxDistance(float InNewValue);
	void SetStopTracingTransmittanceThreshold(float InNewValue);
	void SetSkyLightCloudBottomOcclusion(float InNewValue);
	void SetShadowViewSampleCountScale(float InNewValue);
	void SetShadowTracingDistance(float InNewValue);
	void SetShadowReflectionViewSampleCountScale(float InNewValue);
	void SetShadowReflectionSampleCountScale(float InNewValue);
	void SetReflectionViewSampleCountScale(float InNewValue);
	void SetReflectionSampleCountScale(float InNewValue);
	void SetPlanetRadius(float InNewValue);
	void SetMaterial(class UMaterialInterface* InNewValue);
	void SetLayerHeight(float InNewValue);
	void SetLayerBottomAltitude(float InNewValue);
	void SetGroundAlbedo(const struct FColor& InNewValue);
	void SetbUsePerSampleAtmosphericLightTransmittance(bool InNewValue);
};

// 0x8 (0x298 - 0x290)
// Class Engine.VolumetricCloud
class AVolumetricCloud : public AInfo
{
public:
	class UVolumetricCloudComponent*             VolumetricCloudComponent;                          // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VolumetricCloud");
		return Clss;
	}

};

// 0x38 (0xD8 - 0xA0)
// Class Engine.WorldPartitionStreamingSourceComponent
class UWorldPartitionStreamingSourceComponent : public UActorComponent
{
public:
	uint8                                        Pad_2970[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  TargetGrid;                                        // 0xA8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                DebugColor;                                        // 0xB0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2971[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UHLODLayer*                            TargetHLODLayer;                                   // 0xB8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStreamingSourceShape>         Shapes;                                            // 0xC0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EStreamingSourcePriority          Priority;                                          // 0xD0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStreamingSourceEnabled;                           // 0xD1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EStreamingSourceTargetState       TargetState;                                       // 0xD2(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_2973[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionStreamingSourceComponent");
		return Clss;
	}

	bool IsStreamingSourceEnabled();
	bool IsStreamingCompleted();
	void EnableStreamingSource();
	void DisableStreamingSource();
};

// 0x78 (0xA0 - 0x28)
// Class Engine.CurveTable
class UCurveTable : public UObject
{
public:
	uint8                                        Pad_2974[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveTable");
		return Clss;
	}

};

// 0x28 (0xC8 - 0xA0)
// Class Engine.CompositeCurveTable
class UCompositeCurveTable : public UCurveTable
{
public:
	TArray<class UCurveTable*>                   ParentTables;                                      // 0xA0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UCurveTable*>                   OldParentTables;                                   // 0xB0(0x10)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_2975[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CompositeCurveTable");
		return Clss;
	}

};

// 0x28 (0xD8 - 0xB0)
// Class Engine.CompositeDataTable
class UCompositeDataTable : public UDataTable
{
public:
	TArray<class UDataTable*>                    ParentTables;                                      // 0xB0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UDataTable*>                    OldParentTables;                                   // 0xC0(0x10)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                        Pad_2976[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CompositeDataTable");
		return Clss;
	}

};

// 0x50 (0x78 - 0x28)
// Class Engine.EnumCookedMetaData
class UEnumCookedMetaData : public UObject
{
public:
	struct FObjectCookedMetaDataStore            EnumMetaData;                                      // 0x28(0x50)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EnumCookedMetaData");
		return Clss;
	}

};

// 0xA0 (0xC8 - 0x28)
// Class Engine.StructCookedMetaData
class UStructCookedMetaData : public UObject
{
public:
	struct FStructCookedMetaDataStore            StructMetaData;                                    // 0x28(0xA0)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StructCookedMetaData");
		return Clss;
	}

};

// 0xF0 (0x118 - 0x28)
// Class Engine.ClassCookedMetaData
class UClassCookedMetaData : public UObject
{
public:
	struct FStructCookedMetaDataStore            ClassMetaData;                                     // 0x28(0xA0)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FStructCookedMetaDataStore> FunctionsMetaData;                                 // 0xC8(0x50)(Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ClassCookedMetaData");
		return Clss;
	}

};

// 0x38 (0x70 - 0x38)
// Class Engine.StreamingSettings
class UStreamingSettings : public UDeveloperSettings
{
public:
	uint8                                        AsyncLoadingThreadEnabled : 1;                     // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        WarnIfTimeLimitExceeded : 1;                       // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_1A3 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_297C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeLimitExceededMultiplier;                       // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeLimitExceededMinTime;                          // 0x40(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MinBulkDataSizeForAsyncLoading;                    // 0x44(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        UseBackgroundLevelStreaming : 1;                   // Mask: 0x1, PropSize: 0x10x48(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        AsyncLoadingUseFullTimeLimit : 1;                  // Mask: 0x2, PropSize: 0x10x48(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_1A4 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_297E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AsyncLoadingTimeLimit;                             // 0x4C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PriorityAsyncLoadingExtraTime;                     // 0x50(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LevelStreamingActorsUpdateTimeLimit;               // 0x54(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PriorityLevelStreamingActorsUpdateExtraTime;       // 0x58(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LevelStreamingComponentsRegistrationGranularity;   // 0x5C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LevelStreamingAddPrimitiveGranularity;             // 0x60(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LevelStreamingUnregisterComponentsTimeLimit;       // 0x64(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LevelStreamingComponentsUnregistrationGranularity; // 0x68(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        FlushStreamingOnExit : 1;                          // Mask: 0x1, PropSize: 0x10x6C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        EventDrivenLoaderEnabled : 1;                      // Mask: 0x2, PropSize: 0x10x6C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2981[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StreamingSettings");
		return Clss;
	}

};

// 0x20 (0x58 - 0x38)
// Class Engine.GarbageCollectionSettings
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                        TimeBetweenPurgingPendingKillObjects;              // 0x38(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        FlushStreamingOnGC : 1;                            // Mask: 0x1, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        AllowParallelGC : 1;                               // Mask: 0x2, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        IncrementalBeginDestroyEnabled : 1;                // Mask: 0x4, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        MultithreadedDestructionEnabled : 1;               // Mask: 0x8, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        CreateGCClusters : 1;                              // Mask: 0x10, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        AssetClusteringEnabled : 1;                        // Mask: 0x20, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        ActorClusteringEnabled : 1;                        // Mask: 0x40, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BlueprintClusteringEnabled : 1;                    // Mask: 0x80, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        UseDisregardForGCOnDedicatedServers : 1;           // Mask: 0x1, PropSize: 0x10x3D(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        VerifyGCObjectNames : 1;                           // Mask: 0x2, PropSize: 0x10x3D(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        VerifyUObjectsAreNotFGCObjects : 1;                // Mask: 0x4, PropSize: 0x10x3D(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        PendingKillEnabled : 1;                            // Mask: 0x8, PropSize: 0x10x3D(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_1A5 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2984[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinGCClusterSize;                                  // 0x40(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        NumRetriesBeforeForcingGC;                         // 0x44(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxObjectsNotConsideredByGC;                       // 0x48(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        SizeOfPermanentObjectPool;                         // 0x4C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxObjectsInGame;                                  // 0x50(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxObjectsInEditor;                                // 0x54(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GarbageCollectionSettings");
		return Clss;
	}

};

// 0x18 (0x2E0 - 0x2C8)
// Class Engine.CullDistanceVolume
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>         CullDistances;                                     // 0x2C8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x2D8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2986[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CullDistanceVolume");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.CurveBase
class UCurveBase : public UObject
{
public:
	uint8                                        Pad_2988[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveBase");
		return Clss;
	}

	void GetValueRange(float* InMinValue, float* InMaxValue);
	void GetTimeRange(float* InMinTime, float* InMaxTime);
};

// 0x0 (0x28 - 0x28)
// Class Engine.CurveEdPresetCurve
class UCurveEdPresetCurve : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveEdPresetCurve");
		return Clss;
	}

};

// 0x88 (0xB8 - 0x30)
// Class Engine.CurveFloat
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                            FloatCurve;                                        // 0x30(0x80)(NativeAccessSpecifierPublic)
	bool                                         bIsEventCurve;                                     // 0xB0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_298C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveFloat");
		return Clss;
	}

	float GetFloatValue(float InInTime);
};

// 0x220 (0x250 - 0x30)
// Class Engine.CurveLinearColor
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                            FloatCurves[0x4];                                  // 0x30(0x200)(NativeAccessSpecifierPublic)
	float                                        AdjustHue;                                         // 0x230(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AdjustSaturation;                                  // 0x234(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AdjustBrightness;                                  // 0x238(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AdjustBrightnessCurve;                             // 0x23C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AdjustVibrance;                                    // 0x240(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AdjustMinAlpha;                                    // 0x244(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AdjustMaxAlpha;                                    // 0x248(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2994[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveLinearColor");
		return Clss;
	}

	struct FLinearColor GetUnadjustedLinearColorValue(float InInTime);
	struct FLinearColor GetLinearColorValue(float InInTime);
	struct FLinearColor GetClampedLinearColorValue(float InInTime);
};

// 0x28 (0x2D0 - 0x2A8)
// Class Engine.CurveLinearColorAtlas
class UCurveLinearColorAtlas : public UTexture2D
{
public:
	uint32                                       TextureSize;                                       // 0x2A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSquareResolution : 1;                             // Mask: 0x1, PropSize: 0x10x2AC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1A6 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_2999[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       TextureHeight;                                     // 0x2B0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_299B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UCurveLinearColor*>             GradientCurves;                                    // 0x2B8(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_299C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveLinearColorAtlas");
		return Clss;
	}

	bool GetCurvePosition(class UCurveLinearColor* InInCurve, float* InPosition);
};

// 0x180 (0x1B0 - 0x30)
// Class Engine.CurveVector
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                            FloatCurves[0x3];                                  // 0x30(0x180)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveVector");
		return Clss;
	}

	struct FVector GetVectorValue(float InInTime);
};

// 0x18 (0x40 - 0x28)
// Class Engine.DamageType
class UDamageType : public UObject
{
public:
	uint8                                        bCausedByWorld : 1;                                // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bScaleMomentumByMass : 1;                          // Mask: 0x2, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRadialDamageVelChange : 1;                        // Mask: 0x4, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1A7 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_29A1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DamageImpulse;                                     // 0x2C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DestructibleImpulse;                               // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DestructibleDamageSpreadScale;                     // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageFalloff;                                     // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_29A2[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DamageType");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.DataDrivenCVarEngineSubsystem
class UDataDrivenCVarEngineSubsystem : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnDataDrivenCVarDelegate;                          // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataDrivenCVarEngineSubsystem");
		return Clss;
	}

};

// 0x38 (0x70 - 0x38)
// Class Engine.DataDrivenConsoleVariableSettings
class UDataDrivenConsoleVariableSettings : public UDeveloperSettings
{
public:
	uint8                                        Pad_29A3[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDataDrivenConsoleVariable>    CVarsArray;                                        // 0x50(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        Pad_29A4[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataDrivenConsoleVariableSettings");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.DataTableFunctionLibrary
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataTableFunctionLibrary");
		return Clss;
	}

	void GetDataTableRowNames(class UDataTable* InTable, TArray<class FName>* InOutRowNames);
	bool GetDataTableRowFromName(class UDataTable* InTable, class FName InRowName, struct FTableRowBase* InOutRow);
	TArray<class FString> GetDataTableColumnAsString(class UDataTable* InDataTable, class FName InPropertyName);
	void EvaluateCurveTableRow(class UCurveTable* InCurveTable, class FName InRowName, float InInXY, enum class EEvaluateCurveTableResult* InOutResult, float* InOutXY, const class FString& InContextString);
	bool DoesDataTableRowExist(class UDataTable* InTable, class FName InRowName);
};

// 0x180 (0x9D0 - 0x850)
// Class Engine.DebugCameraController
class ADebugCameraController : public APlayerController
{
public:
	uint8                                        bShowSelectedInfo : 1;                             // Mask: 0x1, PropSize: 0x10x850(0x1)(Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsFrozenRendering : 1;                            // Mask: 0x2, PropSize: 0x10x850(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsOrbitingSelectedActor : 1;                      // Mask: 0x4, PropSize: 0x10x850(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrbitPivotUseCenter : 1;                          // Mask: 0x8, PropSize: 0x10x850(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableBufferVisualization : 1;                    // Mask: 0x10, PropSize: 0x10x850(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableBufferVisualizationFullMode : 1;            // Mask: 0x20, PropSize: 0x10x850(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsBufferVisualizationInputSetup : 1;              // Mask: 0x40, PropSize: 0x10x850(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLastDisplayEnabled : 1;                           // Mask: 0x80, PropSize: 0x10x850(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_29BD[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDrawFrustumComponent*                 DrawFrustum;                                       // 0x858(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                 SelectedActor;                                     // 0x860(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>    SelectedComponent;                                 // 0x868(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                            SelectedHitPoint;                                  // 0x870(0xE8)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class APlayerController*                     OriginalControllerRef;                             // 0x958(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayer*                               OriginalPlayer;                                    // 0x960(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedScale;                                        // 0x968(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialMaxSpeed;                                   // 0x96C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialAccel;                                      // 0x970(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialDecel;                                      // 0x974(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_29BE[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DebugCameraController");
		return Clss;
	}

	void ToggleDisplay();
	void ShowDebugSelectedInfo();
	void SetPawnMovementSpeedScale(float InNewSpeedScale);
	void ReceiveOnDeactivate(class APlayerController* InRestoredPC);
	void ReceiveOnActorSelected(class AActor* InNewSelectedActor, struct FVector& InSelectHitLocation, struct FVector& InSelectHitNormal, struct FHitResult& InHit);
	void ReceiveOnActivate(class APlayerController* InOriginalPC);
	class AActor* GetSelectedActor();
};

// 0x10 (0x48 - 0x38)
// Class Engine.DebugCameraControllerSettings
class UDebugCameraControllerSettings : public UDeveloperSettings
{
public:
	TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                    // 0x38(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DebugCameraControllerSettings");
		return Clss;
	}

};

// 0x0 (0x380 - 0x380)
// Class Engine.DebugCameraHUD
class ADebugCameraHUD : public AHUD
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DebugCameraHUD");
		return Clss;
	}

};

// 0x58 (0x590 - 0x538)
// Class Engine.DebugDrawComponent
class UDebugDrawComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_29C0[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DebugDrawComponent");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.DebugDrawService
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DebugDrawService");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ReporterBase
class UReporterBase : public UObject
{
public:
	uint8                                        Pad_29C1[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReporterBase");
		return Clss;
	}

};

// 0x98 (0xC8 - 0x30)
// Class Engine.ReporterGraph
class UReporterGraph : public UReporterBase
{
public:
	uint8                                        Pad_29C2[0x98];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReporterGraph");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.DecalActor
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                       Decal;                                             // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DecalActor");
		return Clss;
	}

	void SetDecalMaterial(class UMaterialInterface* InNewDecalMaterial);
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};

// 0x0 (0x2D8 - 0x2D8)
// Class Engine.DefaultPhysicsVolume
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DefaultPhysicsVolume");
		return Clss;
	}

};

// 0xCA0 (0x1430 - 0x790)
// Class Engine.DemoNetDriver
class UDemoNetDriver : public UNetDriver
{
public:
	uint8                                        Pad_29C3[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;                          // 0x7C8(0x50)(Transient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29C4[0xDC];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CheckpointSaveMaxMSPerFrame;                       // 0x8F4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29C5[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FMulticastRecordOptions>       MulticastRecordOptions;                            // 0x910(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<class APlayerController*>             SpectatorControllers;                              // 0x920(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29C6[0xB00];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DemoNetDriver");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.DestructibleInterface
class IDestructibleInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DestructibleInterface");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.TextureLODSettings
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>              TextureLODGroups;                                  // 0x28(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureLODSettings");
		return Clss;
	}

};

// 0x98 (0xD0 - 0x38)
// Class Engine.DeviceProfile
class UDeviceProfile : public UTextureLODSettings
{
public:
	class FString                                DeviceType;                                        // 0x38(0x10)(Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                BaseProfileName;                                   // 0x48(0x10)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsVisibleForAssets : 1;                           // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1A8 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_29C7[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDeviceProfile*                        Parent;                                            // 0x60(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_29C8[0x28];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        CVars;                                             // 0x90(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDPMatchingRulestruct>         MatchingRules;                                     // 0xA0(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        Pad_29CA[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DeviceProfile");
		return Clss;
	}

};

// 0x68 (0x90 - 0x28)
// Class Engine.DeviceProfileManager
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UDeviceProfile*>                Profiles;                                          // 0x28(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UDeviceProfile*>                BackupProfiles;                                    // 0x38(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_29CB[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DeviceProfileManager");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.DialogueVoice
class UDialogueVoice : public UObject
{
public:
	enum class EGrammaticalGender                Gender;                                            // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EGrammaticalNumber                Plurality;                                         // 0x29(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_29CC[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 LocalizationGUID;                                  // 0x2C(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_29CD[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DialogueVoice");
		return Clss;
	}

};

// 0x48 (0x70 - 0x28)
// Class Engine.DialogueWave
class UDialogueWave : public UObject
{
public:
	uint8                                        bMature : 1;                                       // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverride_SubtitleOverride : 1;                    // Mask: 0x2, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1A9 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_29CE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SpokenText;                                        // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                SubtitleOverride;                                  // 0x40(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogueContextMapping>       ContextMappings;                                   // 0x50(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                 LocalizationGUID;                                  // 0x60(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DialogueWave");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.DocumentationActor
class ADocumentationActor : public AActor
{
public:
	uint8                                        Pad_29CF[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DocumentationActor");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.DPICustomScalingRule
class UDPICustomScalingRule : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DPICustomScalingRule");
		return Clss;
	}

};

// 0x20 (0xB8 - 0x98)
// Class Engine.EdGraphNode_Documentation
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	class FString                                Link;                                              // 0x98(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Excerpt;                                           // 0xA8(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EdGraphNode_Documentation");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AssetImportData
class UAssetImportData : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetImportData");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ThumbnailInfo
class UThumbnailInfo : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ThumbnailInfo");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementAssetDataInterface
class UActorElementAssetDataInterface : public UObject
{
public:
	uint8                                        Pad_29D0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorElementAssetDataInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementCounterInterface
class UActorElementCounterInterface : public UObject
{
public:
	uint8                                        Pad_29D1[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorElementCounterInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementHierarchyInterface
class UActorElementHierarchyInterface : public UObject
{
public:
	uint8                                        Pad_29D2[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorElementHierarchyInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementObjectInterface
class UActorElementObjectInterface : public UObject
{
public:
	uint8                                        Pad_29D3[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorElementObjectInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementSelectionInterface
class UActorElementSelectionInterface : public UObject
{
public:
	uint8                                        Pad_29D4[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorElementSelectionInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorElementWorldInterface
class UActorElementWorldInterface : public UObject
{
public:
	uint8                                        Pad_29D5[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorElementWorldInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ComponentElementCounterInterface
class UComponentElementCounterInterface : public UObject
{
public:
	uint8                                        Pad_29D6[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ComponentElementCounterInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ComponentElementHierarchyInterface
class UComponentElementHierarchyInterface : public UObject
{
public:
	uint8                                        Pad_29D7[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ComponentElementHierarchyInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ComponentElementObjectInterface
class UComponentElementObjectInterface : public UObject
{
public:
	uint8                                        Pad_29D8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ComponentElementObjectInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ComponentElementSelectionInterface
class UComponentElementSelectionInterface : public UObject
{
public:
	uint8                                        Pad_29D9[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ComponentElementSelectionInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ComponentElementWorldInterface
class UComponentElementWorldInterface : public UObject
{
public:
	uint8                                        Pad_29DA[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ComponentElementWorldInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineElementsLibrary
class UEngineElementsLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineElementsLibrary");
		return Clss;
	}

};

// 0x800 (0x828 - 0x28)
// Class Engine.TypedElementCommonActions
class UTypedElementCommonActions : public UObject
{
public:
	uint8                                        Pad_29DE[0x800];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TypedElementCommonActions");
		return Clss;
	}

	TArray<struct FScriptTypedElementHandle> K2_DuplicateSelectedElements(class UTypedElementSelectionSet* InSelectionSet, class UWorld* InWorld, struct FVector& InLocationOffset);
	TArray<struct FScriptTypedElementHandle> DuplicateNormalizedElements(const struct FScriptTypedElementListProxy& InElementList, class UWorld* InWorld, struct FVector& InLocationOffset);
	bool DeleteSelectedElements(class UTypedElementSelectionSet* InSelectionSet, class UWorld* InWorld, struct FTypedElementDeletionOptions& InDeletionOptions);
	bool DeleteNormalizedElements(const struct FScriptTypedElementListProxy& InElementList, class UWorld* InWorld, class UTypedElementSelectionSet* InInSelectionSet, struct FTypedElementDeletionOptions& InDeletionOptions);
};

// 0x0 (0x28 - 0x28)
// Class Engine.TypedElementWorldInterface
class ITypedElementWorldInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TypedElementWorldInterface");
		return Clss;
	}

	bool SetWorldTransform(struct FScriptTypedElementHandle& InInElementHandle, struct FTransform& InInTransform);
	bool SetRelativeTransform(struct FScriptTypedElementHandle& InInElementHandle, struct FTransform& InInTransform);
	bool SetPivotOffset(struct FScriptTypedElementHandle& InInElementHandle, struct FVector& InInPivotOffset);
	struct FScriptTypedElementHandle PromoteElement(struct FScriptTypedElementHandle& InInElementHandle, class UWorld* InOverrideWorld);
	void NotifyMovementStarted(struct FScriptTypedElementHandle& InInElementHandle);
	void NotifyMovementOngoing(struct FScriptTypedElementHandle& InInElementHandle);
	void NotifyMovementEnded(struct FScriptTypedElementHandle& InInElementHandle);
	bool IsTemplateElement(struct FScriptTypedElementHandle& InInElementHandle);
	bool GetWorldTransform(struct FScriptTypedElementHandle& InInElementHandle, struct FTransform* InOutTransform);
	bool GetRelativeTransform(struct FScriptTypedElementHandle& InInElementHandle, struct FTransform* InOutTransform);
	bool GetPivotOffset(struct FScriptTypedElementHandle& InInElementHandle, struct FVector* InOutPivotOffset);
	class UWorld* GetOwnerWorld(struct FScriptTypedElementHandle& InInElementHandle);
	class ULevel* GetOwnerLevel(struct FScriptTypedElementHandle& InInElementHandle);
	bool GetBounds(struct FScriptTypedElementHandle& InInElementHandle, struct FBoxSphereBounds* InOutBounds);
	struct FScriptTypedElementHandle DuplicateElement(struct FScriptTypedElementHandle& InInElementHandle, class UWorld* InInWorld, struct FVector& InInLocationOffset);
	bool DeleteElement(struct FScriptTypedElementHandle& InInElementHandle, class UWorld* InInWorld, class UTypedElementSelectionSet* InInSelectionSet, struct FTypedElementDeletionOptions& InInDeletionOptions);
	bool CanPromoteElement(struct FScriptTypedElementHandle& InInElementHandle);
	bool CanMoveElement(struct FScriptTypedElementHandle& InInElementHandle, enum class ETypedElementWorldType InInWorldType);
	bool CanEditElement(struct FScriptTypedElementHandle& InInElementHandle);
	bool CanDuplicateElement(struct FScriptTypedElementHandle& InInElementHandle);
	bool CanDeleteElement(struct FScriptTypedElementHandle& InInElementHandle);
};

// 0x8 (0x30 - 0x28)
// Class Engine.ObjectElementAssetDataInterface
class UObjectElementAssetDataInterface : public UObject
{
public:
	uint8                                        Pad_2A20[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ObjectElementAssetDataInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ObjectElementCounterInterface
class UObjectElementCounterInterface : public UObject
{
public:
	uint8                                        Pad_2A21[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ObjectElementCounterInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ObjectElementObjectInterface
class UObjectElementObjectInterface : public UObject
{
public:
	uint8                                        Pad_2A22[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ObjectElementObjectInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ObjectElementSelectionInterface
class UObjectElementSelectionInterface : public UObject
{
public:
	uint8                                        Pad_2A23[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ObjectElementSelectionInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.SMInstanceElementAssetDataInterface
class USMInstanceElementAssetDataInterface : public UObject
{
public:
	uint8                                        Pad_2A24[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SMInstanceElementAssetDataInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.SMInstanceElementHierarchyInterface
class USMInstanceElementHierarchyInterface : public UObject
{
public:
	uint8                                        Pad_2A26[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SMInstanceElementHierarchyInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.SMInstanceElementIdMapTransactor
class USMInstanceElementIdMapTransactor : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SMInstanceElementIdMapTransactor");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.SMInstanceElementSelectionInterface
class USMInstanceElementSelectionInterface : public UObject
{
public:
	uint8                                        Pad_2A28[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SMInstanceElementSelectionInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.SMInstanceElementWorldInterface
class USMInstanceElementWorldInterface : public UObject
{
public:
	uint8                                        Pad_2A2A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SMInstanceElementWorldInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.LocalMessage
class ULocalMessage : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LocalMessage");
		return Clss;
	}

};

// 0x80 (0xA8 - 0x28)
// Class Engine.EngineMessage
class UEngineMessage : public ULocalMessage
{
public:
	class FString                                FailedPlaceMessage;                                // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                MaxedOutMessage;                                   // 0x38(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                EnteredMessage;                                    // 0x48(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LeftMessage;                                       // 0x58(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                GlobalNameChange;                                  // 0x68(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                SpecEnteredMessage;                                // 0x78(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                NewPlayerMessage;                                  // 0x88(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                NewSpecMessage;                                    // 0x98(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineMessage");
		return Clss;
	}

};

// 0x10 (0x50 - 0x40)
// Class Engine.AutoDestroySubsystem
class UAutoDestroySubsystem : public UTickableWorldSubsystem
{
public:
	TArray<class AActor*>                        ActorsToPoll;                                      // 0x40(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AutoDestroySubsystem");
		return Clss;
	}

	void OnActorEndPlay(class AActor* InActor, enum class EEndPlayReason InEndPlayReason);
};

// 0x0 (0x28 - 0x28)
// Class Engine.LODSyncInterface
class ILODSyncInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LODSyncInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.PoseWatchFolder
class UPoseWatchFolder : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PoseWatchFolder");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.PoseWatchElement
class UPoseWatchElement : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PoseWatchElement");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.PoseWatchPoseElement
class UPoseWatchPoseElement : public UPoseWatchElement
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PoseWatchPoseElement");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.PoseWatch
class UPoseWatch : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PoseWatch");
		return Clss;
	}

};

// 0xC8 (0x358 - 0x290)
// Class Engine.ServerStatReplicator
class AServerStatReplicator : public AInfo
{
public:
	bool                                         bUpdateStatNet;                                    // 0x290(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverwriteClientStats;                             // 0x291(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A31[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       Channels;                                          // 0x294(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InRate;                                            // 0x298(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutRate;                                           // 0x29C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A32[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       MaxPacketOverhead;                                 // 0x2A4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InRateClientMax;                                   // 0x2A8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InRateClientMin;                                   // 0x2AC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InRateClientAvg;                                   // 0x2B0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InPacketsClientMax;                                // 0x2B4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InPacketsClientMin;                                // 0x2B8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InPacketsClientAvg;                                // 0x2BC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutRateClientMax;                                  // 0x2C0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutRateClientMin;                                  // 0x2C4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutRateClientAvg;                                  // 0x2C8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutPacketsClientMax;                               // 0x2CC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutPacketsClientMin;                               // 0x2D0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutPacketsClientAvg;                               // 0x2D4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NetNumClients;                                     // 0x2D8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InPackets;                                         // 0x2DC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutPackets;                                        // 0x2E0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InBunches;                                         // 0x2E4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutBunches;                                        // 0x2E8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutLoss;                                           // 0x2EC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InLoss;                                            // 0x2F0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       VoiceBytesSent;                                    // 0x2F4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       VoiceBytesRecv;                                    // 0x2F8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       VoicePacketsSent;                                  // 0x2FC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       VoicePacketsRecv;                                  // 0x300(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       PercentInVoice;                                    // 0x304(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       PercentOutVoice;                                   // 0x308(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumActorChannels;                                  // 0x30C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumConsideredActors;                               // 0x310(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       PrioritizedActors;                                 // 0x314(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumRelevantActors;                                 // 0x318(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumRelevantDeletedActors;                          // 0x31C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumReplicatedActorAttempts;                        // 0x320(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumReplicatedActors;                               // 0x324(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumActors;                                         // 0x328(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumNetActors;                                      // 0x32C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumDormantActors;                                  // 0x330(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumInitiallyDormantActors;                         // 0x334(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumNetGUIDsAckd;                                   // 0x338(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumNetGUIDsPending;                                // 0x33C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumNetGUIDsUnAckd;                                 // 0x340(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       ObjPathBytes;                                      // 0x344(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NetGUIDOutRate;                                    // 0x348(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NetGUIDInRate;                                     // 0x34C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NetSaturated;                                      // 0x350(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A35[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ServerStatReplicator");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.SystemTimeTimecodeProvider
class USystemTimeTimecodeProvider : public UTimecodeProvider
{
public:
	struct FFrameRate                            FrameRate;                                         // 0x30(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bGenerateFullFrame;                                // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseHighPerformanceClock;                          // 0x39(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A36[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SystemTimeTimecodeProvider");
		return Clss;
	}

};

// 0x20 (0x50 - 0x30)
// Class Engine.ViewportStatsSubsystem
class UViewportStatsSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_2A3F[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ViewportStatsSubsystem");
		return Clss;
	}

	void RemoveDisplayDelegate(int32 InIndexToRemove);
	void AddTimedDisplay(class FText InText, const struct FLinearColor& InColor, float InDuration, struct FVector2D& InDisplayOffset);
	int32 AddDisplayDelegate(FDelegateProperty_& InDelegate);
};

// 0x18 (0x170 - 0x158)
// Class Engine.FloatingPawnMovement
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                        MaxSpeed;                                          // 0x158(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Acceleration;                                      // 0x15C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Deceleration;                                      // 0x160(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TurningBoost;                                      // 0x164(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPositionCorrected : 1;                            // Mask: 0x1, PropSize: 0x10x168(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_2A44[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("FloatingPawnMovement");
		return Clss;
	}

};

// 0x1A8 (0x1D0 - 0x28)
// Class Engine.Font
class UFont : public UObject
{
public:
	uint8                                        Pad_2A46[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EFontCacheType                    FontCacheType;                                     // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A47[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FFontCharacter>                Characters;                                        // 0x38(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                    Textures;                                          // 0x48(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                        IsRemapped;                                        // 0x58(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EmScale;                                           // 0x5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Ascent;                                            // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Descent;                                           // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Leading;                                           // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Kerning;                                           // 0x6C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontImportOptionsData                ImportOptions;                                     // 0x70(0xB0)(Edit, NativeAccessSpecifierPublic)
	int32                                        NumCharacters;                                     // 0x120(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A4A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                MaxCharHeight;                                     // 0x128(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                        ScalingFactor;                                     // 0x138(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LegacyFontSize;                                    // 0x13C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  LegacyFontName;                                    // 0x140(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCompositeFont                        CompositeFont;                                     // 0x148(0x38)(NativeAccessSpecifierPublic)
	uint8                                        Pad_2A4B[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Font");
		return Clss;
	}

};

// 0x30 (0x58 - 0x28)
// Class Engine.FontFace
class UFontFace : public UObject
{
public:
	uint8                                        Pad_2A4E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SourceFilename;                                    // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFontHinting                      Hinting;                                           // 0x40(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFontLoadingPolicy                LoadingPolicy;                                     // 0x41(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFontLayoutMethod                 LayoutMethod;                                      // 0x42(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A50[0x15];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("FontFace");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.AsyncActionHandleSaveGame
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_            Completed;                                         // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A57[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USaveGame*                             SaveGameObject;                                    // 0x60(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AsyncActionHandleSaveGame");
		return Clss;
	}

	class UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(class UObject* InWorldContextObject, class USaveGame* InSaveGameObject, const class FString& InSlotName, int32 InUserIndex);
	class UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(class UObject* InWorldContextObject, const class FString& InSlotName, int32 InUserIndex);
};

// 0x18 (0x40 - 0x28)
// Class Engine.ForceFeedbackEffect
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>  ChannelDetails;                                    // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        Duration;                                          // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A58[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ForceFeedbackEffect");
		return Clss;
	}

};

// 0x30 (0x58 - 0x28)
// Class Engine.TouchInterface
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>            Controls;                                          // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        ActiveOpacity;                                     // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InactiveOpacity;                                   // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeUntilDeactive;                                 // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeUntilReset;                                    // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActivationDelay;                                   // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPreventRecenter;                                  // 0x4C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A59[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StartupDelay;                                      // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2A5A[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TouchInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.GameplayStatics
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameplayStatics");
		return Clss;
	}

	void UnRetainAllSoundsInSoundClass(class USoundClass* InInSoundClass);
	void UnloadStreamLevelBySoftObjectPtr(class UObject* InWorldContextObject, TSoftObjectPtr<class UWorld> InLevel, const struct FLatentActionInfo& InLatentInfo, bool InbShouldBlockOnUnload);
	void UnloadStreamLevel(class UObject* InWorldContextObject, class FName InLevelName, const struct FLatentActionInfo& InLatentInfo, bool InbShouldBlockOnUnload);
	bool SuggestProjectileVelocity_CustomArc(class UObject* InWorldContextObject, struct FVector* InOutLaunchVelocity, const struct FVector& InStartPos, const struct FVector& InEndPos, float InOverrideGravityZ, float InArcParam);
	class UAudioComponent* SpawnSoundAttached(class USoundBase* InSound, class USceneComponent* InAttachToComponent, class FName InAttachPointName, const struct FVector& InLocation, const struct FRotator& InRotation, enum class EAttachLocation InLocationType, bool InbStopWhenAttachedToDestroyed, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime, class USoundAttenuation* InAttenuationSettings, class USoundConcurrency* InConcurrencySettings, bool InbAutoDestroy);
	class UAudioComponent* SpawnSoundAtLocation(class UObject* InWorldContextObject, class USoundBase* InSound, const struct FVector& InLocation, const struct FRotator& InRotation, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime, class USoundAttenuation* InAttenuationSettings, class USoundConcurrency* InConcurrencySettings, bool InbAutoDestroy);
	class UAudioComponent* SpawnSound2D(class UObject* InWorldContextObject, class USoundBase* InSound, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime, class USoundConcurrency* InConcurrencySettings, bool InbPersistAcrossLevelTransition, bool InbAutoDestroy);
	class UObject* SpawnObject(TSubclassOf<class UObject> InObjectClass, class UObject* InOuter);
	class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* InForceFeedbackEffect, class USceneComponent* InAttachToComponent, class FName InAttachPointName, const struct FVector& InLocation, const struct FRotator& InRotation, enum class EAttachLocation InLocationType, bool InbStopWhenAttachedToDestroyed, bool InbLooping, float InIntensityMultiplier, float InStartTime, class UForceFeedbackAttenuation* InAttenuationSettings, bool InbAutoDestroy);
	class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(class UObject* InWorldContextObject, class UForceFeedbackEffect* InForceFeedbackEffect, const struct FVector& InLocation, const struct FRotator& InRotation, bool InbLooping, float InIntensityMultiplier, float InStartTime, class UForceFeedbackAttenuation* InAttenuationSettings, bool InbAutoDestroy);
	class UParticleSystemComponent* SpawnEmitterAttached(class UParticleSystem* InEmitterTemplate, class USceneComponent* InAttachToComponent, class FName InAttachPointName, const struct FVector& InLocation, const struct FRotator& InRotation, const struct FVector& InScale, enum class EAttachLocation InLocationType, bool InbAutoDestroy, enum class EPSCPoolMethod InPoolingMethod, bool InbAutoActivate);
	class UParticleSystemComponent* SpawnEmitterAtLocation(class UObject* InWorldContextObject, class UParticleSystem* InEmitterTemplate, const struct FVector& InLocation, const struct FRotator& InRotation, const struct FVector& InScale, bool InbAutoDestroy, enum class EPSCPoolMethod InPoolingMethod, bool InbAutoActivateSystem);
	class UAudioComponent* SpawnDialogueAttached(class UDialogueWave* InDialogue, struct FDialogueContext& InContext, class USceneComponent* InAttachToComponent, class FName InAttachPointName, const struct FVector& InLocation, const struct FRotator& InRotation, enum class EAttachLocation InLocationType, bool InbStopWhenAttachedToDestroyed, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime, class USoundAttenuation* InAttenuationSettings, bool InbAutoDestroy);
	class UAudioComponent* SpawnDialogueAtLocation(class UObject* InWorldContextObject, class UDialogueWave* InDialogue, struct FDialogueContext& InContext, const struct FVector& InLocation, const struct FRotator& InRotation, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime, class USoundAttenuation* InAttenuationSettings, bool InbAutoDestroy);
	class UAudioComponent* SpawnDialogue2D(class UObject* InWorldContextObject, class UDialogueWave* InDialogue, struct FDialogueContext& InContext, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime, bool InbAutoDestroy);
	class UDecalComponent* SpawnDecalAttached(class UMaterialInterface* InDecalMaterial, const struct FVector& InDecalSize, class USceneComponent* InAttachToComponent, class FName InAttachPointName, const struct FVector& InLocation, const struct FRotator& InRotation, enum class EAttachLocation InLocationType, float InLifeSpan);
	class UDecalComponent* SpawnDecalAtLocation(class UObject* InWorldContextObject, class UMaterialInterface* InDecalMaterial, const struct FVector& InDecalSize, const struct FVector& InLocation, const struct FRotator& InRotation, float InLifeSpan);
	void SetWorldOriginLocation(class UObject* InWorldContextObject, const struct FIntVector& InNewLocation);
	void SetViewportMouseCaptureMode(class UObject* InWorldContextObject, enum class EMouseCaptureMode InMouseCaptureMode);
	void SetSubtitlesEnabled(bool InbEnabled);
	void SetSoundMixClassOverride(class UObject* InWorldContextObject, class USoundMix* InInSoundMixModifier, class USoundClass* InInSoundClass, float InVolume, float InPitch, float InFadeInTime, bool InbApplyToChildren);
	void SetSoundClassDistanceScale(class UObject* InWorldContextObject, class USoundClass* InSoundClass, float InDistanceAttenuationScale, float InTimeSec);
	void SetPlayerPlatformUserId(class APlayerController* InPlayerController, const struct FPlatformUserId& InUserId);
	void SetPlayerControllerID(class APlayerController* InPlayer, int32 InControllerId);
	void SetMaxAudioChannelsScaled(class UObject* InWorldContextObject, float InMaxChannelCountScale);
	void SetGlobalTimeDilation(class UObject* InWorldContextObject, float InTimeDilation);
	void SetGlobalPitchModulation(class UObject* InWorldContextObject, float InPitchModulation, float InTimeSec);
	void SetGlobalListenerFocusParameters(class UObject* InWorldContextObject, float InFocusAzimuthScale, float InNonFocusAzimuthScale, float InFocusDistanceScale, float InNonFocusDistanceScale, float InFocusVolumeScale, float InNonFocusVolumeScale, float InFocusPriorityScale, float InNonFocusPriorityScale);
	bool SetGamePaused(class UObject* InWorldContextObject, bool InbPaused);
	void SetForceDisableSplitscreen(class UObject* InWorldContextObject, bool InbDisable);
	void SetEnableWorldRendering(class UObject* InWorldContextObject, bool InbEnable);
	void SetBaseSoundMix(class UObject* InWorldContextObject, class USoundMix* InInSoundMix);
	bool SetActiveSpatialPluginByName(class UObject* InWorldContextObject, class FName InInPluginName);
	bool SaveGameToSlot(class USaveGame* InSaveGameObject, const class FString& InSlotName, int32 InUserIndex);
	void RemovePlayer(class APlayerController* InPlayer, bool InbDestroyPawn);
	struct FVector RebaseZeroOriginOntoLocal(class UObject* InWorldContextObject, const struct FVector& InWorldLocation);
	struct FVector RebaseLocalOriginOntoZero(class UObject* InWorldContextObject, const struct FVector& InWorldLocation);
	void PushSoundMixModifier(class UObject* InWorldContextObject, class USoundMix* InInSoundMixModifier);
	bool ProjectWorldToScreen(class APlayerController* InPlayer, struct FVector& InWorldPosition, struct FVector2D* InScreenPosition, bool InbPlayerViewportRelative);
	void PrimeSound(class USoundBase* InInSound);
	void PrimeAllSoundsInSoundClass(class USoundClass* InInSoundClass);
	void PopSoundMixModifier(class UObject* InWorldContextObject, class USoundMix* InInSoundMixModifier);
	void PlayWorldCameraShake(class UObject* InWorldContextObject, TSubclassOf<class UCameraShakeBase> InShake, const struct FVector& InEpicenter, float InInnerRadius, float InOuterRadius, float InFalloff, bool InbOrientShakeTowardsEpicenter);
	void PlaySoundAtLocation(class UObject* InWorldContextObject, class USoundBase* InSound, const struct FVector& InLocation, const struct FRotator& InRotation, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime, class USoundAttenuation* InAttenuationSettings, class USoundConcurrency* InConcurrencySettings, class AActor* InOwningActor, class UInitialActiveSoundParams* InInitialParams);
	void PlaySound2D(class UObject* InWorldContextObject, class USoundBase* InSound, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime, class USoundConcurrency* InConcurrencySettings, class AActor* InOwningActor, bool InbIsUISound);
	void PlayDialogueAtLocation(class UObject* InWorldContextObject, class UDialogueWave* InDialogue, struct FDialogueContext& InContext, const struct FVector& InLocation, const struct FRotator& InRotation, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime, class USoundAttenuation* InAttenuationSettings);
	void PlayDialogue2D(class UObject* InWorldContextObject, class UDialogueWave* InDialogue, struct FDialogueContext& InContext, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime);
	class FString ParseOption(const class FString& InOptions, const class FString& InKey);
	void OpenLevelBySoftObjectPtr(class UObject* InWorldContextObject, TSoftObjectPtr<class UWorld> InLevel, bool InbAbsolute, const class FString& InOptions);
	void OpenLevel(class UObject* InWorldContextObject, class FName InLevelName, bool InbAbsolute, const class FString& InOptions);
	bool ObjectIsA(class UObject* InObject, TSubclassOf<class UObject> InObjectClass);
	struct FHitResult MakeHitResult(bool InbBlockingHit, bool InbInitialOverlap, float InTime, float InDistance, const struct FVector& InLocation, const struct FVector& InImpactPoint, const struct FVector& InNormal, const struct FVector& InImpactNormal, class UPhysicalMaterial* InPhysMat, class AActor* InHitActor, class UPrimitiveComponent* InHitComponent, class FName InHitBoneName, class FName InBoneName, int32 InHitItem, int32 InElementIndex, int32 InFaceIndex, const struct FVector& InTraceStart, const struct FVector& InTraceEnd);
	void LoadStreamLevelBySoftObjectPtr(class UObject* InWorldContextObject, TSoftObjectPtr<class UWorld> InLevel, bool InbMakeVisibleAfterLoad, bool InbShouldBlockOnLoad, const struct FLatentActionInfo& InLatentInfo);
	void LoadStreamLevel(class UObject* InWorldContextObject, class FName InLevelName, bool InbMakeVisibleAfterLoad, bool InbShouldBlockOnLoad, const struct FLatentActionInfo& InLatentInfo);
	class USaveGame* LoadGameFromSlot(const class FString& InSlotName, int32 InUserIndex);
	bool IsSplitscreenForceDisabled(class UObject* InWorldContextObject);
	bool IsGamePaused(class UObject* InWorldContextObject);
	bool HasOption(const class FString& InOptions, const class FString& InInKey);
	bool HasLaunchOption(const class FString& InOptionToCheck);
	int32 GrassOverlappingSphereCount(class UObject* InWorldContextObject, class UStaticMesh* InStaticMesh, const struct FVector& InCenterPosition, float InRadius);
	struct FIntVector GetWorldOriginLocation(class UObject* InWorldContextObject);
	double GetWorldDeltaSeconds(class UObject* InWorldContextObject);
	void GetViewProjectionMatrix(const struct FMinimalViewInfo& InDesiredView, struct FMatrix* InViewMatrix, struct FMatrix* InProjectionMatrix, struct FMatrix* InViewProjectionMatrix);
	enum class EMouseCaptureMode GetViewportMouseCaptureMode(class UObject* InWorldContextObject);
	double GetUnpausedTimeSeconds(class UObject* InWorldContextObject);
	double GetTimeSeconds(class UObject* InWorldContextObject);
	enum class EPhysicalSurface GetSurfaceType(struct FHitResult& InHit);
	class ULevelStreaming* GetStreamingLevel(class UObject* InWorldContextObject, class FName InPackageName);
	double GetRealTimeSeconds(class UObject* InWorldContextObject);
	class APlayerState* GetPlayerStateFromUniqueNetId(class UObject* InWorldContextObject, struct FUniqueNetIdRepl& InUniqueId);
	class APlayerState* GetPlayerState(class UObject* InWorldContextObject, int32 InPlayerStateIndex);
	class APawn* GetPlayerPawn(class UObject* InWorldContextObject, int32 InPlayerIndex);
	int32 GetPlayerControllerID(class APlayerController* InPlayer);
	class APlayerController* GetPlayerControllerFromPlatformUser(class UObject* InWorldContextObject, const struct FPlatformUserId& InUserId);
	class APlayerController* GetPlayerControllerFromID(class UObject* InWorldContextObject, int32 InControllerId);
	class APlayerController* GetPlayerController(class UObject* InWorldContextObject, int32 InPlayerIndex);
	class ACharacter* GetPlayerCharacter(class UObject* InWorldContextObject, int32 InPlayerIndex);
	class APlayerCameraManager* GetPlayerCameraManager(class UObject* InWorldContextObject, int32 InPlayerIndex);
	class FString GetPlatformName();
	class UClass* GetObjectClass(class UObject* InObject);
	int32 GetNumPlayerStates(class UObject* InWorldContextObject);
	int32 GetNumPlayerControllers(class UObject* InWorldContextObject);
	int32 GetNumLocalPlayerControllers(class UObject* InWorldContextObject);
	int32 GetMaxAudioChannelCount(class UObject* InWorldContextObject);
	void GetKeyValue(const class FString& InPair, class FString* InKey, class FString* InValue);
	int32 GetIntOption(const class FString& InOptions, const class FString& InKey, int32 InDefaultValue);
	float GetGlobalTimeDilation(class UObject* InWorldContextObject);
	class AGameStateBase* GetGameState(class UObject* InWorldContextObject);
	class AGameModeBase* GetGameMode(class UObject* InWorldContextObject);
	class UGameInstance* GetGameInstance(class UObject* InWorldContextObject);
	bool GetEnableWorldRendering(class UObject* InWorldContextObject);
	class UReverbEffect* GetCurrentReverbEffect(class UObject* InWorldContextObject);
	class FString GetCurrentLevelName(class UObject* InWorldContextObject, bool InbRemovePrefixString);
	bool GetClosestListenerLocation(class UObject* InWorldContextObject, struct FVector& InLocation, float InMaximumRange, bool InbAllowAttenuationOverride, struct FVector* InListenerPosition);
	TArray<class FName> GetAvailableSpatialPluginNames(class UObject* InWorldContextObject);
	double GetAudioTimeSeconds(class UObject* InWorldContextObject);
	void GetAllActorsWithTag(class UObject* InWorldContextObject, class FName InTag, TArray<class AActor*>* InOutActors);
	void GetAllActorsWithInterface(class UObject* InWorldContextObject, TSubclassOf<class IInterface> InInterface, TArray<class AActor*>* InOutActors);
	void GetAllActorsOfClassWithTag(class UObject* InWorldContextObject, TSubclassOf<class AActor> InActorClass, class FName InTag, TArray<class AActor*>* InOutActors);
	void GetAllActorsOfClass(class UObject* InWorldContextObject, TSubclassOf<class AActor> InActorClass, TArray<class AActor*>* InOutActors);
	class AActor* GetActorOfClass(class UObject* InWorldContextObject, TSubclassOf<class AActor> InActorClass);
	void GetActorArrayBounds(TArray<class AActor*>& InActors, bool InbOnlyCollidingComponents, struct FVector* InCenter, struct FVector* InBoxExtent);
	struct FVector GetActorArrayAverageLocation(TArray<class AActor*>& InActors);
	class FName GetActiveSpatialPluginName(class UObject* InWorldContextObject);
	void GetAccurateRealTime(int32* InSeconds, double* InPartialSeconds);
	void FlushLevelStreaming(class UObject* InWorldContextObject);
	class AActor* FinishSpawningActor(class AActor* InActor, struct FTransform& InSpawnTransform);
	class AActor* FindNearestActor(const struct FVector& InOrigin, TArray<class AActor*>& InActorsToCheck, float* InDistance);
	bool FindCollisionUV(struct FHitResult& InHit, int32 InUVChannel, struct FVector2D* InUV);
	void EnableLiveStreaming(bool InEnable);
	bool DoesSaveGameExist(const class FString& InSlotName, int32 InUserIndex);
	bool DeprojectScreenToWorld(class APlayerController* InPlayer, struct FVector2D& InScreenPosition, struct FVector* InWorldPosition, struct FVector* InWorldDirection);
	bool DeprojectSceneCaptureToWorld(class ASceneCapture2D* InSceneCapture2D, struct FVector2D& InTargetUV, struct FVector* InWorldPosition, struct FVector* InWorldDirection);
	bool DeleteGameInSlot(const class FString& InSlotName, int32 InUserIndex);
	void DeactivateReverbEffect(class UObject* InWorldContextObject, class FName InTagName);
	class UAudioComponent* CreateSound2D(class UObject* InWorldContextObject, class USoundBase* InSound, float InVolumeMultiplier, float InPitchMultiplier, float InStartTime, class USoundConcurrency* InConcurrencySettings, bool InbPersistAcrossLevelTransition, bool InbAutoDestroy);
	class USaveGame* CreateSaveGameObject(TSubclassOf<class USaveGame> InSaveGameClass);
	class APlayerController* CreatePlayerFromPlatformUser(class UObject* InWorldContextObject, const struct FPlatformUserId& InUserId, bool InbSpawnPlayerController);
	class APlayerController* CreatePlayer(class UObject* InWorldContextObject, int32 InControllerId, bool InbSpawnPlayerController);
	void ClearSoundMixModifiers(class UObject* InWorldContextObject);
	void ClearSoundMixClassOverride(class UObject* InWorldContextObject, class USoundMix* InInSoundMixModifier, class USoundClass* InInSoundClass, float InFadeOutTime);
	void CancelAsyncLoading();
	void BreakHitResult(struct FHitResult& InHit, bool* InbBlockingHit, bool* InbInitialOverlap, float* InTime, float* InDistance, struct FVector* InLocation, struct FVector* InImpactPoint, struct FVector* InNormal, struct FVector* InImpactNormal, class UPhysicalMaterial** InPhysMat, class AActor** InHitActor, class UPrimitiveComponent** InHitComponent, class FName* InHitBoneName, class FName* InBoneName, int32* InHitItem, int32* InElementIndex, int32* InFaceIndex, struct FVector* InTraceStart, struct FVector* InTraceEnd);
	bool BlueprintSuggestProjectileVelocity(class UObject* InWorldContextObject, struct FVector* InTossVelocity, const struct FVector& InStartLocation, const struct FVector& InEndLocation, float InLaunchSpeed, float InOverrideGravityZ, enum class ESuggestProjVelocityTraceOption InTraceOption, float InCollisionRadius, bool InbFavorHighArc, bool InbDrawDebug);
	bool Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* InWorldContextObject, struct FHitResult* InOutHit, TArray<struct FVector>* InOutPathPositions, struct FVector* InOutLastTraceDestination, const struct FVector& InStartPos, const struct FVector& InLaunchVelocity, bool InbTracePath, float InProjectileRadius, enum class ECollisionChannel InTraceChannel, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, float InDrawDebugTime, float InSimFrequency, float InMaxSimTime, float InOverrideGravityZ);
	bool Blueprint_PredictProjectilePath_ByObjectType(class UObject* InWorldContextObject, struct FHitResult* InOutHit, TArray<struct FVector>* InOutPathPositions, struct FVector* InOutLastTraceDestination, const struct FVector& InStartPos, const struct FVector& InLaunchVelocity, bool InbTracePath, float InProjectileRadius, TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, float InDrawDebugTime, float InSimFrequency, float InMaxSimTime, float InOverrideGravityZ);
	bool Blueprint_PredictProjectilePath_Advanced(class UObject* InWorldContextObject, struct FPredictProjectilePathParams& InPredictParams, struct FPredictProjectilePathResult* InPredictResult);
	class AActor* BeginSpawningActorFromBlueprint(class UObject* InWorldContextObject, class UBlueprint* InBlueprint, struct FTransform& InSpawnTransform, bool InbNoCollisionFail);
	class AActor* BeginDeferredActorSpawnFromClass(class UObject* InWorldContextObject, TSubclassOf<class AActor> InActorClass, struct FTransform& InSpawnTransform, enum class ESpawnActorCollisionHandlingMethod InCollisionHandlingOverride, class AActor* InOwner);
	bool AreSubtitlesEnabled();
	bool AreAnyListenersWithinRange(class UObject* InWorldContextObject, struct FVector& InLocation, float InMaximumRange);
	bool ApplyRadialDamageWithFalloff(class UObject* InWorldContextObject, float InBaseDamage, float InMinimumDamage, struct FVector& InOrigin, float InDamageInnerRadius, float InDamageOuterRadius, float InDamageFalloff, TSubclassOf<class UDamageType> InDamageTypeClass, TArray<class AActor*>& InIgnoreActors, class AActor* InDamageCauser, class AController* InInstigatedByController, enum class ECollisionChannel InDamagePreventionChannel);
	bool ApplyRadialDamage(class UObject* InWorldContextObject, float InBaseDamage, struct FVector& InOrigin, float InDamageRadius, TSubclassOf<class UDamageType> InDamageTypeClass, TArray<class AActor*>& InIgnoreActors, class AActor* InDamageCauser, class AController* InInstigatedByController, bool InbDoFullDamage, enum class ECollisionChannel InDamagePreventionChannel);
	float ApplyPointDamage(class AActor* InDamagedActor, float InBaseDamage, struct FVector& InHitFromDirection, struct FHitResult& InHitInfo, class AController* InEventInstigator, class AActor* InDamageCauser, TSubclassOf<class UDamageType> InDamageTypeClass);
	float ApplyDamage(class AActor* InDamagedActor, float InBaseDamage, class AController* InEventInstigator, class AActor* InDamageCauser, TSubclassOf<class UDamageType> InDamageTypeClass);
	void AnnounceAccessibleString(const class FString& InAnnouncementString);
	void ActivateReverbEffect(class UObject* InWorldContextObject, class UReverbEffect* InReverbEffect, class FName InTagName, float InPriority, float InVolume, float InFadeTime);
};

// 0x60 (0x88 - 0x28)
// Class Engine.HLODProxy
class UHLODProxy : public UObject
{
public:
	TArray<struct FHLODProxyMesh>                ProxyMeshes;                                       // 0x28(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TMap<class UHLODProxyDesc*, struct FHLODProxyMesh> HLODActors;                                        // 0x38(0x50)(Edit, EditConst, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HLODProxy");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.HLODEngineSubsystem
class UHLODEngineSubsystem : public UEngineSubsystem
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HLODEngineSubsystem");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.HLODProxyDesc
class UHLODProxyDesc : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HLODProxyDesc");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ImportantToggleSettingInterface
class IImportantToggleSettingInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ImportantToggleSettingInterface");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.InheritableComponentHandler
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>      Records;                                           // 0x28(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>               UnnecessaryComponents;                             // 0x38(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InheritableComponentHandler");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputActionDelegateBinding
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                       // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputActionDelegateBinding");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputAxisDelegateBinding
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings;                         // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputAxisDelegateBinding");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputAxisKeyDelegateBinding
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                      // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputAxisKeyDelegateBinding");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputKeyDelegateBinding
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings;                          // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputKeyDelegateBinding");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputTouchDelegateBinding
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                        // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputTouchDelegateBinding");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.InputVectorAxisDelegateBinding
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputVectorAxisDelegateBinding");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.InstancedPlacemenClientSettings
class UInstancedPlacemenClientSettings : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InstancedPlacemenClientSettings");
		return Clss;
	}

};

// 0x0 (0x2A0 - 0x2A0)
// Class Engine.InstancedPlacementPartitionActor
class AInstancedPlacementPartitionActor : public AISMPartitionActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InstancedPlacementPartitionActor");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.StringTable
class UStringTable : public UObject
{
public:
	uint8                                        Pad_2D06[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StringTable");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.InterpCurveEdSetup
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                   Tabs;                                              // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        ActiveTab;                                         // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D07[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpCurveEdSetup");
		return Clss;
	}

};

// 0x28 (0x50 - 0x28)
// Class Engine.IntSerialization
class UIntSerialization : public UObject
{
public:
	uint16                                       UnsignedInt16Variable;                             // 0x28(0x2)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D0A[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       UnsignedInt32Variable;                             // 0x2C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                       UnsignedInt64Variable;                             // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                         SignedInt8Variable;                                // 0x38(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D0C[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int16                                        SignedInt16Variable;                               // 0x3A(0x2)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D0D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int64                                        SignedInt64Variable;                               // 0x40(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        UnsignedInt8Variable;                              // 0x48(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_2D0E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SignedInt32Variable;                               // 0x4C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("IntSerialization");
		return Clss;
	}

};

// 0x0 (0x2D8 - 0x2D8)
// Class Engine.KillZVolume
class AKillZVolume : public APhysicsVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KillZVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetArrayLibrary
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetArrayLibrary");
		return Clss;
	}

	void SetArrayPropertyByName(class UObject* InObject, class FName InPropertyName, TArray<int32>& InValue);
	void FilterArray(TArray<class AActor*>& InTargetArray, TSubclassOf<class AActor> InFilterClass, TArray<class AActor*>* InFilteredArray);
	void Array_Swap(TArray<int32>& InTargetArray, int32 InFirstIndex, int32 InSecondIndex);
	void Array_Shuffle(TArray<int32>& InTargetArray);
	void Array_Set(TArray<int32>& InTargetArray, int32 InIndex, int32& InItem, bool InbSizeToFit);
	void Array_Reverse(TArray<int32>& InTargetArray);
	void Array_Resize(TArray<int32>& InTargetArray, int32 InSize);
	bool Array_RemoveItem(TArray<int32>& InTargetArray, int32& InItem);
	void Array_Remove(TArray<int32>& InTargetArray, int32 InIndexToRemove);
	void Array_RandomFromStream(TArray<int32>& InTargetArray, struct FRandomStream& InRandomStream, int32* InOutItem, int32* InOutIndex);
	void Array_Random(TArray<int32>& InTargetArray, int32* InOutItem, int32* InOutIndex);
	int32 Array_Length(TArray<int32>& InTargetArray);
	int32 Array_LastIndex(TArray<int32>& InTargetArray);
	bool Array_IsValidIndex(TArray<int32>& InTargetArray, int32 InIndexToTest);
	bool Array_IsNotEmpty(TArray<int32>& InTargetArray);
	bool Array_IsEmpty(TArray<int32>& InTargetArray);
	void Array_Insert(TArray<int32>& InTargetArray, int32& InNewItem, int32 InIndex);
	bool Array_Identical(TArray<int32>& InArrayA, TArray<int32>& InArrayB);
	void Array_Get(TArray<int32>& InTargetArray, int32 InIndex, int32* InItem);
	int32 Array_Find(TArray<int32>& InTargetArray, int32& InItemToFind);
	bool Array_Contains(TArray<int32>& InTargetArray, int32& InItemToFind);
	void Array_Clear(TArray<int32>& InTargetArray);
	void Array_Append(TArray<int32>& InTargetArray, TArray<int32>& InSourceArray);
	int32 Array_AddUnique(TArray<int32>& InTargetArray, int32& InNewItem);
	int32 Array_Add(TArray<int32>& InTargetArray, int32& InNewItem);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetGuidLibrary
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetGuidLibrary");
		return Clss;
	}

	void Parse_StringToGuid(const class FString& InGuidString, struct FGuid* InOutGuid, bool* InSuccess);
	bool NotEqual_GuidGuid(struct FGuid& InA, struct FGuid& InB);
	struct FGuid NewGuid();
	bool IsValid_Guid(struct FGuid& InInGuid);
	void Invalidate_Guid(struct FGuid& InInGuid);
	bool EqualEqual_GuidGuid(struct FGuid& InA, struct FGuid& InB);
	class FString Conv_GuidToString(struct FGuid& InInGuid);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetInputLibrary
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetInputLibrary");
		return Clss;
	}

	bool PointerEvent_IsTouchEvent(struct FPointerEvent& InInput);
	bool PointerEvent_IsMouseButtonDown(struct FPointerEvent& InInput, const struct FKey& InMouseButton);
	float PointerEvent_GetWheelDelta(struct FPointerEvent& InInput);
	int32 PointerEvent_GetUserIndex(struct FPointerEvent& InInput);
	int32 PointerEvent_GetTouchpadIndex(struct FPointerEvent& InInput);
	struct FVector2D PointerEvent_GetScreenSpacePosition(struct FPointerEvent& InInput);
	int32 PointerEvent_GetPointerIndex(struct FPointerEvent& InInput);
	struct FVector2D PointerEvent_GetLastScreenSpacePosition(struct FPointerEvent& InInput);
	enum class ESlateGesture PointerEvent_GetGestureType(struct FPointerEvent& InInput);
	struct FVector2D PointerEvent_GetGestureDelta(struct FPointerEvent& InInput);
	struct FKey PointerEvent_GetEffectingButton(struct FPointerEvent& InInput);
	struct FVector2D PointerEvent_GetCursorDelta(struct FPointerEvent& InInput);
	bool ModifierKeysState_IsShiftDown(struct FSlateModifierKeysState& InKeysState);
	bool ModifierKeysState_IsControlDown(struct FSlateModifierKeysState& InKeysState);
	bool ModifierKeysState_IsCommandDown(struct FSlateModifierKeysState& InKeysState);
	bool ModifierKeysState_IsAltDown(struct FSlateModifierKeysState& InKeysState);
	bool Key_IsVectorAxis(struct FKey& InKey);
	bool Key_IsValid(struct FKey& InKey);
	bool Key_IsMouseButton(struct FKey& InKey);
	bool Key_IsModifierKey(struct FKey& InKey);
	bool Key_IsKeyboardKey(struct FKey& InKey);
	bool Key_IsGamepadKey(struct FKey& InKey);
	bool Key_IsDigital(struct FKey& InKey);
	bool Key_IsButtonAxis(struct FKey& InKey);
	bool Key_IsAxis3D(struct FKey& InKey);
	bool Key_IsAxis2D(struct FKey& InKey);
	bool Key_IsAxis1D(struct FKey& InKey);
	bool Key_IsAnalog(struct FKey& InKey);
	enum class EUINavigation Key_GetNavigationDirectionFromKey(struct FKeyEvent& InInKeyEvent);
	enum class EUINavigation Key_GetNavigationDirectionFromAnalog(struct FAnalogInputEvent& InInAnalogEvent);
	enum class EUINavigationAction Key_GetNavigationActionFromKey(struct FKeyEvent& InInKeyEvent);
	enum class EUINavigationAction Key_GetNavigationAction(struct FKey& InInKey);
	class FText Key_GetDisplayName(struct FKey& InKey, bool InbLongDisplayName);
	bool InputEvent_IsShiftDown(struct FInputEvent& InInput);
	bool InputEvent_IsRightShiftDown(struct FInputEvent& InInput);
	bool InputEvent_IsRightControlDown(struct FInputEvent& InInput);
	bool InputEvent_IsRightCommandDown(struct FInputEvent& InInput);
	bool InputEvent_IsRightAltDown(struct FInputEvent& InInput);
	bool InputEvent_IsRepeat(struct FInputEvent& InInput);
	bool InputEvent_IsLeftShiftDown(struct FInputEvent& InInput);
	bool InputEvent_IsLeftControlDown(struct FInputEvent& InInput);
	bool InputEvent_IsLeftCommandDown(struct FInputEvent& InInput);
	bool InputEvent_IsLeftAltDown(struct FInputEvent& InInput);
	bool InputEvent_IsControlDown(struct FInputEvent& InInput);
	bool InputEvent_IsCommandDown(struct FInputEvent& InInput);
	bool InputEvent_IsAltDown(struct FInputEvent& InInput);
	class FText InputChord_GetDisplayName(struct FInputChord& InKey);
	int32 GetUserIndex(struct FKeyEvent& InInput);
	struct FSlateModifierKeysState GetModifierKeysState();
	struct FKey GetKey(struct FKeyEvent& InInput);
	float GetAnalogValue(struct FAnalogInputEvent& InInput);
	bool EqualEqual_KeyKey(const struct FKey& InA, const struct FKey& InB);
	bool EqualEqual_InputChordInputChord(const struct FInputChord& InA, const struct FInputChord& InB);
	void CalibrateTilt();
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetInternationalizationLibrary
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetInternationalizationLibrary");
		return Clss;
	}

	bool SetCurrentLocale(const class FString& InCulture, bool InSaveToConfig);
	bool SetCurrentLanguageAndLocale(const class FString& InCulture, bool InSaveToConfig);
	bool SetCurrentLanguage(const class FString& InCulture, bool InSaveToConfig);
	bool SetCurrentCulture(const class FString& InCulture, bool InSaveToConfig);
	bool SetCurrentAssetGroupCulture(class FName InAssetGroup, const class FString& InCulture, bool InSaveToConfig);
	class FString GetSuitableCulture(TArray<class FString>& InAvailableCultures, const class FString& InCultureToMatch, const class FString& InFallbackCulture);
	class FString GetNativeCulture(enum class ELocalizedTextSourceCategory InTextCategory);
	TArray<class FString> GetLocalizedCultures(bool InIncludeGame, bool InIncludeEngine, bool InIncludeEditor, bool InIncludeAdditional);
	class FString GetCurrentLocale();
	class FString GetCurrentLanguage();
	class FString GetCurrentCulture();
	class FString GetCurrentAssetGroupCulture(class FName InAssetGroup);
	class FString GetCultureDisplayName(const class FString& InCulture, bool InLocalized);
	void ClearCurrentAssetGroupCulture(class FName InAssetGroup, bool InSaveToConfig);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetMaterialLibrary
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetMaterialLibrary");
		return Clss;
	}

	void SetVectorParameterValue(class UObject* InWorldContextObject, class UMaterialParameterCollection* InCollection, class FName InParameterName, struct FLinearColor& InParameterValue);
	void SetScalarParameterValue(class UObject* InWorldContextObject, class UMaterialParameterCollection* InCollection, class FName InParameterName, float InParameterValue);
	struct FLinearColor GetVectorParameterValue(class UObject* InWorldContextObject, class UMaterialParameterCollection* InCollection, class FName InParameterName);
	float GetScalarParameterValue(class UObject* InWorldContextObject, class UMaterialParameterCollection* InCollection, class FName InParameterName);
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(class UObject* InWorldContextObject, class UMaterialInterface* InParent, class FName InOptionalName, enum class EMIDCreationFlags InCreationFlags);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetMathLibrary
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetMathLibrary");
		return Clss;
	}

	int32 Xor_IntInt(int32 InA, int32 InB);
	int64 Xor_Int64Int64(int64 InA, int64 InB);
	int32 Wrap(int32 InValue, int32 InMin, int32 InMax);
	struct FVector WeightedMovingAverage_FVector(const struct FVector& InCurrentSample, const struct FVector& InPreviousSample, float InWeight);
	struct FRotator WeightedMovingAverage_FRotator(const struct FRotator& InCurrentSample, const struct FRotator& InPreviousSample, float InWeight);
	float WeightedMovingAverage_Float(float InCurrentSample, float InPreviousSample, float InWeight);
	double VSizeXYSquared(const struct FVector& InA);
	double VSizeXY(const struct FVector& InA);
	double VSizeSquared(const struct FVector& InA);
	double VSize2DSquared(const struct FVector2D& InA);
	double VSize2D(const struct FVector2D& InA);
	double VSize(const struct FVector& InA);
	struct FVector VLerp(const struct FVector& InA, const struct FVector& InB, float InAlpha);
	struct FVector VInterpTo_Constant(const struct FVector& InCurrent, const struct FVector& InTarget, float InDeltaTime, float InInterpSpeed);
	struct FVector VInterpTo(const struct FVector& InCurrent, const struct FVector& InTarget, float InDeltaTime, float InInterpSpeed);
	struct FVector VectorSpringInterp(const struct FVector& InCurrent, const struct FVector& InTarget, struct FVectorSpringState& InSpringState, float InStiffness, float InCriticalDampingFactor, float InDeltaTime, float InMass, float InTargetVelocityAmount, bool InbClamp, const struct FVector& InMinValue, const struct FVector& InMaxValue, bool InbInitializeFromTarget);
	struct FVector Vector_Zero();
	struct FVector Vector_Up();
	void Vector_UnwindEuler(struct FVector& InA);
	struct FVector2D Vector_UnitCartesianToSpherical(const struct FVector& InA);
	struct FVector Vector_ToRadians(const struct FVector& InA);
	struct FVector Vector_ToDegrees(const struct FVector& InA);
	struct FVector Vector_SnappedToGrid(const struct FVector& InInVect, float InInGridSize);
	void Vector_Set(struct FVector& InA, double InX, double InY, double InZ);
	struct FVector Vector_Right();
	struct FVector Vector_Reciprocal(struct FVector& InA);
	struct FVector Vector_ProjectOnToNormal(const struct FVector& InV, const struct FVector& InInNormal);
	struct FVector Vector_One();
	struct FVector Vector_NormalUnsafe(struct FVector& InA);
	void Vector_Normalize(struct FVector& InA, float InTolerance);
	struct FVector Vector_Normal2D(const struct FVector& InA, float InTolerance);
	struct FVector Vector_MirrorByPlane(const struct FVector& InA, struct FPlane& InInPlane);
	struct FVector Vector_Left();
	bool Vector_IsZero(struct FVector& InA);
	bool Vector_IsUnit(struct FVector& InA, float InSquaredLenthTolerance);
	bool Vector_IsUniform(struct FVector& InA, float InTolerance);
	bool Vector_IsNormal(struct FVector& InA);
	bool Vector_IsNearlyZero(struct FVector& InA, float InTolerance);
	bool Vector_IsNAN(struct FVector& InA);
	double Vector_HeadingAngle(const struct FVector& InA);
	struct FVector Vector_GetSignVector(const struct FVector& InA);
	struct FVector Vector_GetProjection(const struct FVector& InA);
	double Vector_GetAbsMin(const struct FVector& InA);
	double Vector_GetAbsMax(const struct FVector& InA);
	struct FVector Vector_GetAbs(const struct FVector& InA);
	struct FVector Vector_Forward();
	struct FVector Vector_Down();
	double Vector_DistanceSquared(const struct FVector& InV1, const struct FVector& InV2);
	double Vector_Distance2DSquared(const struct FVector& InV1, const struct FVector& InV2);
	double Vector_Distance2D(const struct FVector& InV1, const struct FVector& InV2);
	double Vector_Distance(const struct FVector& InV1, const struct FVector& InV2);
	double Vector_CosineAngle2D(const struct FVector& InA, const struct FVector& InB);
	struct FVector Vector_ComponentMin(const struct FVector& InA, const struct FVector& InB);
	struct FVector Vector_ComponentMax(const struct FVector& InA, const struct FVector& InB);
	struct FVector Vector_ClampSizeMax2D(const struct FVector& InA, double InMax);
	struct FVector Vector_ClampSizeMax(const struct FVector& InA, double InMax);
	struct FVector Vector_ClampSize2D(const struct FVector& InA, double InMin, double InMax);
	struct FVector Vector_BoundedToCube(const struct FVector& InInVect, float InInRadius);
	struct FVector Vector_BoundedToBox(const struct FVector& InInVect, const struct FVector& InInBoxMin, const struct FVector& InInBoxMax);
	struct FVector Vector_Backward();
	void Vector_Assign(struct FVector& InA, struct FVector& InInVector);
	void Vector_AddBounded(struct FVector& InA, const struct FVector& InInAddVect, float InInRadius);
	struct FVector4 Vector4_Zero();
	double Vector4_SizeSquared3(struct FVector4& InA);
	double Vector4_SizeSquared(struct FVector4& InA);
	double Vector4_Size3(struct FVector4& InA);
	double Vector4_Size(struct FVector4& InA);
	void Vector4_Set(struct FVector4& InA, double InX, double InY, double InZ, double InW);
	struct FVector4 Vector4_NormalUnsafe3(struct FVector4& InA);
	void Vector4_Normalize3(struct FVector4& InA, float InTolerance);
	struct FVector4 Vector4_Normal3(struct FVector4& InA, float InTolerance);
	struct FVector4 Vector4_Negated(struct FVector4& InA);
	struct FVector4 Vector4_MirrorByVector3(struct FVector4& InDirection, struct FVector4& InSurfaceNormal);
	bool Vector4_IsZero(struct FVector4& InA);
	bool Vector4_IsUnit3(struct FVector4& InA, float InSquaredLenthTolerance);
	bool Vector4_IsNormal3(struct FVector4& InA);
	bool Vector4_IsNearlyZero3(struct FVector4& InA, float InTolerance);
	bool Vector4_IsNAN(struct FVector4& InA);
	double Vector4_DotProduct3(struct FVector4& InA, struct FVector4& InB);
	double Vector4_DotProduct(struct FVector4& InA, struct FVector4& InB);
	struct FVector4 Vector4_CrossProduct3(struct FVector4& InA, struct FVector4& InB);
	void Vector4_Assign(struct FVector4& InA, struct FVector4& InInVector);
	struct FVector2D Vector2DInterpTo_Constant(const struct FVector2D& InCurrent, const struct FVector2D& InTarget, float InDeltaTime, float InInterpSpeed);
	struct FVector2D Vector2DInterpTo(const struct FVector2D& InCurrent, const struct FVector2D& InTarget, float InDeltaTime, float InInterpSpeed);
	struct FVector2D Vector2D_Zero();
	struct FVector2D Vector2D_Unit45Deg();
	struct FVector2D Vector2D_One();
	struct FVector VEase(const struct FVector& InA, const struct FVector& InB, float InAlpha, enum class EEasingFunc InEasingFunc, float InBlendExp, int32 InSteps);
	struct FDateTime UtcNow();
	struct FVector4 TransformVector4(struct FMatrix& InMatrix, struct FVector4& InVec4);
	struct FRotator TransformRotation(struct FTransform& InT, const struct FRotator& InRotation);
	struct FVector TransformLocation(struct FTransform& InT, const struct FVector& InLocation);
	struct FVector TransformDirection(struct FTransform& InT, const struct FVector& InDirection);
	float Transform_Determinant(struct FTransform& InTransform);
	struct FVector2D ToSign2D(const struct FVector2D& InA);
	struct FVector2D ToRounded2D(const struct FVector2D& InA);
	void ToDirectionAndLength2D(const struct FVector2D& InA, struct FVector2D* InOutDir, double* InOutLength);
	struct FDateTime Today();
	struct FTransform TLerp(struct FTransform& InA, struct FTransform& InB, float InAlpha, enum class ELerpInterpolationMode InInterpMode);
	struct FTransform TInterpTo(struct FTransform& InCurrent, struct FTransform& InTarget, float InDeltaTime, float InInterpSpeed);
	struct FTimespan TimespanZeroValue();
	float TimespanRatio(const struct FTimespan& InA, const struct FTimespan& InB);
	struct FTimespan TimespanMinValue();
	struct FTimespan TimespanMaxValue();
	bool TimespanFromString(const class FString& InTimespanString, struct FTimespan* InResult);
	struct FTransform TEase(struct FTransform& InA, struct FTransform& InB, float InAlpha, enum class EEasingFunc InEasingFunc, float InBlendExp, int32 InSteps);
	double Tan(double InA);
	struct FVector Subtract_VectorVector(const struct FVector& InA, const struct FVector& InB);
	struct FVector Subtract_VectorInt(const struct FVector& InA, int32 InB);
	struct FVector Subtract_VectorFloat(const struct FVector& InA, double InB);
	struct FVector4 Subtract_Vector4Vector4(struct FVector4& InA, struct FVector4& InB);
	struct FVector2D Subtract_Vector2DVector2D(const struct FVector2D& InA, const struct FVector2D& InB);
	struct FVector2D Subtract_Vector2DFloat(const struct FVector2D& InA, double InB);
	struct FTimespan Subtract_TimespanTimespan(const struct FTimespan& InA, const struct FTimespan& InB);
	struct FQuat Subtract_QuatQuat(struct FQuat& InA, struct FQuat& InB);
	struct FLinearColor Subtract_LinearColorLinearColor(const struct FLinearColor& InA, const struct FLinearColor& InB);
	struct FIntPoint Subtract_IntPointIntPoint(const struct FIntPoint& InA, const struct FIntPoint& InB);
	struct FIntPoint Subtract_IntPointInt(const struct FIntPoint& InA, int32 InB);
	int32 Subtract_IntInt(int32 InA, int32 InB);
	int64 Subtract_Int64Int64(int64 InA, int64 InB);
	double Subtract_DoubleDouble(double InA, double InB);
	struct FDateTime Subtract_DateTimeTimespan(const struct FDateTime& InA, const struct FTimespan& InB);
	struct FTimespan Subtract_DateTimeDateTime(const struct FDateTime& InA, const struct FDateTime& InB);
	uint8 Subtract_ByteByte(uint8 InA, uint8 InB);
	double Square(double InA);
	double Sqrt(double InA);
	struct FVector Spherical2DToUnitCartesian(const struct FVector2D& InA);
	double Sin(double InA);
	int64 SignOfInteger64(int64 InA);
	int32 SignOfInteger(int32 InA);
	double SignOfFloat(double InA);
	void SetVectorSpringStateVelocity(struct FVectorSpringState& InSpringState, const struct FVector& InVelocity);
	void SetRandomStreamSeed(struct FRandomStream& InStream, int32 InNewSeed);
	void SetQuaternionSpringStateAngularVelocity(struct FQuaternionSpringState& InSpringState, const struct FVector& InAngularVelocity);
	void SetFloatSpringStateVelocity(struct FFloatSpringState& InSpringState, float InVelocity);
	void Set2D(struct FVector2D& InA, double InX, double InY);
	struct FVector SelectVector(const struct FVector& InA, const struct FVector& InB, bool InbPickA);
	struct FTransform SelectTransform(struct FTransform& InA, struct FTransform& InB, bool InbPickA);
	class FString SelectString(const class FString& InA, const class FString& InB, bool InbPickA);
	struct FRotator SelectRotator(const struct FRotator& InA, const struct FRotator& InB, bool InbPickA);
	class UObject* SelectObject(class UObject* InA, class UObject* InB, bool InbSelectA);
	int32 SelectInt(int32 InA, int32 InB, bool InbPickA);
	double SelectFloat(double InA, double InB, bool InbPickA);
	struct FLinearColor SelectColor(const struct FLinearColor& InA, const struct FLinearColor& InB, bool InbPickA);
	class UClass* SelectClass(class UClass* InA, class UClass* InB, bool InbSelectA);
	void SeedRandomStream(struct FRandomStream& InStream);
	double SafeDivide(double InA, double InB);
	int64 Round64(double InA);
	int32 Round(double InA);
	struct FRotator RotatorFromAxisAndAngle(const struct FVector& InAxis, float InAngle);
	struct FVector RotateAngleAxis(const struct FVector& InInVect, float InAngleDeg, const struct FVector& InAxis);
	struct FRotator RLerp(const struct FRotator& InA, const struct FRotator& InB, float InAlpha, bool InbShortestPath);
	struct FRotator RInterpTo_Constant(const struct FRotator& InCurrent, const struct FRotator& InTarget, float InDeltaTime, float InInterpSpeed);
	struct FRotator RInterpTo(const struct FRotator& InCurrent, const struct FRotator& InTarget, float InDeltaTime, float InInterpSpeed);
	void RGBToHSV_Vector(const struct FLinearColor& InRGB, struct FLinearColor* InHSV);
	void RGBToHSV(const struct FLinearColor& InInColor, float* InH, float* InS, float* InV, float* InA);
	struct FLinearColor RGBLinearToHSV(const struct FLinearColor& InRGB);
	void ResetVectorSpringState(struct FVectorSpringState& InSpringState);
	void ResetRandomStream(struct FRandomStream& InStream);
	void ResetQuaternionSpringState(struct FQuaternionSpringState& InSpringState);
	void ResetFloatSpringState(struct FFloatSpringState& InSpringState);
	struct FRotator REase(const struct FRotator& InA, const struct FRotator& InB, float InAlpha, bool InbShortestPath, enum class EEasingFunc InEasingFunc, float InBlendExp, int32 InSteps);
	struct FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(struct FVector& InConeDir, float InMaxYawInRadians, float InMaxPitchInRadians, struct FRandomStream& InStream);
	struct FVector RandomUnitVectorInEllipticalConeInRadians(const struct FVector& InConeDir, float InMaxYawInRadians, float InMaxPitchInRadians);
	struct FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(struct FVector& InConeDir, float InMaxYawInDegrees, float InMaxPitchInDegrees, struct FRandomStream& InStream);
	struct FVector RandomUnitVectorInEllipticalConeInDegrees(const struct FVector& InConeDir, float InMaxYawInDegrees, float InMaxPitchInDegrees);
	struct FVector RandomUnitVectorInConeInRadiansFromStream(struct FVector& InConeDir, float InConeHalfAngleInRadians, struct FRandomStream& InStream);
	struct FVector RandomUnitVectorInConeInRadians(const struct FVector& InConeDir, float InConeHalfAngleInRadians);
	struct FVector RandomUnitVectorInConeInDegreesFromStream(struct FVector& InConeDir, float InConeHalfAngleInDegrees, struct FRandomStream& InStream);
	struct FVector RandomUnitVectorInConeInDegrees(const struct FVector& InConeDir, float InConeHalfAngleInDegrees);
	struct FVector RandomUnitVectorFromStream(struct FRandomStream& InStream);
	struct FVector RandomUnitVector();
	struct FRotator RandomRotatorFromStream(bool InbRoll, struct FRandomStream& InStream);
	struct FRotator RandomRotator(bool InbRoll);
	struct FVector RandomPointInBoundingBoxFromStream_Box(const struct FBox& InBox, struct FRandomStream& InStream);
	struct FVector RandomPointInBoundingBoxFromStream(const struct FVector& InCenter, const struct FVector& InHalfSize, struct FRandomStream& InStream);
	struct FVector RandomPointInBoundingBox_Box(const struct FBox& InBox);
	struct FVector RandomPointInBoundingBox(const struct FVector& InCenter, const struct FVector& InHalfSize);
	int32 RandomIntegerInRangeFromStream(int32 InMin, int32 InMax, struct FRandomStream& InStream);
	int32 RandomIntegerInRange(int32 InMin, int32 InMax);
	int32 RandomIntegerFromStream(int32 InMax, struct FRandomStream& InStream);
	int64 RandomInteger64InRange(int64 InMin, int64 InMax);
	int64 RandomInteger64(int64 InMax);
	int32 RandomInteger(int32 InMax);
	float RandomFloatInRangeFromStream(float InMin, float InMax, struct FRandomStream& InStream);
	double RandomFloatInRange(double InMin, double InMax);
	float RandomFloatFromStream(struct FRandomStream& InStream);
	double RandomFloat();
	bool RandomBoolWithWeightFromStream(float InWeight, struct FRandomStream& InRandomStream);
	bool RandomBoolWithWeight(float InWeight);
	bool RandomBoolFromStream(struct FRandomStream& InStream);
	bool RandomBool();
	double RadiansToDegrees(double InA);
	struct FQuat QuaternionSpringInterp(const struct FQuat& InCurrent, const struct FQuat& InTarget, struct FQuaternionSpringState& InSpringState, float InStiffness, float InCriticalDampingFactor, float InDeltaTime, float InMass, float InTargetVelocityAmount, bool InbInitializeFromTarget);
	struct FVector Quat_VectorUp(struct FQuat& InQ);
	struct FVector Quat_VectorRight(struct FQuat& InQ);
	struct FVector Quat_VectorForward(struct FQuat& InQ);
	struct FVector Quat_UnrotateVector(struct FQuat& InQ, struct FVector& InV);
	float Quat_SizeSquared(struct FQuat& InQ);
	float Quat_Size(struct FQuat& InQ);
	void Quat_SetFromEuler(struct FQuat& InQ, struct FVector& InEuler);
	void Quat_SetComponents(struct FQuat& InQ, float InX, float InY, float InZ, float InW);
	struct FRotator Quat_Rotator(struct FQuat& InQ);
	struct FVector Quat_RotateVector(struct FQuat& InQ, struct FVector& InV);
	struct FQuat Quat_Normalized(struct FQuat& InQ, float InTolerance);
	void Quat_Normalize(struct FQuat& InQ, float InTolerance);
	struct FQuat Quat_MakeFromEuler(struct FVector& InEuler);
	struct FQuat Quat_Log(struct FQuat& InQ);
	bool Quat_IsNormalized(struct FQuat& InQ);
	bool Quat_IsNonFinite(struct FQuat& InQ);
	bool Quat_IsIdentity(struct FQuat& InQ, float InTolerance);
	bool Quat_IsFinite(struct FQuat& InQ);
	struct FQuat Quat_Inversed(struct FQuat& InQ);
	struct FQuat Quat_Identity();
	struct FVector Quat_GetRotationAxis(struct FQuat& InQ);
	struct FVector Quat_GetAxisZ(struct FQuat& InQ);
	struct FVector Quat_GetAxisY(struct FQuat& InQ);
	struct FVector Quat_GetAxisX(struct FQuat& InQ);
	float Quat_GetAngle(struct FQuat& InQ);
	struct FQuat Quat_Exp(struct FQuat& InQ);
	struct FVector Quat_Euler(struct FQuat& InQ);
	void Quat_EnforceShortestArcWith(struct FQuat& InA, struct FQuat& InB);
	float Quat_AngularDistance(struct FQuat& InA, struct FQuat& InB);
	struct FVector ProjectVectorOnToVector(const struct FVector& InV, const struct FVector& InTarget);
	struct FVector ProjectVectorOnToPlane(const struct FVector& InV, const struct FVector& InPlaneNormal);
	struct FVector ProjectPointOnToPlane(const struct FVector& InPoint, const struct FVector& InPlaneBase, const struct FVector& InPlaneNormal);
	bool PointsAreCoplanar(TArray<struct FVector>& InPoints, float InTolerance);
	float PerlinNoise1D(float InValue);
	int32 Percent_IntInt(int32 InA, int32 InB);
	int64 Percent_Int64Int64(int64 InA, int64 InB);
	double Percent_FloatFloat(double InA, double InB);
	uint8 Percent_ByteByte(uint8 InA, uint8 InB);
	int32 Or_IntInt(int32 InA, int32 InB);
	int64 Or_Int64Int64(int64 InA, int64 InB);
	struct FDateTime Now();
	bool NotEqualExactly_VectorVector(const struct FVector& InA, const struct FVector& InB);
	bool NotEqualExactly_Vector4Vector4(struct FVector4& InA, struct FVector4& InB);
	bool NotEqualExactly_Vector2DVector2D(const struct FVector2D& InA, const struct FVector2D& InB);
	bool NotEqual_VectorVector(const struct FVector& InA, const struct FVector& InB, float InErrorTolerance);
	bool NotEqual_Vector4Vector4(struct FVector4& InA, struct FVector4& InB, float InErrorTolerance);
	bool NotEqual_Vector2DVector2D(const struct FVector2D& InA, const struct FVector2D& InB, float InErrorTolerance);
	bool NotEqual_TimespanTimespan(const struct FTimespan& InA, const struct FTimespan& InB);
	bool NotEqual_RotatorRotator(const struct FRotator& InA, const struct FRotator& InB, float InErrorTolerance);
	bool NotEqual_QuatQuat(struct FQuat& InA, struct FQuat& InB, float InErrorTolerance);
	bool NotEqual_ObjectObject(class UObject* InA, class UObject* InB);
	bool NotEqual_NameName(class FName InA, class FName InB);
	bool NotEqual_MatrixMatrix(struct FMatrix& InA, struct FMatrix& InB, float InTolerance);
	bool NotEqual_LinearColorLinearColor(const struct FLinearColor& InA, const struct FLinearColor& InB);
	bool NotEqual_IntPointIntPoint(const struct FIntPoint& InA, const struct FIntPoint& InB);
	bool NotEqual_IntInt(int32 InA, int32 InB);
	bool NotEqual_Int64Int64(int64 InA, int64 InB);
	bool NotEqual_DoubleDouble(double InA, double InB);
	bool NotEqual_DateTimeDateTime(const struct FDateTime& InA, const struct FDateTime& InB);
	bool NotEqual_ClassClass(class UClass* InA, class UClass* InB);
	bool NotEqual_ByteByte(uint8 InA, uint8 InB);
	bool NotEqual_BoolBool(bool InA, bool InB);
	bool Not_PreBool(bool InA);
	int64 Not_Int64(int64 InA);
	int32 Not_Int(int32 InA);
	struct FVector2D NormalSafe2D(const struct FVector2D& InA, float InTolerance);
	double NormalizeToRange(double InValue, double InRangeMin, double InRangeMax);
	struct FRotator NormalizedDeltaRotator(const struct FRotator& InA, const struct FRotator& InB);
	float NormalizeAxis(float InAngle);
	void Normalize2D(struct FVector2D& InA, float InTolerance);
	struct FVector2D Normal2D(const struct FVector2D& InA);
	struct FVector Normal(const struct FVector& InA, float InTolerance);
	struct FVector NegateVector(const struct FVector& InA);
	struct FRotator NegateRotator(const struct FRotator& InA);
	struct FVector2D Negated2D(struct FVector2D& InA);
	bool NearlyEqual_TransformTransform(struct FTransform& InA, struct FTransform& InB, float InLocationTolerance, float InRotationTolerance, float InScale3DTolerance);
	bool NearlyEqual_FloatFloat(double InA, double InB, double InErrorTolerance);
	double MultiplyMultiply_FloatFloat(double InBase, double InExp);
	double MultiplyByPi(double InValue);
	struct FVector Multiply_VectorVector(const struct FVector& InA, const struct FVector& InB);
	struct FVector Multiply_VectorInt(const struct FVector& InA, int32 InB);
	struct FVector Multiply_VectorFloat(const struct FVector& InA, double InB);
	struct FVector4 Multiply_Vector4Vector4(struct FVector4& InA, struct FVector4& InB);
	struct FVector2D Multiply_Vector2DVector2D(const struct FVector2D& InA, const struct FVector2D& InB);
	struct FVector2D Multiply_Vector2DFloat(const struct FVector2D& InA, double InB);
	struct FTimespan Multiply_TimespanFloat(const struct FTimespan& InA, float InScalar);
	struct FRotator Multiply_RotatorInt(const struct FRotator& InA, int32 InB);
	struct FRotator Multiply_RotatorFloat(const struct FRotator& InA, float InB);
	struct FQuat Multiply_QuatQuat(struct FQuat& InA, struct FQuat& InB);
	struct FMatrix Multiply_MatrixMatrix(struct FMatrix& InA, struct FMatrix& InB);
	struct FMatrix Multiply_MatrixFloat(struct FMatrix& InA, double InB);
	struct FLinearColor Multiply_LinearColorLinearColor(const struct FLinearColor& InA, const struct FLinearColor& InB);
	struct FLinearColor Multiply_LinearColorFloat(const struct FLinearColor& InA, float InB);
	struct FIntPoint Multiply_IntPointIntPoint(const struct FIntPoint& InA, const struct FIntPoint& InB);
	struct FIntPoint Multiply_IntPointInt(const struct FIntPoint& InA, int32 InB);
	int32 Multiply_IntInt(int32 InA, int32 InB);
	double Multiply_IntFloat(int32 InA, double InB);
	int64 Multiply_Int64Int64(int64 InA, int64 InB);
	double Multiply_DoubleDouble(double InA, double InB);
	uint8 Multiply_ByteByte(uint8 InA, uint8 InB);
	struct FVector MirrorVectorByNormal(const struct FVector& InInVect, const struct FVector& InInNormal);
	void MinOfIntArray(TArray<int32>& InIntArray, int32* InIndexOfMinValue, int32* InMinValue);
	void MinOfFloatArray(TArray<float>& InFloatArray, int32* InIndexOfMinValue, float* InMinValue);
	void MinOfByteArray(TArray<uint8>& InByteArray, int32* InIndexOfMinValue, uint8* InMinValue);
	int64 MinInt64(int64 InA, int64 InB);
	void MinimumAreaRectangle(class UObject* InWorldContextObject, TArray<struct FVector>& InInVerts, struct FVector& InSampleSurfaceNormal, struct FVector* InOutRectCenter, struct FRotator* InOutRectRotation, float* InOutSideLengthX, float* InOutSideLengthY, bool InbDebugDraw);
	void MinAreaRectangle(class UObject* InWorldContextObject, TArray<struct FVector>& InInPoints, struct FVector& InSampleSurfaceNormal, struct FVector* InOutRectCenter, struct FRotator* InOutRectRotation, float* InOutRectLengthX, float* InOutRectLengthY, bool InbDebugDraw);
	int32 Min(int32 InA, int32 InB);
	void MedianOfIntArray(const TArray<int32>& InIntArray, float* InMedianValue);
	void MaxOfIntArray(TArray<int32>& InIntArray, int32* InIndexOfMaxValue, int32* InMaxValue);
	void MaxOfFloatArray(TArray<float>& InFloatArray, int32* InIndexOfMaxValue, float* InMaxValue);
	void MaxOfByteArray(TArray<uint8>& InByteArray, int32* InIndexOfMaxValue, uint8* InMaxValue);
	int64 MaxInt64(int64 InA, int64 InB);
	int32 Max(int32 InA, int32 InB);
	struct FVector4 Matrix_TransformVector4(struct FMatrix& InM, const struct FVector4& InV);
	struct FVector4 Matrix_TransformVector(struct FMatrix& InM, const struct FVector& InV);
	struct FVector4 Matrix_TransformPosition(struct FMatrix& InM, const struct FVector& InV);
	struct FQuat Matrix_ToQuat(struct FMatrix& InM);
	void Matrix_SetOrigin(struct FMatrix& InM, const struct FVector& InNewOrigin);
	void Matrix_SetColumn(struct FMatrix& InM, enum class EMatrixColumns InColumn, const struct FVector& InValue);
	void Matrix_SetAxis(struct FMatrix& InM, enum class EAxis InAxis, const struct FVector& InAxisVector);
	struct FMatrix Matrix_ScaleTranslation(struct FMatrix& InM, const struct FVector& InScale3D);
	struct FMatrix Matrix_RemoveTranslation(struct FMatrix& InM);
	void Matrix_RemoveScaling(struct FMatrix& InM, float InTolerance);
	struct FMatrix Matrix_Mirror(struct FMatrix& InM, enum class EAxis InMirrorAxis, enum class EAxis InFlipAxis);
	struct FVector Matrix_InverseTransformVector(struct FMatrix& InM, const struct FVector& InV);
	struct FVector Matrix_InverseTransformPosition(struct FMatrix& InM, const struct FVector& InV);
	struct FMatrix Matrix_Identity();
	struct FVector Matrix_GetUnitAxis(struct FMatrix& InM, enum class EAxis InAxis);
	void Matrix_GetUnitAxes(struct FMatrix& InM, struct FVector* InX, struct FVector* InY, struct FVector* InZ);
	struct FMatrix Matrix_GetTransposed(struct FMatrix& InM);
	struct FMatrix Matrix_GetTransposeAdjoint(struct FMatrix& InM);
	struct FVector Matrix_GetScaleVector(struct FMatrix& InM, float InTolerance);
	struct FVector Matrix_GetScaledAxis(struct FMatrix& InM, enum class EAxis InAxis);
	void Matrix_GetScaledAxes(struct FMatrix& InM, struct FVector* InX, struct FVector* InY, struct FVector* InZ);
	float Matrix_GetRotDeterminant(struct FMatrix& InM);
	struct FRotator Matrix_GetRotator(struct FMatrix& InM);
	struct FVector Matrix_GetOrigin(struct FMatrix& InInMatrix);
	float Matrix_GetMaximumAxisScale(struct FMatrix& InM);
	struct FMatrix Matrix_GetMatrixWithoutScale(struct FMatrix& InM, float InTolerance);
	struct FMatrix Matrix_GetInverse(struct FMatrix& InM);
	bool Matrix_GetFrustumTopPlane(struct FMatrix& InM, struct FPlane* InOutPlane);
	bool Matrix_GetFrustumRightPlane(struct FMatrix& InM, struct FPlane* InOutPlane);
	bool Matrix_GetFrustumNearPlane(struct FMatrix& InM, struct FPlane* InOutPlane);
	bool Matrix_GetFrustumLeftPlane(struct FMatrix& InM, struct FPlane* InOutPlane);
	bool Matrix_GetFrustumFarPlane(struct FMatrix& InM, struct FPlane* InOutPlane);
	bool Matrix_GetFrustumBottomPlane(struct FMatrix& InM, struct FPlane* InOutPlane);
	float Matrix_GetDeterminant(struct FMatrix& InM);
	struct FVector Matrix_GetColumn(struct FMatrix& InM, enum class EMatrixColumns InColumn);
	bool Matrix_ContainsNaN(struct FMatrix& InM);
	struct FMatrix Matrix_ConcatenateTranslation(struct FMatrix& InM, const struct FVector& InTranslation);
	struct FMatrix Matrix_ApplyScale(struct FMatrix& InM, float InScale);
	double MapRangeUnclamped(double InValue, double InInRangeA, double InInRangeB, double InOutRangeA, double InOutRangeB);
	double MapRangeClamped(double InValue, double InInRangeA, double InInRangeB, double InOutRangeA, double InOutRangeB);
	struct FVector_NetQuantizeNormal MakeVector_NetQuantizeNormal(double InX, double InY, double InZ);
	struct FVector_NetQuantize100 MakeVector_NetQuantize100(double InX, double InY, double InZ);
	struct FVector_NetQuantize10 MakeVector_NetQuantize10(double InX, double InY, double InZ);
	struct FVector_NetQuantize MakeVector_NetQuantize(double InX, double InY, double InZ);
	struct FVector4 MakeVector4(double InX, double InY, double InZ, double InW);
	struct FVector2D MakeVector2D(double InX, double InY);
	struct FVector MakeVector(double InX, double InY, double InZ);
	struct FTransform MakeTransform(const struct FVector& InLocation, const struct FRotator& InRotation, const struct FVector& InScale);
	struct FTimespan MakeTimespan2(int32 InDays, int32 InHours, int32 InMinutes, int32 InSeconds, int32 InFractionNano);
	struct FTimespan MakeTimespan(int32 InDays, int32 InHours, int32 InMinutes, int32 InSeconds, int32 InMilliseconds);
	struct FRotator MakeRotFromZY(struct FVector& InZ, struct FVector& InY);
	struct FRotator MakeRotFromZX(struct FVector& InZ, struct FVector& InX);
	struct FRotator MakeRotFromZ(struct FVector& InZ);
	struct FRotator MakeRotFromYZ(struct FVector& InY, struct FVector& InZ);
	struct FRotator MakeRotFromYX(struct FVector& InY, struct FVector& InX);
	struct FRotator MakeRotFromY(struct FVector& InY);
	struct FRotator MakeRotFromXZ(struct FVector& InX, struct FVector& InZ);
	struct FRotator MakeRotFromXY(struct FVector& InX, struct FVector& InY);
	struct FRotator MakeRotFromX(struct FVector& InX);
	struct FRotator MakeRotator(float InRoll, float InPitch, float InYaw);
	struct FRotator MakeRotationFromAxes(const struct FVector& InForward, const struct FVector& InRight, const struct FVector& InUp);
	struct FTransform MakeRelativeTransform(struct FTransform& InA, struct FTransform& InRelativeTo);
	struct FRandomStream MakeRandomStream(int32 InInitialSeed);
	struct FQuat MakeQuat(float InX, float InY, float InZ, float InW);
	struct FQualifiedFrameTime MakeQualifiedFrameTime(const struct FFrameNumber& InFrame, const struct FFrameRate& InFrameRate, float InSubFrame);
	float MakePulsatingValue(float InInCurrentTime, float InInPulsesPerSecond, float InInPhase);
	struct FPlane MakePlaneFromPointAndNormal(const struct FVector& InPoint, const struct FVector& InNormal);
	struct FFrameRate MakeFrameRate(int32 InNumerator, int32 InDenominator);
	struct FDateTime MakeDateTime(int32 InYear, int32 InMonth, int32 InDay, int32 InHour, int32 InMinute, int32 InSecond, int32 InMillisecond);
	struct FLinearColor MakeColor(float InR, float InG, float InB, float InA);
	struct FBoxSphereBounds MakeBoxSphereBounds(const struct FVector& InOrigin, const struct FVector& InBoxExtent, float InSphereRadius);
	struct FBox2D MakeBox2D(const struct FVector2D& InMin, const struct FVector2D& InMax);
	struct FBox MakeBox(const struct FVector& InMin, const struct FVector& InMax);
	double Loge(double InA);
	double Log(double InA, double InBase);
	bool LinePlaneIntersection_OriginNormal(struct FVector& InLineStart, struct FVector& InLineEnd, const struct FVector& InPlaneOrigin, const struct FVector& InPlaneNormal, float* InT, struct FVector* InIntersection);
	bool LinePlaneIntersection(struct FVector& InLineStart, struct FVector& InLineEnd, struct FPlane& InAPlane, float* InT, struct FVector* InIntersection);
	struct FLinearColor LinearColorLerpUsingHSV(const struct FLinearColor& InA, const struct FLinearColor& InB, float InAlpha);
	struct FLinearColor LinearColorLerp(const struct FLinearColor& InA, const struct FLinearColor& InB, float InAlpha);
	struct FLinearColor LinearColor_Yellow();
	struct FLinearColor LinearColor_White();
	struct FLinearColor LinearColor_Transparent();
	struct FColor LinearColor_ToRGBE(const struct FLinearColor& InInLinearColor);
	struct FLinearColor LinearColor_ToNewOpacity(const struct FLinearColor& InInColor, float InInOpacity);
	void LinearColor_SetTemperature(struct FLinearColor& InInOutColor, float InInTemperature);
	void LinearColor_SetRGBA(struct FLinearColor& InInOutColor, float InR, float InG, float InB, float InA);
	void LinearColor_SetRandomHue(struct FLinearColor& InInOutColor);
	void LinearColor_SetFromSRGB(struct FLinearColor& InInOutColor, struct FColor& InInSRGB);
	void LinearColor_SetFromPow22(struct FLinearColor& InInOutColor, struct FColor& InInColor);
	void LinearColor_SetFromHSV(struct FLinearColor& InInOutColor, float InH, float InS, float InV, float InA);
	void LinearColor_Set(struct FLinearColor& InInOutColor, const struct FLinearColor& InInColor);
	struct FLinearColor LinearColor_Red();
	struct FColor LinearColor_QuantizeRound(const struct FLinearColor& InInColor);
	struct FColor LinearColor_Quantize(const struct FLinearColor& InInColor);
	bool LinearColor_IsNearEqual(const struct FLinearColor& InA, const struct FLinearColor& InB, float InTolerance);
	struct FLinearColor LinearColor_Green();
	struct FLinearColor LinearColor_Gray();
	float LinearColor_GetMin(const struct FLinearColor& InInColor);
	float LinearColor_GetMax(const struct FLinearColor& InInColor);
	float LinearColor_GetLuminance(const struct FLinearColor& InInColor);
	float LinearColor_Distance(const struct FLinearColor& InC1, const struct FLinearColor& InC2);
	struct FLinearColor LinearColor_Desaturated(const struct FLinearColor& InInColor, float InInDesaturation);
	struct FLinearColor LinearColor_Blue();
	struct FLinearColor LinearColor_Black();
	struct FVector LessLess_VectorRotator(const struct FVector& InA, const struct FRotator& InB);
	bool LessEqual_TimespanTimespan(const struct FTimespan& InA, const struct FTimespan& InB);
	bool LessEqual_IntInt(int32 InA, int32 InB);
	bool LessEqual_Int64Int64(int64 InA, int64 InB);
	bool LessEqual_DoubleDouble(double InA, double InB);
	bool LessEqual_DateTimeDateTime(const struct FDateTime& InA, const struct FDateTime& InB);
	bool LessEqual_ByteByte(uint8 InA, uint8 InB);
	bool Less_TimespanTimespan(const struct FTimespan& InA, const struct FTimespan& InB);
	bool Less_IntInt(int32 InA, int32 InB);
	bool Less_Int64Int64(int64 InA, int64 InB);
	bool Less_DoubleDouble(double InA, double InB);
	bool Less_DateTimeDateTime(const struct FDateTime& InA, const struct FDateTime& InB);
	bool Less_ByteByte(uint8 InA, uint8 InB);
	double Lerp(double InA, double InB, double InAlpha);
	bool IsZero2D(struct FVector2D& InA);
	bool IsPointInBoxWithTransform_Box(const struct FVector& InPoint, struct FTransform& InBoxWorldTransform, const struct FBox& InBoxExtent);
	bool IsPointInBoxWithTransform(const struct FVector& InPoint, struct FTransform& InBoxWorldTransform, const struct FVector& InBoxExtent);
	bool IsPointInBox_Box(const struct FVector& InPoint, const struct FBox& InBox);
	bool IsPointInBox(const struct FVector& InPoint, const struct FVector& InBoxOrigin, const struct FVector& InBoxExtent);
	bool IsNearlyZero2D(struct FVector2D& InA, float InTolerance);
	bool IsMorning(const struct FDateTime& InA);
	bool IsLeapYear(int32 InYear);
	bool IsAfternoon(const struct FDateTime& InA);
	struct FTransform InvertTransform(struct FTransform& InT);
	struct FRotator InverseTransformRotation(struct FTransform& InT, const struct FRotator& InRotation);
	struct FVector InverseTransformLocation(struct FTransform& InT, const struct FVector& InLocation);
	struct FVector InverseTransformDirection(struct FTransform& InT, const struct FVector& InDirection);
	struct FIntPoint IntPoint_Zero();
	struct FIntPoint IntPoint_Up();
	struct FIntPoint IntPoint_Right();
	struct FIntPoint IntPoint_One();
	struct FIntPoint IntPoint_Left();
	struct FIntPoint IntPoint_Down();
	bool InRange_IntInt(int32 InValue, int32 InMin, int32 InMax, bool InInclusiveMin, bool InInclusiveMax);
	bool InRange_Int64Int64(int64 InValue, int64 InMin, int64 InMax, bool InInclusiveMin, bool InInclusiveMax);
	bool InRange_FloatFloat(double InValue, double InMin, double InMax, bool InInclusiveMin, bool InInclusiveMax);
	double Hypotenuse(double InWidth, double InHeight);
	struct FLinearColor HSVToRGBLinear(const struct FLinearColor& InHSV);
	void HSVToRGB_Vector(const struct FLinearColor& InHSV, struct FLinearColor* InRGB);
	struct FLinearColor HSVToRGB(float InH, float InS, float InV, float InA);
	double GridSnap_Float(double InLocation, double InGridSize);
	struct FVector GreaterGreater_VectorRotator(const struct FVector& InA, const struct FRotator& InB);
	bool GreaterEqual_TimespanTimespan(const struct FTimespan& InA, const struct FTimespan& InB);
	bool GreaterEqual_IntInt(int32 InA, int32 InB);
	bool GreaterEqual_Int64Int64(int64 InA, int64 InB);
	bool GreaterEqual_DoubleDouble(double InA, double InB);
	bool GreaterEqual_DateTimeDateTime(const struct FDateTime& InA, const struct FDateTime& InB);
	bool GreaterEqual_ByteByte(uint8 InA, uint8 InB);
	bool Greater_TimespanTimespan(const struct FTimespan& InA, const struct FTimespan& InB);
	bool Greater_IntInt(int32 InA, int32 InB);
	bool Greater_Int64Int64(int64 InA, int64 InB);
	bool Greater_DoubleDouble(double InA, double InB);
	bool Greater_DateTimeDateTime(const struct FDateTime& InA, const struct FDateTime& InB);
	bool Greater_ByteByte(uint8 InA, uint8 InB);
	int32 GetYear(const struct FDateTime& InA);
	void GetYawPitchFromVector(const struct FVector& InInVec, float* InYaw, float* InPitch);
	struct FVector GetVectorArrayAverage(TArray<struct FVector>& InVectors);
	struct FVector GetUpVector(const struct FRotator& InInRot);
	float GetTotalSeconds(const struct FTimespan& InA);
	float GetTotalMinutes(const struct FTimespan& InA);
	float GetTotalMilliseconds(const struct FTimespan& InA);
	float GetTotalHours(const struct FTimespan& InA);
	float GetTotalDays(const struct FTimespan& InA);
	struct FTimespan GetTimeOfDay(const struct FDateTime& InA);
	double GetTAU();
	void GetSlopeDegreeAngles(struct FVector& InMyRightYAxis, struct FVector& InFloorNormal, struct FVector& InUpVector, float* InOutSlopePitchDegreeAngle, float* InOutSlopeRollDegreeAngle);
	int32 GetSeconds(const struct FTimespan& InA);
	int32 GetSecond(const struct FDateTime& InA);
	struct FVector2D GetRotated2D(const struct FVector2D& InA, float InAngleDeg);
	struct FVector GetRightVector(const struct FRotator& InInRot);
	struct FVector GetReflectionVector(const struct FVector& InDirection, const struct FVector& InSurfaceNormal);
	float GetPointDistanceToSegment(const struct FVector& InPoint, const struct FVector& InSegmentStart, const struct FVector& InSegmentEnd);
	float GetPointDistanceToLine(const struct FVector& InPoint, const struct FVector& InLineOrigin, const struct FVector& InLineDirection);
	double GetPI();
	int32 GetMonth(const struct FDateTime& InA);
	int32 GetMinutes(const struct FTimespan& InA);
	int32 GetMinute(const struct FDateTime& InA);
	double GetMinElement(const struct FVector& InA);
	double GetMin2D(const struct FVector2D& InA);
	int32 GetMilliseconds(const struct FTimespan& InA);
	int32 GetMillisecond(const struct FDateTime& InA);
	double GetMaxElement(const struct FVector& InA);
	double GetMax2D(const struct FVector2D& InA);
	int32 GetHours(const struct FTimespan& InA);
	int32 GetHour12(const struct FDateTime& InA);
	int32 GetHour(const struct FDateTime& InA);
	struct FVector GetForwardVector(const struct FRotator& InInRot);
	struct FTimespan GetDuration(const struct FTimespan& InA);
	struct FVector GetDirectionUnitVector(const struct FVector& InFrom, const struct FVector& InTo);
	int32 GetDays(const struct FTimespan& InA);
	int32 GetDayOfYear(const struct FDateTime& InA);
	int32 GetDay(const struct FDateTime& InA);
	struct FDateTime GetDate(const struct FDateTime& InA);
	void GetAzimuthAndElevation(const struct FVector& InInDirection, struct FTransform& InReferenceFrame, float* InAzimuth, float* InElevation);
	void GetAxes(const struct FRotator& InA, struct FVector* InX, struct FVector* InY, struct FVector* InZ);
	double GetAbsMax2D(const struct FVector2D& InA);
	struct FVector2D GetAbs2D(const struct FVector2D& InA);
	double FWrap(double InValue, double InMin, double InMax);
	struct FIntVector FTruncVector(struct FVector& InInVector);
	int64 FTrunc64(double InA);
	int32 FTrunc(double InA);
	struct FTimespan FromSeconds(float InSeconds);
	struct FTimespan FromMinutes(float InMinutes);
	struct FTimespan FromMilliseconds(float InMilliseconds);
	struct FTimespan FromHours(float InHours);
	struct FTimespan FromDays(float InDays);
	double Fraction(double InA);
	int64 FMod64(double InDividend, double InDivisor, double* InRemainder);
	int32 FMod(double InDividend, double InDivisor, double* InRemainder);
	double FMin(double InA, double InB);
	double FMax(double InA, double InB);
	float FloatSpringInterp(float InCurrent, float InTarget, struct FFloatSpringState& InSpringState, float InStiffness, float InCriticalDampingFactor, float InDeltaTime, float InMass, float InTargetVelocityAmount, bool InbClamp, float InMinValue, float InMaxValue, bool InbInitializeFromTarget);
	float FixedTurn(float InInCurrent, float InInDesired, float InInDeltaRate);
	double FInterpTo_Constant(double InCurrent, double InTarget, double InDeltaTime, double InInterpSpeed);
	double FInterpTo(double InCurrent, double InTarget, double InDeltaTime, double InInterpSpeed);
	double FInterpEaseInOut(double InA, double InB, double InAlpha, double InExponent);
	struct FRotator FindRelativeLookAtRotation(struct FTransform& InStartTransform, struct FVector& InTargetLocation);
	void FindNearestPointsOnLineSegments(const struct FVector& InSegment1Start, const struct FVector& InSegment1End, const struct FVector& InSegment2Start, const struct FVector& InSegment2End, struct FVector* InSegment1Point, struct FVector* InSegment2Point);
	struct FRotator FindLookAtRotation(struct FVector& InStart, struct FVector& InTarget);
	struct FVector FindClosestPointOnSegment(const struct FVector& InPoint, const struct FVector& InSegmentStart, const struct FVector& InSegmentEnd);
	struct FVector FindClosestPointOnLine(const struct FVector& InPoint, const struct FVector& InLineOrigin, const struct FVector& InLineDirection);
	int64 FFloor64(double InA);
	int32 FFloor(double InA);
	double FClamp(double InValue, double InMin, double InMax);
	int64 FCeil64(double InA);
	int32 FCeil(double InA);
	double Exp(double InA);
	bool EqualExactly_VectorVector(const struct FVector& InA, const struct FVector& InB);
	bool EqualExactly_Vector4Vector4(struct FVector4& InA, struct FVector4& InB);
	bool EqualExactly_Vector2DVector2D(const struct FVector2D& InA, const struct FVector2D& InB);
	bool EqualEqual_VectorVector(const struct FVector& InA, const struct FVector& InB, float InErrorTolerance);
	bool EqualEqual_Vector4Vector4(struct FVector4& InA, struct FVector4& InB, float InErrorTolerance);
	bool EqualEqual_Vector2DVector2D(const struct FVector2D& InA, const struct FVector2D& InB, float InErrorTolerance);
	bool EqualEqual_TransformTransform(struct FTransform& InA, struct FTransform& InB);
	bool EqualEqual_TimespanTimespan(const struct FTimespan& InA, const struct FTimespan& InB);
	bool EqualEqual_RotatorRotator(const struct FRotator& InA, const struct FRotator& InB, float InErrorTolerance);
	bool EqualEqual_QuatQuat(struct FQuat& InA, struct FQuat& InB, float InTolerance);
	bool EqualEqual_ObjectObject(class UObject* InA, class UObject* InB);
	bool EqualEqual_NameName(class FName InA, class FName InB);
	bool EqualEqual_MatrixMatrix(struct FMatrix& InA, struct FMatrix& InB, float InTolerance);
	bool EqualEqual_LinearColorLinearColor(const struct FLinearColor& InA, const struct FLinearColor& InB);
	bool EqualEqual_IntInt(int32 InA, int32 InB);
	bool EqualEqual_Int64Int64(int64 InA, int64 InB);
	bool EqualEqual_DoubleDouble(double InA, double InB);
	bool EqualEqual_DateTimeDateTime(const struct FDateTime& InA, const struct FDateTime& InB);
	bool EqualEqual_ClassClass(class UClass* InA, class UClass* InB);
	bool EqualEqual_ByteByte(uint8 InA, uint8 InB);
	bool EqualEqual_BoolBool(bool InA, bool InB);
	bool Equal_IntPointIntPoint(const struct FIntPoint& InA, const struct FIntPoint& InB);
	double Ease(double InA, double InB, double InAlpha, enum class EEasingFunc InEasingFunc, double InBlendExp, int32 InSteps);
	struct FVector DynamicWeightedMovingAverage_FVector(const struct FVector& InCurrentSample, const struct FVector& InPreviousSample, float InMaxDistance, float InMinWeight, float InMaxWeight);
	struct FRotator DynamicWeightedMovingAverage_FRotator(const struct FRotator& InCurrentSample, const struct FRotator& InPreviousSample, float InMaxDistance, float InMinWeight, float InMaxWeight);
	float DynamicWeightedMovingAverage_Float(float InCurrentSample, float InPreviousSample, float InMaxDistance, float InMinWeight, float InMaxWeight);
	double DotProduct2D(const struct FVector2D& InA, const struct FVector2D& InB);
	double Dot_VectorVector(const struct FVector& InA, const struct FVector& InB);
	struct FVector Divide_VectorVector(const struct FVector& InA, const struct FVector& InB);
	struct FVector Divide_VectorInt(const struct FVector& InA, int32 InB);
	struct FVector Divide_VectorFloat(const struct FVector& InA, double InB);
	struct FVector4 Divide_Vector4Vector4(struct FVector4& InA, struct FVector4& InB);
	struct FVector2D Divide_Vector2DVector2D(const struct FVector2D& InA, const struct FVector2D& InB);
	struct FVector2D Divide_Vector2DFloat(const struct FVector2D& InA, double InB);
	struct FTimespan Divide_TimespanFloat(const struct FTimespan& InA, float InScalar);
	struct FLinearColor Divide_LinearColorLinearColor(const struct FLinearColor& InA, const struct FLinearColor& InB);
	struct FIntPoint Divide_IntPointIntPoint(const struct FIntPoint& InA, const struct FIntPoint& InB);
	struct FIntPoint Divide_IntPointInt(const struct FIntPoint& InA, int32 InB);
	int32 Divide_IntInt(int32 InA, int32 InB);
	int64 Divide_Int64Int64(int64 InA, int64 InB);
	double Divide_DoubleDouble(double InA, double InB);
	uint8 Divide_ByteByte(uint8 InA, uint8 InB);
	double DistanceSquared2D(const struct FVector2D& InV1, const struct FVector2D& InV2);
	double Distance2D(const struct FVector2D& InV1, const struct FVector2D& InV2);
	double DegTan(double InA);
	double DegSin(double InA);
	double DegreesToRadians(double InA);
	double DegCos(double InA);
	double DegAtan2(double InY, double InX);
	double DegAtan(double InA);
	double DegAsin(double InA);
	double DegAcos(double InA);
	int32 DaysInYear(int32 InYear);
	int32 DaysInMonth(int32 InYear, int32 InMonth);
	struct FDateTime DateTimeMinValue();
	struct FDateTime DateTimeMaxValue();
	bool DateTimeFromString(const class FString& InDateTimeString, struct FDateTime* InResult);
	bool DateTimeFromIsoString(const class FString& InIsoString, struct FDateTime* InResult);
	double CrossProduct2D(const struct FVector2D& InA, const struct FVector2D& InB);
	struct FVector Cross_VectorVector(const struct FVector& InA, const struct FVector& InB);
	struct FVector CreateVectorFromYawPitch(float InYaw, float InPitch, float InLength);
	double Cos(double InA);
	struct FTransform ConvertTransformToRelative(struct FTransform& InTransform, struct FTransform& InParentTransform);
	struct FVector2D Conv_VectorToVector2D(const struct FVector& InInVector);
	struct FTransform Conv_VectorToTransform(const struct FVector& InInLocation);
	struct FRotator Conv_VectorToRotator(const struct FVector& InInVec);
	struct FQuat Conv_VectorToQuaternion(const struct FVector& InInVec);
	struct FLinearColor Conv_VectorToLinearColor(const struct FVector& InInVec);
	struct FVector Conv_Vector4ToVector(struct FVector4& InInVector4);
	struct FRotator Conv_Vector4ToRotator(struct FVector4& InInVec);
	struct FQuat Conv_Vector4ToQuaternion(struct FVector4& InInVec);
	struct FVector Conv_Vector2DToVector(const struct FVector2D& InInVector2D, float InZ);
	struct FIntPoint Conv_Vector2DToIntPoint(const struct FVector2D& InInVector2D);
	struct FMatrix Conv_TransformToMatrix(struct FTransform& InTransform);
	struct FVector Conv_RotatorToVector(const struct FRotator& InInRot);
	struct FTransform Conv_RotatorToTransform(struct FRotator& InInRotator);
	struct FQuat Conv_RotatorToQuaternion(const struct FRotator& InInRot);
	struct FTransform Conv_MatrixToTransform(struct FMatrix& InInMatrix);
	struct FRotator Conv_MatrixToRotator(struct FMatrix& InInMatrix);
	struct FVector Conv_LinearColorToVector(const struct FLinearColor& InInLinearColor);
	struct FColor Conv_LinearColorToColor(const struct FLinearColor& InInLinearColor, bool InInUseSRGB);
	struct FVector Conv_IntVectorToVector(struct FIntVector& InInIntVector);
	struct FVector Conv_IntToVector(int32 InInInt);
	struct FIntVector Conv_IntToIntVector(int32 InInInt);
	int64 Conv_IntToInt64(int32 InInInt);
	float Conv_IntToFloat(int32 InInInt);
	double Conv_IntToDouble(int32 InInInt);
	uint8 Conv_IntToByte(int32 InInInt);
	bool Conv_IntToBool(int32 InInInt);
	struct FVector2D Conv_IntPointToVector2D(const struct FIntPoint& InInIntPoint);
	int32 Conv_Int64ToInt(int64 InInInt);
	double Conv_Int64ToDouble(int64 InInInt);
	uint8 Conv_Int64ToByte(int64 InInInt);
	struct FVector Conv_FloatToVector(float InInFloat);
	struct FLinearColor Conv_FloatToLinearColor(float InInFloat);
	double Conv_FloatToDouble(float InInFloat);
	struct FVector Conv_DoubleToVector(double InInDouble);
	struct FLinearColor Conv_DoubleToLinearColor(double InInDouble);
	int64 Conv_DoubleToInt64(double InInDouble);
	float Conv_DoubleToFloat(double InInDouble);
	struct FLinearColor Conv_ColorToLinearColor(const struct FColor& InInColor);
	int64 Conv_ByteToInt64(uint8 InInByte);
	int32 Conv_ByteToInt(uint8 InInByte);
	float Conv_ByteToFloat(uint8 InInByte);
	double Conv_ByteToDouble(uint8 InInByte);
	int32 Conv_BoolToInt(bool InInBool);
	float Conv_BoolToFloat(bool InInBool);
	uint8 Conv_BoolToByte(bool InInBool);
	struct FTransform ComposeTransforms(struct FTransform& InA, struct FTransform& InB);
	struct FRotator ComposeRotators(const struct FRotator& InA, const struct FRotator& InB);
	bool ClassIsChildOf(TSubclassOf<class UObject> InTestClass, TSubclassOf<class UObject> InParentClass);
	struct FVector ClampVectorSize(const struct FVector& InA, double InMin, double InMax);
	int64 ClampInt64(int64 InValue, int64 InMin, int64 InMax);
	float ClampAxis(float InAngle);
	struct FVector2D ClampAxes2D(const struct FVector2D& InA, double InMinAxisVal, double InMaxAxisVal);
	double ClampAngle(double InAngleDegrees, double InMinAngleDegrees, double InMaxAngleDegrees);
	int32 Clamp(int32 InValue, int32 InMin, int32 InMax);
	struct FLinearColor CInterpTo(const struct FLinearColor& InCurrent, const struct FLinearColor& InTarget, float InDeltaTime, float InInterpSpeed);
	void BreakVector_NetQuantizeNormal(const struct FVector_NetQuantizeNormal& InInVec, double* InX, double* InY, double* InZ);
	void BreakVector_NetQuantize100(const struct FVector_NetQuantize100& InInVec, double* InX, double* InY, double* InZ);
	void BreakVector_NetQuantize10(const struct FVector_NetQuantize10& InInVec, double* InX, double* InY, double* InZ);
	void BreakVector_NetQuantize(const struct FVector_NetQuantize& InInVec, double* InX, double* InY, double* InZ);
	void BreakVector4(struct FVector4& InInVec, double* InX, double* InY, double* InZ, double* InW);
	void BreakVector3f(const struct FVector3f& InInVec, float* InX, float* InY, float* InZ);
	void BreakVector2D(const struct FVector2D& InInVec, double* InX, double* InY);
	void BreakVector(const struct FVector& InInVec, double* InX, double* InY, double* InZ);
	void BreakTransform(struct FTransform& InInTransform, struct FVector* InLocation, struct FRotator* InRotation, struct FVector* InScale);
	void BreakTimespan2(const struct FTimespan& InInTimespan, int32* InDays, int32* InHours, int32* InMinutes, int32* InSeconds, int32* InFractionNano);
	void BreakTimespan(const struct FTimespan& InInTimespan, int32* InDays, int32* InHours, int32* InMinutes, int32* InSeconds, int32* InMilliseconds);
	void BreakRotIntoAxes(struct FRotator& InInRot, struct FVector* InX, struct FVector* InY, struct FVector* InZ);
	void BreakRotator(const struct FRotator& InInRot, float* InRoll, float* InPitch, float* InYaw);
	void BreakRandomStream(struct FRandomStream& InInRandomStream, int32* InInitialSeed);
	void BreakQuat(struct FQuat& InInQuat, float* InX, float* InY, float* InZ, float* InW);
	void BreakQualifiedFrameTime(struct FQualifiedFrameTime& InInFrameTime, struct FFrameNumber* InFrame, struct FFrameRate* InFrameRate, float* InSubFrame);
	void BreakFrameRate(struct FFrameRate& InInFrameRate, int32* InNumerator, int32* InDenominator);
	void BreakDateTime(const struct FDateTime& InInDateTime, int32* InYear, int32* InMonth, int32* InDay, int32* InHour, int32* InMinute, int32* InSecond, int32* InMillisecond);
	void BreakColor(const struct FLinearColor& InInColor, float* InR, float* InG, float* InB, float* InA);
	void BreakBoxSphereBounds(struct FBoxSphereBounds& InInBoxSphereBounds, struct FVector* InOrigin, struct FVector* InBoxExtent, float* InSphereRadius);
	bool BooleanXOR(bool InA, bool InB);
	bool BooleanOR(bool InA, bool InB);
	bool BooleanNOR(bool InA, bool InB);
	bool BooleanNAND(bool InA, bool InB);
	bool BooleanAND(bool InA, bool InB);
	uint8 BMin(uint8 InA, uint8 InB);
	uint8 BMax(uint8 InA, uint8 InB);
	void AverageOfIntArray(TArray<int32>& InIntArray, float* InAverageValue);
	double Atan2(double InY, double InX);
	double Atan(double InA);
	double Asin(double InA);
	int32 And_IntInt(int32 InA, int32 InB);
	int64 And_Int64Int64(int64 InA, int64 InB);
	struct FVector Add_VectorVector(const struct FVector& InA, const struct FVector& InB);
	struct FVector Add_VectorInt(const struct FVector& InA, int32 InB);
	struct FVector Add_VectorFloat(const struct FVector& InA, double InB);
	struct FVector4 Add_Vector4Vector4(struct FVector4& InA, struct FVector4& InB);
	struct FVector2D Add_Vector2DVector2D(const struct FVector2D& InA, const struct FVector2D& InB);
	struct FVector2D Add_Vector2DFloat(const struct FVector2D& InA, double InB);
	struct FTimespan Add_TimespanTimespan(const struct FTimespan& InA, const struct FTimespan& InB);
	struct FQuat Add_QuatQuat(struct FQuat& InA, struct FQuat& InB);
	struct FMatrix Add_MatrixMatrix(struct FMatrix& InA, struct FMatrix& InB);
	struct FLinearColor Add_LinearColorLinearColor(const struct FLinearColor& InA, const struct FLinearColor& InB);
	struct FIntPoint Add_IntPointIntPoint(const struct FIntPoint& InA, const struct FIntPoint& InB);
	struct FIntPoint Add_IntPointInt(const struct FIntPoint& InA, int32 InB);
	int32 Add_IntInt(int32 InA, int32 InB);
	int64 Add_Int64Int64(int64 InA, int64 InB);
	double Add_DoubleDouble(double InA, double InB);
	struct FDateTime Add_DateTimeTimespan(const struct FDateTime& InA, const struct FTimespan& InB);
	struct FDateTime Add_DateTimeDateTime(const struct FDateTime& InA, const struct FDateTime& InB);
	uint8 Add_ByteByte(uint8 InA, uint8 InB);
	double Acos(double InA);
	int64 Abs_Int64(int64 InA);
	int32 Abs_Int(int32 InA);
	double Abs(double InA);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetNodeHelperLibrary
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetNodeHelperLibrary");
		return Clss;
	}

	void MarkBit(int32* InData, int32 InIndex);
	bool HasUnmarkedBit(int32 InData, int32 InNumBits);
	bool HasMarkedBit(int32 InData, int32 InNumBits);
	uint8 GetValidValue(class UEnum* InEnum, uint8 InEnumeratorValue);
	int32 GetUnmarkedBit(int32 InData, int32 InStartIdx, int32 InNumBits, bool InbRandom);
	int32 GetRandomUnmarkedBit(int32 InData, int32 InStartIdx, int32 InNumBits);
	int32 GetFirstUnmarkedBit(int32 InData, int32 InStartIdx, int32 InNumBits);
	uint8 GetEnumeratorValueFromIndex(class UEnum* InEnum, uint8 InEnumeratorIndex);
	class FString GetEnumeratorUserFriendlyName(class UEnum* InEnum, uint8 InEnumeratorValue);
	class FName GetEnumeratorName(class UEnum* InEnum, uint8 InEnumeratorValue);
	void ClearBit(int32* InData, int32 InIndex);
	void ClearAllBits(int32* InData);
	bool BitIsMarked(int32 InData, int32 InIndex);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetRenderingLibrary
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetRenderingLibrary");
		return Clss;
	}

	void SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* InPrimitiveComponent, bool InbCastInsetShadow, bool InbLightAttachmentsAsGroup);
	void ResizeRenderTarget2D(class UTextureRenderTarget2D* InTextureRenderTarget, int32 InWidth, int32 InHeight);
	class UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* InRenderTarget, const class FString& InName, enum class ETextureCompressionSettings InCompressionSettings, enum class ETextureMipGenSettings InMipSettings);
	void ReleaseRenderTarget2D(class UTextureRenderTarget2D* InTextureRenderTarget);
	struct FColor ReadRenderTargetUV(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, float InU, float InV);
	TArray<struct FLinearColor> ReadRenderTargetRawUVArea(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, const struct FBox2D& InArea, bool InbNormalize);
	struct FLinearColor ReadRenderTargetRawUV(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, float InU, float InV, bool InbNormalize);
	TArray<struct FLinearColor> ReadRenderTargetRawPixelArea(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, int32 InMinX, int32 InMinY, int32 InMaxX, int32 InMaxY, bool InbNormalize);
	struct FLinearColor ReadRenderTargetRawPixel(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, int32 InX, int32 InY, bool InbNormalize);
	bool ReadRenderTargetRaw(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, TArray<struct FLinearColor>* InOutLinearSamples, bool InbNormalize);
	struct FColor ReadRenderTargetPixel(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, int32 InX, int32 InY);
	bool ReadRenderTarget(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, TArray<struct FColor>* InOutSamples, bool InbNormalize);
	struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32 InBone0, uint8 InWeight0, int32 InBone1, uint8 InWeight1, int32 InBone2, uint8 InWeight2, int32 InBone3, uint8 InWeight3);
	class UTexture2D* ImportFileAsTexture2D(class UObject* InWorldContextObject, const class FString& InFilename);
	class UTexture2D* ImportBufferAsTexture2D(class UObject* InWorldContextObject, TArray<uint8>& InBuffer);
	void ExportTexture2D(class UObject* InWorldContextObject, class UTexture2D* InTexture, const class FString& InFilePath, const class FString& InFilename);
	void ExportRenderTarget(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, const class FString& InFilePath, const class FString& InFilename);
	void EndDrawCanvasToRenderTarget(class UObject* InWorldContextObject, struct FDrawToRenderTargetContext& InContext);
	void DrawMaterialToRenderTarget(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, class UMaterialInterface* InMaterial);
	class UTextureRenderTargetVolume* CreateRenderTargetVolume(class UObject* InWorldContextObject, int32 InWidth, int32 InHeight, int32 InDepth, enum class ETextureRenderTargetFormat InFormat, const struct FLinearColor& InClearColor, bool InbAutoGenerateMipMaps);
	class UTextureRenderTarget2DArray* CreateRenderTarget2DArray(class UObject* InWorldContextObject, int32 InWidth, int32 InHeight, int32 InSlices, enum class ETextureRenderTargetFormat InFormat, const struct FLinearColor& InClearColor, bool InbAutoGenerateMipMaps);
	class UTextureRenderTarget2D* CreateRenderTarget2D(class UObject* InWorldContextObject, int32 InWidth, int32 InHeight, enum class ETextureRenderTargetFormat InFormat, const struct FLinearColor& InClearColor, bool InbAutoGenerateMipMaps);
	void ConvertRenderTargetToTexture2DEditorOnly(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InRenderTarget, class UTexture2D* InTexture);
	void ClearRenderTarget2D(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, const struct FLinearColor& InClearColor);
	struct FMatrix CalculateProjectionMatrix(struct FMinimalViewInfo& InMinimalViewInfo);
	void BreakSkinWeightInfo(const struct FSkelMeshSkinWeightInfo& InInWeight, int32* InBone0, uint8* InWeight0, int32* InBone1, uint8* InWeight1, int32* InBone2, uint8* InWeight2, int32* InBone3, uint8* InWeight3);
	void BeginDrawCanvasToRenderTarget(class UObject* InWorldContextObject, class UTextureRenderTarget2D* InTextureRenderTarget, class UCanvas** InCanvas, struct FVector2D* InSize, struct FDrawToRenderTargetContext* InContext);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetStringLibrary
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetStringLibrary");
		return Clss;
	}

	class FString TrimTrailing(const class FString& InSourceString);
	class FString Trim(const class FString& InSourceString);
	class FString ToUpper(const class FString& InSourceString);
	class FString ToLower(const class FString& InSourceString);
	class FString TimeSecondsToString(float InInSeconds);
	bool StartsWith(const class FString& InSourceString, const class FString& InInPrefix, enum class ESearchCase InSearchCase);
	bool Split(const class FString& InSourceString, const class FString& InInStr, class FString* InLeftS, class FString* InRightS, enum class ESearchCase InSearchCase, enum class ESearchDir InSearchDir);
	class FString RightPad(const class FString& InSourceString, int32 InChCount);
	class FString RightChop(const class FString& InSourceString, int32 InCount);
	class FString Right(const class FString& InSourceString, int32 InCount);
	class FString Reverse(const class FString& InSourceString);
	int32 ReplaceInline(class FString& InSourceString, const class FString& InSearchText, const class FString& InReplacementText, enum class ESearchCase InSearchCase);
	class FString Replace(const class FString& InSourceString, const class FString& InFrom, const class FString& InTo, enum class ESearchCase InSearchCase);
	TArray<class FString> ParseIntoArray(const class FString& InSourceString, const class FString& InDelimiter, bool InCullEmptyStrings);
	bool NotEqual_StrStr(const class FString& InA, const class FString& InB);
	bool NotEqual_StriStri(const class FString& InA, const class FString& InB);
	class FString Mid(const class FString& InSourceString, int32 InStart, int32 InCount);
	bool MatchesWildcard(const class FString& InSourceString, const class FString& InWildcard, enum class ESearchCase InSearchCase);
	int32 Len(const class FString& InS);
	class FString LeftPad(const class FString& InSourceString, int32 InChCount);
	class FString LeftChop(const class FString& InSourceString, int32 InCount);
	class FString Left(const class FString& InSourceString, int32 InCount);
	class FString JoinStringArray(TArray<class FString>& InSourceArray, const class FString& InSeparator);
	bool IsNumeric(const class FString& InSourceString);
	bool IsEmpty(const class FString& InInString);
	class FString GetSubstring(const class FString& InSourceString, int32 InStartIndex, int32 InLength);
	int32 GetCharacterAsNumber(const class FString& InSourceString, int32 InIndex);
	TArray<class FString> GetCharacterArrayFromString(const class FString& InSourceString);
	int32 FindSubstring(const class FString& InSearchIn, const class FString& InSubstring, bool InbUseCase, bool InbSearchFromEnd, int32 InStartPosition);
	bool EqualEqual_StrStr(const class FString& InA, const class FString& InB);
	bool EqualEqual_StriStri(const class FString& InA, const class FString& InB);
	bool EndsWith(const class FString& InSourceString, const class FString& InInSuffix, enum class ESearchCase InSearchCase);
	int32 CullArray(const class FString& InSourceString, TArray<class FString>* InInArray);
	class FString Conv_VectorToString(const struct FVector& InInVec);
	class FString Conv_Vector3fToString(const struct FVector3f& InInVec);
	class FString Conv_Vector2dToString(const struct FVector2D& InInVec);
	class FString Conv_TransformToString(struct FTransform& InInTrans);
	void Conv_StringToVector3f(const class FString& InInString, struct FVector3f* InOutConvertedVector, bool* InOutIsValid);
	void Conv_StringToVector2D(const class FString& InInString, struct FVector2D* InOutConvertedVector2D, bool* InOutIsValid);
	void Conv_StringToVector(const class FString& InInString, struct FVector* InOutConvertedVector, bool* InOutIsValid);
	void Conv_StringToRotator(const class FString& InInString, struct FRotator* InOutConvertedRotator, bool* InOutIsValid);
	class FName Conv_StringToName(const class FString& InInString);
	int64 Conv_StringToInt64(const class FString& InInString);
	int32 Conv_StringToInt(const class FString& InInString);
	double Conv_StringToDouble(const class FString& InInString);
	void Conv_StringToColor(const class FString& InInString, struct FLinearColor* InOutConvertedColor, bool* InOutIsValid);
	class FString Conv_RotatorToString(const struct FRotator& InInRot);
	class FString Conv_PlatformUserIdToString(const struct FPlatformUserId& InInPlatformUserId);
	class FString Conv_ObjectToString(class UObject* InInObj);
	class FString Conv_NameToString(class FName InInName);
	class FString Conv_MatrixToString(struct FMatrix& InInMatrix);
	class FString Conv_IntVectorToString(const struct FIntVector& InInIntVec);
	class FString Conv_IntToString(int32 InInInt);
	class FString Conv_IntPointToString(const struct FIntPoint& InInIntPoint);
	class FString Conv_Int64ToString(int64 InInInt);
	class FString Conv_InputDeviceIdToString(const struct FInputDeviceId& InInDeviceId);
	class FString Conv_DoubleToString(double InInDouble);
	class FString Conv_ColorToString(const struct FLinearColor& InInColor);
	class FString Conv_ByteToString(uint8 InInByte);
	class FString Conv_BoolToString(bool InInBool);
	bool Contains(const class FString& InSearchIn, const class FString& InSubstring, bool InbUseCase, bool InbSearchFromEnd);
	class FString Concat_StrStr(const class FString& InA, const class FString& InB);
	class FString BuildString_Vector2d(const class FString& InAppendTo, const class FString& InPrefix, const struct FVector2D& InInVector2D, const class FString& InSuffix);
	class FString BuildString_Vector(const class FString& InAppendTo, const class FString& InPrefix, const struct FVector& InInVector, const class FString& InSuffix);
	class FString BuildString_Rotator(const class FString& InAppendTo, const class FString& InPrefix, const struct FRotator& InInRot, const class FString& InSuffix);
	class FString BuildString_Object(const class FString& InAppendTo, const class FString& InPrefix, class UObject* InInObj, const class FString& InSuffix);
	class FString BuildString_Name(const class FString& InAppendTo, const class FString& InPrefix, class FName InInName, const class FString& InSuffix);
	class FString BuildString_IntVector(const class FString& InAppendTo, const class FString& InPrefix, const struct FIntVector& InInIntVector, const class FString& InSuffix);
	class FString BuildString_Int(const class FString& InAppendTo, const class FString& InPrefix, int32 InInInt, const class FString& InSuffix);
	class FString BuildString_Double(const class FString& InAppendTo, const class FString& InPrefix, double InInDouble, const class FString& InSuffix);
	class FString BuildString_Color(const class FString& InAppendTo, const class FString& InPrefix, const struct FLinearColor& InInColor, const class FString& InSuffix);
	class FString BuildString_Bool(const class FString& InAppendTo, const class FString& InPrefix, bool InInBool, const class FString& InSuffix);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetStringTableLibrary
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetStringTableLibrary");
		return Clss;
	}

	bool IsRegisteredTableId(class FName InTableId);
	bool IsRegisteredTableEntry(class FName InTableId, const class FString& InKey);
	class FString GetTableNamespace(class FName InTableId);
	class FString GetTableEntrySourceString(class FName InTableId, const class FString& InKey);
	class FString GetTableEntryMetaData(class FName InTableId, const class FString& InKey, class FName InMetaDataId);
	TArray<class FName> GetRegisteredStringTables();
	TArray<class FName> GetMetaDataIdsFromStringTableEntry(class FName InTableId, const class FString& InKey);
	TArray<class FString> GetKeysFromStringTable(class FName InTableId);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetSystemLibrary
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetSystemLibrary");
		return Clss;
	}

	void UnregisterForRemoteNotifications();
	void UnloadPrimaryAssetList(TArray<struct FPrimaryAssetId>& InPrimaryAssetIdList);
	void UnloadPrimaryAsset(const struct FPrimaryAssetId& InPrimaryAssetId);
	void TransactObject(class UObject* InObject);
	void StackTrace();
	bool SphereTraceSingleForObjects(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool SphereTraceSingleByProfile(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, class FName InProfileName, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool SphereTraceSingle(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, enum class ETraceTypeQuery InTraceChannel, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool SphereTraceMultiForObjects(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool SphereTraceMultiByProfile(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, class FName InProfileName, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool SphereTraceMulti(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, enum class ETraceTypeQuery InTraceChannel, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool SphereOverlapComponents(class UObject* InWorldContextObject, const struct FVector& InSpherePos, float InSphereRadius, TArray<enum class EObjectTypeQuery>& InObjectTypes, class UClass* InComponentClassFilter, TArray<class AActor*>& InActorsToIgnore, TArray<class UPrimitiveComponent*>* InOutComponents);
	bool SphereOverlapActors(class UObject* InWorldContextObject, const struct FVector& InSpherePos, float InSphereRadius, TArray<enum class EObjectTypeQuery>& InObjectTypes, class UClass* InActorClassFilter, TArray<class AActor*>& InActorsToIgnore, TArray<class AActor*>* InOutActors);
	void SnapshotObject(class UObject* InObject);
	void ShowPlatformSpecificLeaderboardScreen(const class FString& InCategoryName);
	void ShowPlatformSpecificAchievementsScreen(class APlayerController* InSpecificPlayer);
	void ShowInterstitialAd();
	void ShowAdBanner(int32 InAdIdIndex, bool InbShowOnBottomOfScreen);
	void SetWindowTitle(class FText& InTitle);
	void SetVolumeButtonsHandledBySystem(bool InbEnabled);
	void SetVectorPropertyByName(class UObject* InObject, class FName InPropertyName, struct FVector& InValue);
	void SetVector3fPropertyByName(class UObject* InObject, class FName InPropertyName, struct FVector3f& InValue);
	void SetUserActivity(struct FUserActivity& InUserActivity);
	void SetTransformPropertyByName(class UObject* InObject, class FName InPropertyName, struct FTransform& InValue);
	void SetTextPropertyByName(class UObject* InObject, class FName InPropertyName, class FText& InValue);
	void SetSuppressViewportTransitionMessage(class UObject* InWorldContextObject, bool InbState);
	void SetStructurePropertyByName(class UObject* InObject, class FName InPropertyName, struct FGenericStruct& InValue);
	void SetStringPropertyByName(class UObject* InObject, class FName InPropertyName, const class FString& InValue);
	void SetSoftObjectPropertyByName(class UObject* InObject, class FName InPropertyName, TSoftObjectPtr<class UObject>& InValue);
	void SetSoftClassPropertyByName(class UObject* InObject, class FName InPropertyName, TSoftClassPtr<class UObject>& InValue);
	void SetRotatorPropertyByName(class UObject* InObject, class FName InPropertyName, struct FRotator& InValue);
	void SetObjectPropertyByName(class UObject* InObject, class FName InPropertyName, class UObject* InValue);
	void SetNamePropertyByName(class UObject* InObject, class FName InPropertyName, class FName& InValue);
	void SetLinearColorPropertyByName(class UObject* InObject, class FName InPropertyName, struct FLinearColor& InValue);
	void SetIntPropertyByName(class UObject* InObject, class FName InPropertyName, int32 InValue);
	void SetInterfacePropertyByName(class UObject* InObject, class FName InPropertyName, TScriptInterface<class IInterface>& InValue);
	void SetInt64PropertyByName(class UObject* InObject, class FName InPropertyName, int64 InValue);
	void SetGamepadsBlockDeviceFeedback(bool InbBlock);
	void SetFieldPathPropertyByName(class UObject* InObject, class FName InPropertyName, FFieldPathProperty_& InValue);
	void SetDoublePropertyByName(class UObject* InObject, class FName InPropertyName, double InValue);
	void SetColorPropertyByName(class UObject* InObject, class FName InPropertyName, struct FColor& InValue);
	void SetCollisionProfileNameProperty(class UObject* InObject, class FName InPropertyName, struct FCollisionProfileName& InValue);
	void SetClassPropertyByName(class UObject* InObject, class FName InPropertyName, TSubclassOf<class UObject> InValue);
	void SetBytePropertyByName(class UObject* InObject, class FName InPropertyName, uint8 InValue);
	void SetBoolPropertyByName(class UObject* InObject, class FName InPropertyName, bool InValue);
	void RetriggerableDelay(class UObject* InWorldContextObject, float InDuration, const struct FLatentActionInfo& InLatentInfo);
	void ResetGamepadAssignmentToController(int32 InControllerId);
	void ResetGamepadAssignments();
	void RegisterForRemoteNotifications();
	void QuitGame(class UObject* InWorldContextObject, class APlayerController* InSpecificPlayer, enum class EQuitPreference InQuitPreference, bool InbIgnorePlatformRestrictions);
	void PrintWarning(const class FString& InInString);
	void PrintText(class UObject* InWorldContextObject, class FText InInText, bool InbPrintToScreen, bool InbPrintToLog, const struct FLinearColor& InTextColor, float InDuration, class FName InKey);
	void PrintString(class UObject* InWorldContextObject, const class FString& InInString, bool InbPrintToScreen, bool InbPrintToLog, const struct FLinearColor& InTextColor, float InDuration, class FName InKey);
	bool ParseParamValue(const class FString& InInString, const class FString& InInParam, class FString* InOutValue);
	bool ParseParam(const class FString& InInString, const class FString& InInParam);
	void ParseCommandLine(const class FString& InInCmdLine, TArray<class FString>* InOutTokens, TArray<class FString>* InOutSwitches, TMap<class FString, class FString>* InOutParams);
	void OnAssetLoaded__DelegateSignature(class UObject* InLoaded);
	void OnAssetClassLoaded__DelegateSignature(TSubclassOf<class UObject> InLoaded);
	bool NotEqual_SoftObjectReference(TSoftObjectPtr<class UObject>& InA, TSoftObjectPtr<class UObject>& InB);
	bool NotEqual_SoftClassReference(TSoftClassPtr<class UObject>& InA, TSoftClassPtr<class UObject>& InB);
	bool NotEqual_PrimaryAssetType(const struct FPrimaryAssetType& InA, const struct FPrimaryAssetType& InB);
	bool NotEqual_PrimaryAssetId(const struct FPrimaryAssetId& InA, const struct FPrimaryAssetId& InB);
	class FString NormalizeFilename(const class FString& InInFilename);
	void MoveComponentTo(class USceneComponent* InComponent, const struct FVector& InTargetRelativeLocation, const struct FRotator& InTargetRelativeRotation, bool InbEaseOut, bool InbEaseIn, float InOverTime, bool InbForceShortestRotationPath, enum class EMoveComponentAction InMoveAction, const struct FLatentActionInfo& InLatentInfo);
	struct FSoftObjectPath MakeSoftObjectPath(const class FString& InPathString);
	struct FSoftClassPath MakeSoftClassPath(const class FString& InPathString);
	class FText MakeLiteralText(class FText InValue);
	class FString MakeLiteralString(const class FString& InValue);
	class FName MakeLiteralName(class FName InValue);
	int64 MakeLiteralInt64(int64 InValue);
	int32 MakeLiteralInt(int32 InValue);
	double MakeLiteralDouble(double InValue);
	uint8 MakeLiteralByte(uint8 InValue);
	bool MakeLiteralBool(bool InValue);
	struct FARFilter MakeARFilter(TArray<class FName>& InPackageNames, TArray<class FName>& InPackagePaths, TArray<struct FSoftObjectPath>& InSoftObjectPaths, TArray<struct FTopLevelAssetPath>& InClassPaths, TSet<struct FTopLevelAssetPath>& InRecursiveClassPathsExclusionSet, TArray<class FName>& InClassNames, TSet<class FName>& InRecursiveClassesExclusionSet, bool InbRecursivePaths, bool InbRecursiveClasses, bool InbIncludeOnlyOnDiskAssets);
	void LogString(const class FString& InInString, bool InbPrintToLog);
	void LoadInterstitialAd(int32 InAdIdIndex);
	class UClass* LoadClassAsset_Blocking(TSoftClassPtr<class UObject> InAssetClass);
	void LoadAssetClass(class UObject* InWorldContextObject, TSoftClassPtr<class UObject> InAssetClass, FDelegateProperty_ InOnLoaded, const struct FLatentActionInfo& InLatentInfo);
	class UObject* LoadAsset_Blocking(TSoftObjectPtr<class UObject> InAsset);
	void LoadAsset(class UObject* InWorldContextObject, TSoftObjectPtr<class UObject> InAsset, FDelegateProperty_ InOnLoaded, const struct FLatentActionInfo& InLatentInfo);
	bool LineTraceSingleForObjects(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool LineTraceSingleByProfile(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, class FName InProfileName, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool LineTraceSingle(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, enum class ETraceTypeQuery InTraceChannel, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool LineTraceMultiForObjects(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool LineTraceMultiByProfile(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, class FName InProfileName, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool LineTraceMulti(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, enum class ETraceTypeQuery InTraceChannel, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	void LaunchURL(const class FString& InURL);
	void K2_UnPauseTimerHandle(class UObject* InWorldContextObject, const struct FTimerHandle& InHandle);
	void K2_UnPauseTimerDelegate(FDelegateProperty_ InDelegate);
	void K2_UnPauseTimer(class UObject* InObject, const class FString& InFunctionName);
	bool K2_TimerExistsHandle(class UObject* InWorldContextObject, const struct FTimerHandle& InHandle);
	bool K2_TimerExistsDelegate(FDelegateProperty_ InDelegate);
	bool K2_TimerExists(class UObject* InObject, const class FString& InFunctionName);
	struct FTimerHandle K2_SetTimerForNextTickDelegate(FDelegateProperty_ InDelegate);
	struct FTimerHandle K2_SetTimerForNextTick(class UObject* InObject, const class FString& InFunctionName);
	struct FTimerHandle K2_SetTimerDelegate(FDelegateProperty_ InDelegate, float InTime, bool InbLooping, float InInitialStartDelay, float InInitialStartDelayVariance);
	struct FTimerHandle K2_SetTimer(class UObject* InObject, const class FString& InFunctionName, float InTime, bool InbLooping, float InInitialStartDelay, float InInitialStartDelayVariance);
	void K2_PauseTimerHandle(class UObject* InWorldContextObject, const struct FTimerHandle& InHandle);
	void K2_PauseTimerDelegate(FDelegateProperty_ InDelegate);
	void K2_PauseTimer(class UObject* InObject, const class FString& InFunctionName);
	bool K2_IsValidTimerHandle(const struct FTimerHandle& InHandle);
	bool K2_IsTimerPausedHandle(class UObject* InWorldContextObject, const struct FTimerHandle& InHandle);
	bool K2_IsTimerPausedDelegate(FDelegateProperty_ InDelegate);
	bool K2_IsTimerPaused(class UObject* InObject, const class FString& InFunctionName);
	bool K2_IsTimerActiveHandle(class UObject* InWorldContextObject, const struct FTimerHandle& InHandle);
	bool K2_IsTimerActiveDelegate(FDelegateProperty_ InDelegate);
	bool K2_IsTimerActive(class UObject* InObject, const class FString& InFunctionName);
	struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle& InHandle);
	float K2_GetTimerRemainingTimeHandle(class UObject* InWorldContextObject, const struct FTimerHandle& InHandle);
	float K2_GetTimerRemainingTimeDelegate(FDelegateProperty_ InDelegate);
	float K2_GetTimerRemainingTime(class UObject* InObject, const class FString& InFunctionName);
	float K2_GetTimerElapsedTimeHandle(class UObject* InWorldContextObject, const struct FTimerHandle& InHandle);
	float K2_GetTimerElapsedTimeDelegate(FDelegateProperty_ InDelegate);
	float K2_GetTimerElapsedTime(class UObject* InObject, const class FString& InFunctionName);
	void K2_ClearTimerHandle(class UObject* InWorldContextObject, const struct FTimerHandle& InHandle);
	void K2_ClearTimerDelegate(FDelegateProperty_ InDelegate);
	void K2_ClearTimer(class UObject* InObject, const class FString& InFunctionName);
	void K2_ClearAndInvalidateTimerHandle(class UObject* InWorldContextObject, struct FTimerHandle& InHandle);
	bool IsValidSoftObjectReference(TSoftObjectPtr<class UObject>& InSoftObjectReference);
	bool IsValidSoftClassReference(TSoftClassPtr<class UObject>& InSoftClassReference);
	bool IsValidPrimaryAssetType(const struct FPrimaryAssetType& InPrimaryAssetType);
	bool IsValidPrimaryAssetId(const struct FPrimaryAssetId& InPrimaryAssetId);
	bool IsValidClass(class UClass* InClass);
	bool IsValid(class UObject* InObject);
	bool IsUnattended();
	bool IsStandalone(class UObject* InWorldContextObject);
	bool IsSplitScreen(class UObject* InWorldContextObject);
	bool IsServer(class UObject* InWorldContextObject);
	bool IsScreensaverEnabled();
	bool IsPackagedForDistribution();
	bool IsLoggedIn(class APlayerController* InSpecificPlayer);
	bool IsInterstitialAdRequested();
	bool IsInterstitialAdAvailable();
	bool IsDedicatedServer(class UObject* InWorldContextObject);
	bool IsControllerAssignedToGamepad(int32 InControllerId);
	void HideAdBanner();
	bool HasMultipleLocalPlayers(class UObject* InWorldContextObject);
	bool GetVolumeButtonsHandledBySystem();
	class FString GetUniqueDeviceId();
	class FString GetSystemPath(class UObject* InObject);
	bool GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* InResolutions);
	TSoftObjectPtr<class UObject> GetSoftObjectReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& InPrimaryAssetId);
	struct FSoftObjectPath GetSoftObjectPath(class UObject* InObject);
	TSoftClassPtr<class UObject> GetSoftClassReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& InPrimaryAssetId);
	struct FSoftClassPath GetSoftClassPath(class UClass* InClass);
	int32 GetRenderingMaterialQualityLevel();
	int32 GetRenderingDetailMode();
	class FString GetProjectSavedDirectory();
	class FString GetProjectDirectory();
	class FString GetProjectContentDirectory();
	void GetPrimaryAssetsWithBundleState(TArray<class FName>& InRequiredBundles, TArray<class FName>& InExcludedBundles, TArray<struct FPrimaryAssetType>& InValidTypes, bool InbForceCurrentState, TArray<struct FPrimaryAssetId>* InOutPrimaryAssetIdList);
	void GetPrimaryAssetIdList(const struct FPrimaryAssetType& InPrimaryAssetType, TArray<struct FPrimaryAssetId>* InOutPrimaryAssetIdList);
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(TSoftObjectPtr<class UObject> InSoftObjectReference);
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(TSoftClassPtr<class UObject> InSoftClassReference);
	struct FPrimaryAssetId GetPrimaryAssetIdFromObject(class UObject* InObject);
	struct FPrimaryAssetId GetPrimaryAssetIdFromClass(TSubclassOf<class UObject> InClass);
	TArray<class FString> GetPreferredLanguages();
	class FString GetPlatformUserName();
	class FString GetPlatformUserDir();
	class FString GetPathName(class UObject* InObject);
	class UObject* GetOuterObject(class UObject* InObject);
	class FString GetObjectName(class UObject* InObject);
	class UObject* GetObjectFromPrimaryAssetId(const struct FPrimaryAssetId& InPrimaryAssetId);
	int32 GetMinYResolutionForUI();
	int32 GetMinYResolutionFor3DView();
	class FString GetLocalCurrencySymbol();
	class FString GetLocalCurrencyCode();
	double GetGameTimeInSeconds(class UObject* InWorldContextObject);
	class FString GetGamepadControllerName(int32 InControllerId);
	class UTexture2D* GetGamepadButtonGlyph(const class FString& InButtonKey, int32 InControllerIndex);
	class FString GetGameName();
	class FString GetGameBundleId();
	int64 GetFrameCount();
	class FString GetEngineVersion();
	class FString GetDisplayName(class UObject* InObject);
	class FString GetDeviceId();
	class FString GetDefaultLocale();
	class FString GetDefaultLanguage();
	bool GetCurrentBundleState(const struct FPrimaryAssetId& InPrimaryAssetId, bool InbForceCurrentState, TArray<class FName>* InOutBundles);
	bool GetConvenientWindowedResolutions(TArray<struct FIntPoint>* InResolutions);
	int32 GetConsoleVariableIntValue(const class FString& InVariableName);
	float GetConsoleVariableFloatValue(const class FString& InVariableName);
	bool GetConsoleVariableBoolValue(const class FString& InVariableName);
	void GetComponentBounds(class USceneComponent* InComponent, struct FVector* InOrigin, struct FVector* InBoxExtent, float* InSphereRadius);
	class FString GetCommandLine();
	TSubclassOf<class UObject> GetClassFromPrimaryAssetId(const struct FPrimaryAssetId& InPrimaryAssetId);
	class FString GetClassDisplayName(class UClass* InClass);
	class FString GetBuildVersion();
	class FString GetBuildConfiguration();
	int32 GetAdIDCount();
	void GetActorListFromComponentList(TArray<class UPrimitiveComponent*>& InComponentList, class UClass* InActorClassFilter, TArray<class AActor*>* InOutActorList);
	void GetActorBounds(class AActor* InActor, struct FVector* InOrigin, struct FVector* InBoxExtent);
	void ForceCloseAdBanner();
	void FlushPersistentDebugLines(class UObject* InWorldContextObject);
	void FlushDebugStrings(class UObject* InWorldContextObject);
	void ExecuteConsoleCommand(class UObject* InWorldContextObject, const class FString& InCommand, class APlayerController* InSpecificPlayer);
	bool EqualEqual_SoftObjectReference(TSoftObjectPtr<class UObject>& InA, TSoftObjectPtr<class UObject>& InB);
	bool EqualEqual_SoftClassReference(TSoftClassPtr<class UObject>& InA, TSoftClassPtr<class UObject>& InB);
	bool EqualEqual_PrimaryAssetType(const struct FPrimaryAssetType& InA, const struct FPrimaryAssetType& InB);
	bool EqualEqual_PrimaryAssetId(const struct FPrimaryAssetId& InA, const struct FPrimaryAssetId& InB);
	int32 EndTransaction();
	void DrawDebugString(class UObject* InWorldContextObject, const struct FVector& InTextLocation, const class FString& InText, class AActor* InTestBaseActor, const struct FLinearColor& InTextColor, float InDuration);
	void DrawDebugSphere(class UObject* InWorldContextObject, const struct FVector& InCenter, float InRadius, int32 InSegments, const struct FLinearColor& InLineColor, float InDuration, float InThickness);
	void DrawDebugPoint(class UObject* InWorldContextObject, const struct FVector& InPosition, float InSize, const struct FLinearColor& InPointColor, float InDuration);
	void DrawDebugPlane(class UObject* InWorldContextObject, struct FPlane& InPlaneCoordinates, const struct FVector& InLocation, float InSize, const struct FLinearColor& InPlaneColor, float InDuration);
	void DrawDebugLine(class UObject* InWorldContextObject, const struct FVector& InLineStart, const struct FVector& InLineEnd, const struct FLinearColor& InLineColor, float InDuration, float InThickness);
	void DrawDebugFrustum(class UObject* InWorldContextObject, struct FTransform& InFrustumTransform, const struct FLinearColor& InFrustumColor, float InDuration, float InThickness);
	void DrawDebugFloatHistoryTransform(class UObject* InWorldContextObject, struct FDebugFloatHistory& InFloatHistory, struct FTransform& InDrawTransform, const struct FVector2D& InDrawSize, const struct FLinearColor& InDrawColor, float InDuration);
	void DrawDebugFloatHistoryLocation(class UObject* InWorldContextObject, struct FDebugFloatHistory& InFloatHistory, const struct FVector& InDrawLocation, const struct FVector2D& InDrawSize, const struct FLinearColor& InDrawColor, float InDuration);
	void DrawDebugCylinder(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, int32 InSegments, const struct FLinearColor& InLineColor, float InDuration, float InThickness);
	void DrawDebugCoordinateSystem(class UObject* InWorldContextObject, const struct FVector& InAxisLoc, const struct FRotator& InAxisRot, float InScale, float InDuration, float InThickness);
	void DrawDebugConeInDegrees(class UObject* InWorldContextObject, const struct FVector& InOrigin, const struct FVector& InDirection, float InLength, float InAngleWidth, float InAngleHeight, int32 InNumSides, const struct FLinearColor& InLineColor, float InDuration, float InThickness);
	void DrawDebugCone(class UObject* InWorldContextObject, const struct FVector& InOrigin, const struct FVector& InDirection, float InLength, float InAngleWidth, float InAngleHeight, int32 InNumSides, const struct FLinearColor& InLineColor, float InDuration, float InThickness);
	void DrawDebugCircle(class UObject* InWorldContextObject, const struct FVector& InCenter, float InRadius, int32 InNumSegments, const struct FLinearColor& InLineColor, float InDuration, float InThickness, const struct FVector& InYAxis, const struct FVector& InZAxis, bool InbDrawAxis);
	void DrawDebugCapsule(class UObject* InWorldContextObject, const struct FVector& InCenter, float InHalfHeight, float InRadius, const struct FRotator& InRotation, const struct FLinearColor& InLineColor, float InDuration, float InThickness);
	void DrawDebugCamera(class ACameraActor* InCameraActor, const struct FLinearColor& InCameraColor, float InDuration);
	void DrawDebugBox(class UObject* InWorldContextObject, const struct FVector& InCenter, const struct FVector& InExtent, const struct FLinearColor& InLineColor, const struct FRotator& InRotation, float InDuration, float InThickness);
	void DrawDebugArrow(class UObject* InWorldContextObject, const struct FVector& InLineStart, const struct FVector& InLineEnd, float InArrowSize, const struct FLinearColor& InLineColor, float InDuration, float InThickness);
	bool DoesImplementInterface(class UObject* InTestObject, TSubclassOf<class IInterface> InInterface);
	void DelayUntilNextTick(class UObject* InWorldContextObject, const struct FLatentActionInfo& InLatentInfo);
	void Delay(class UObject* InWorldContextObject, float InDuration, const struct FLatentActionInfo& InLatentInfo);
	void CreateCopyForUndoBuffer(class UObject* InObjectToModify);
	class FString ConvertToRelativePath(const class FString& InFilename);
	class FString ConvertToAbsolutePath(const class FString& InFilename);
	struct FSoftObjectPath Conv_SoftObjRefToSoftObjPath(TSoftObjectPtr<class UObject> InSoftObjectReference);
	struct FSoftClassPath Conv_SoftObjRefToSoftClassPath(TSoftClassPtr<class UObject> InSoftClassReference);
	TSoftObjectPtr<class UObject> Conv_SoftObjPathToSoftObjRef(struct FSoftObjectPath& InSoftObjectPath);
	class FString Conv_SoftObjectReferenceToString(TSoftObjectPtr<class UObject>& InSoftObjectReference);
	class UObject* Conv_SoftObjectReferenceToObject(TSoftObjectPtr<class UObject>& InSoftObject);
	class FString Conv_SoftClassReferenceToString(TSoftClassPtr<class UObject>& InSoftClassReference);
	TSubclassOf<class UObject> Conv_SoftClassReferenceToClass(TSoftClassPtr<class UObject>& InSoftClass);
	TSoftClassPtr<class UObject> Conv_SoftClassPathToSoftClassRef(struct FSoftClassPath& InSoftClassPath);
	class FString Conv_PrimaryAssetTypeToString(const struct FPrimaryAssetType& InPrimaryAssetType);
	class FString Conv_PrimaryAssetIdToString(const struct FPrimaryAssetId& InPrimaryAssetId);
	TSoftObjectPtr<class UObject> Conv_ObjectToSoftObjectReference(class UObject* InObject);
	class UClass* Conv_ObjectToClass(class UObject* InObject, TSubclassOf<class UObject> InClass);
	class UObject* Conv_InterfaceToObject(TScriptInterface<class IInterface>& InInterface);
	TSoftClassPtr<class UObject> Conv_ClassToSoftClassReference(TSubclassOf<class UObject>& InClass);
	void ControlScreensaver(bool InbAllowScreenSaver);
	bool ComponentOverlapComponents(class UPrimitiveComponent* InComponent, struct FTransform& InComponentTransform, TArray<enum class EObjectTypeQuery>& InObjectTypes, class UClass* InComponentClassFilter, TArray<class AActor*>& InActorsToIgnore, TArray<class UPrimitiveComponent*>* InOutComponents);
	bool ComponentOverlapActors(class UPrimitiveComponent* InComponent, struct FTransform& InComponentTransform, TArray<enum class EObjectTypeQuery>& InObjectTypes, class UClass* InActorClassFilter, TArray<class AActor*>& InActorsToIgnore, TArray<class AActor*>* InOutActors);
	void CollectGarbage();
	bool CapsuleTraceSingleForObjects(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, float InHalfHeight, TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool CapsuleTraceSingleByProfile(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, float InHalfHeight, class FName InProfileName, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool CapsuleTraceSingle(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, float InHalfHeight, enum class ETraceTypeQuery InTraceChannel, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool CapsuleTraceMultiForObjects(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, float InHalfHeight, TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool CapsuleTraceMultiByProfile(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, float InHalfHeight, class FName InProfileName, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool CapsuleTraceMulti(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, float InRadius, float InHalfHeight, enum class ETraceTypeQuery InTraceChannel, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool CapsuleOverlapComponents(class UObject* InWorldContextObject, const struct FVector& InCapsulePos, float InRadius, float InHalfHeight, TArray<enum class EObjectTypeQuery>& InObjectTypes, class UClass* InComponentClassFilter, TArray<class AActor*>& InActorsToIgnore, TArray<class UPrimitiveComponent*>* InOutComponents);
	bool CapsuleOverlapActors(class UObject* InWorldContextObject, const struct FVector& InCapsulePos, float InRadius, float InHalfHeight, TArray<enum class EObjectTypeQuery>& InObjectTypes, class UClass* InActorClassFilter, TArray<class AActor*>& InActorsToIgnore, TArray<class AActor*>* InOutActors);
	bool CanLaunchURL(const class FString& InURL);
	void CancelTransaction(int32 InIndex);
	void BreakSoftObjectPath(const struct FSoftObjectPath& InInSoftObjectPath, class FString* InPathString);
	void BreakSoftClassPath(const struct FSoftClassPath& InInSoftClassPath, class FString* InPathString);
	void BreakARFilter(const struct FARFilter& InInARFilter, TArray<class FName>* InPackageNames, TArray<class FName>* InPackagePaths, TArray<struct FSoftObjectPath>* InSoftObjectPaths, TArray<struct FTopLevelAssetPath>* InClassPaths, TSet<struct FTopLevelAssetPath>* InRecursiveClassPathsExclusionSet, TArray<class FName>* InClassNames, TSet<class FName>* InRecursiveClassesExclusionSet, bool* InbRecursivePaths, bool* InbRecursiveClasses, bool* InbIncludeOnlyOnDiskAssets);
	bool BoxTraceSingleForObjects(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InHalfSize, const struct FRotator& InOrientation, TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool BoxTraceSingleByProfile(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InHalfSize, const struct FRotator& InOrientation, class FName InProfileName, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool BoxTraceSingle(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InHalfSize, const struct FRotator& InOrientation, enum class ETraceTypeQuery InTraceChannel, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, struct FHitResult* InOutHit, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool BoxTraceMultiForObjects(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InHalfSize, const struct FRotator& InOrientation, TArray<enum class EObjectTypeQuery>& InObjectTypes, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool BoxTraceMultiByProfile(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InHalfSize, const struct FRotator& InOrientation, class FName InProfileName, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool BoxTraceMulti(class UObject* InWorldContextObject, const struct FVector& InStart, const struct FVector& InEnd, const struct FVector& InHalfSize, const struct FRotator& InOrientation, enum class ETraceTypeQuery InTraceChannel, bool InbTraceComplex, TArray<class AActor*>& InActorsToIgnore, enum class EDrawDebugTrace InDrawDebugType, TArray<struct FHitResult>* InOutHits, bool InbIgnoreSelf, const struct FLinearColor& InTraceColor, const struct FLinearColor& InTraceHitColor, float InDrawTime);
	bool BoxOverlapComponents(class UObject* InWorldContextObject, const struct FVector& InBoxPos, const struct FVector& InExtent, TArray<enum class EObjectTypeQuery>& InObjectTypes, class UClass* InComponentClassFilter, TArray<class AActor*>& InActorsToIgnore, TArray<class UPrimitiveComponent*>* InOutComponents);
	bool BoxOverlapActors(class UObject* InWorldContextObject, const struct FVector& InBoxPos, const struct FVector& InBoxExtent, TArray<enum class EObjectTypeQuery>& InObjectTypes, class UClass* InActorClassFilter, TArray<class AActor*>& InActorsToIgnore, TArray<class AActor*>* InOutActors);
	int32 BeginTransaction(const class FString& InContext, class FText InDescription, class UObject* InPrimaryObject);
	struct FDebugFloatHistory AddFloatHistorySample(float InValue, struct FDebugFloatHistory& InFloatHistory);
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintPathsLibrary
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintPathsLibrary");
		return Clss;
	}

	class FString VideoCaptureDir();
	void ValidatePath(const class FString& InInPath, bool* InbDidSucceed, class FText* InOutReason);
	void Split(const class FString& InInPath, class FString* InPathPart, class FString* InFilenamePart, class FString* InExtensionPart);
	class FString SourceConfigDir();
	bool ShouldSaveToUserDir();
	class FString ShaderWorkingDir();
	void SetProjectFilePath(const class FString& InNewGameProjectFilePath);
	class FString SetExtension(const class FString& InInPath, const class FString& InInNewExtension);
	class FString ScreenShotDir();
	class FString SandboxesDir();
	class FString RootDir();
	void RemoveDuplicateSlashes(const class FString& InInPath, class FString* InOutPath);
	class FString ProjectUserDir();
	class FString ProjectSavedDir();
	class FString ProjectPluginsDir();
	class FString ProjectPersistentDownloadDir();
	class FString ProjectModsDir();
	class FString ProjectLogDir();
	class FString ProjectIntermediateDir();
	class FString ProjectDir();
	class FString ProjectContentDir();
	class FString ProjectConfigDir();
	class FString ProfilingDir();
	void NormalizeFilename(const class FString& InInPath, class FString* InOutPath);
	void NormalizeDirectoryName(const class FString& InInPath, class FString* InOutPath);
	class FString MakeValidFileName(const class FString& InInString, const class FString& InInReplacementChar);
	void MakeStandardFilename(const class FString& InInPath, class FString* InOutPath);
	void MakePlatformFilename(const class FString& InInPath, class FString* InOutPath);
	bool MakePathRelativeTo(const class FString& InInPath, const class FString& InInRelativeTo, class FString* InOutPath);
	class FString LaunchDir();
	bool IsSamePath(const class FString& InPathA, const class FString& InPathB);
	bool IsRestrictedPath(const class FString& InInPath);
	bool IsRelative(const class FString& InInPath);
	bool IsProjectFilePathSet();
	bool IsDrive(const class FString& InInPath);
	bool HasProjectPersistentDownloadDir();
	TArray<class FString> GetToolTipLocalizationPaths();
	TArray<class FString> GetRestrictedFolderNames();
	class FString GetRelativePathToRoot();
	TArray<class FString> GetPropertyNameLocalizationPaths();
	class FString GetProjectFilePath();
	class FString GetPath(const class FString& InInPath);
	class FString GetInvalidFileSystemChars();
	TArray<class FString> GetGameLocalizationPaths();
	class FString GetExtension(const class FString& InInPath, bool InbIncludeDot);
	TArray<class FString> GetEngineLocalizationPaths();
	TArray<class FString> GetEditorLocalizationPaths();
	class FString GetCleanFilename(const class FString& InInPath);
	class FString GetBaseFilename(const class FString& InInPath, bool InbRemovePath);
	class FString GeneratedConfigDir();
	class FString GameUserDeveloperDir();
	class FString GameSourceDir();
	class FString GameDevelopersDir();
	class FString GameAgnosticSavedDir();
	bool FileExists(const class FString& InInPath);
	class FString FeaturePackDir();
	class FString EnterprisePluginsDir();
	class FString EnterpriseFeaturePackDir();
	class FString EnterpriseDir();
	class FString EngineVersionAgnosticUserDir();
	class FString EngineUserDir();
	class FString EngineSourceDir();
	class FString EngineSavedDir();
	class FString EnginePluginsDir();
	class FString EngineIntermediateDir();
	class FString EngineDir();
	class FString EngineContentDir();
	class FString EngineConfigDir();
	bool DirectoryExists(const class FString& InInPath);
	class FString DiffDir();
	class FString CreateTempFilename(const class FString& InPath, const class FString& InPrefix, const class FString& InExtension);
	class FString ConvertToSandboxPath(const class FString& InInPath, const class FString& InInSandboxName);
	class FString ConvertRelativePathToFull(const class FString& InInPath, const class FString& InInBasePath);
	class FString ConvertFromSandboxPath(const class FString& InInPath, const class FString& InInSandboxName);
	class FString Combine(TArray<class FString>& InInPaths);
	bool CollapseRelativeDirectories(const class FString& InInPath, class FString* InOutPath);
	class FString CloudDir();
	class FString ChangeExtension(const class FString& InInPath, const class FString& InInNewExtension);
	class FString BugItDir();
	class FString AutomationTransientDir();
	class FString AutomationLogDir();
	class FString AutomationDir();
};

// 0xD0 (0x290 - 0x1C0)
// Class Engine.PlatformGameInstance
class UPlatformGameInstance : public UGameInstance
{
public:
	FMulticastInlineDelegateProperty_            ApplicationWillDeactivateDelegate;                 // 0x1C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationHasReactivatedDelegate;                 // 0x1D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationWillEnterBackgroundDelegate;            // 0x1E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationHasEnteredForegroundDelegate;           // 0x1F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationWillTerminateDelegate;                  // 0x200(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationShouldUnloadResourcesDelegate;          // 0x210(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationReceivedStartupArgumentsDelegate;       // 0x220(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationRegisteredForRemoteNotificationsDelegate; // 0x230(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationRegisteredForUserNotificationsDelegate; // 0x240(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x250(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationReceivedRemoteNotificationDelegate;     // 0x260(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationReceivedLocalNotificationDelegate;      // 0x270(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x280(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlatformGameInstance");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintPlatformLibrary
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintPlatformLibrary");
		return Clss;
	}

	void SetAllowedDeviceOrientation(enum class EScreenOrientation InNewAllowedDeviceOrientation);
	int32 ScheduleLocalNotificationFromNow(int32 InInSecondsFromNow, class FText& InTitle, class FText& InBody, class FText& InAction, const class FString& InActivationEvent);
	void ScheduleLocalNotificationBadgeFromNow(int32 InInSecondsFromNow, const class FString& InActivationEvent);
	int32 ScheduleLocalNotificationBadgeAtTime(struct FDateTime& InFireDateTime, bool InLocalTime, const class FString& InActivationEvent);
	int32 ScheduleLocalNotificationAtTime(struct FDateTime& InFireDateTime, bool InLocalTime, class FText& InTitle, class FText& InBody, class FText& InAction, const class FString& InActivationEvent);
	void GetLaunchNotification(bool* InNotificationLaunchedApp, class FString* InActivationEvent, int32* InFireDate);
	enum class EScreenOrientation GetDeviceOrientation();
	enum class EScreenOrientation GetAllowedDeviceOrientation();
	void ClearAllLocalNotifications();
	void CancelLocalNotificationById(int32 InNotificationId);
	void CancelLocalNotification(const class FString& InActivationEvent);
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintTypeConversions
class UBlueprintTypeConversions : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintTypeConversions");
		return Clss;
	}

	TSet<int32> ConvertSetType(TSet<int32>& InInset);
	TMap<int32, int32> ConvertMapType(TMap<int32, int32>& InInMap);
	int32 ConvertFVector4fToFVector4d(int32 InInFromData);
	int32 ConvertFVector4dToFVector4f(int32 InInFromData);
	int32 ConvertFVector3fToFVector3d(int32 InInFromData);
	int32 ConvertFVector3dToFVector3f(int32 InInFromData);
	int32 ConvertFVector2fToFVector2d(int32 InInFromData);
	int32 ConvertFVector2dToFVector2f(int32 InInFromData);
	int32 ConvertFTransform3fToFTransform3d(int32 InInFromData);
	int32 ConvertFTransform3dToFTransform3f(int32 InInFromData);
	int32 ConvertFRotator3fToFRotator3d(int32 InInFromData);
	int32 ConvertFRotator3dToFRotator3f(int32 InInFromData);
	int32 ConvertFQuat4fToFQuat4d(int32 InInFromData);
	int32 ConvertFQuat4dToFQuat4f(int32 InInFromData);
	int32 ConvertFPlane4fToFPlane4d(int32 InInFromData);
	int32 ConvertFPlane4dToFPlane4f(int32 InInFromData);
	int32 ConvertFMatrix44fToFMatrix44d(int32 InInFromData);
	int32 ConvertFMatrix44dToFMatrix44f(int32 InInFromData);
	int32 ConvertFBox2fToFBox2d(int32 InInFromData);
	int32 ConvertFBox2dToFBox2f(int32 InInFromData);
	TArray<int32> ConvertArrayType(TArray<int32>& InInArray);
};

// 0x0 (0x28 - 0x28)
// Class Engine.ImportanceSamplingLibrary
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ImportanceSamplingLibrary");
		return Clss;
	}

	float RandomSobolFloat(int32 InIndex, int32 InDimension, float InSeed);
	struct FVector RandomSobolCell3D(int32 InIndex, int32 InNumCells, const struct FVector& InCell, const struct FVector& InSeed);
	struct FVector2D RandomSobolCell2D(int32 InIndex, int32 InNumCells, const struct FVector2D& InCell, const struct FVector2D& InSeed);
	float NextSobolFloat(int32 InIndex, int32 InDimension, float InPreviousValue);
	struct FVector NextSobolCell3D(int32 InIndex, int32 InNumCells, const struct FVector& InPreviousValue);
	struct FVector2D NextSobolCell2D(int32 InIndex, int32 InNumCells, const struct FVector2D& InPreviousValue);
	struct FImportanceTexture MakeImportanceTexture(class UTexture2D* InTexture, enum class EImportanceWeight InWeightingFunc);
	void ImportanceSample(struct FImportanceTexture& InTexture, struct FVector2D& InRand, int32 InSamples, float InIntensity, struct FVector2D* InSamplePosition, struct FLinearColor* InSampleColor, float* InSampleIntensity, float* InSampleSize);
	void BreakImportanceTexture(struct FImportanceTexture& InImportanceTexture, class UTexture2D** InTexture, enum class EImportanceWeight* InWeightingFunc);
};

// 0x20 (0x48 - 0x28)
// Class Engine.Layer
class ULayer : public UObject
{
public:
	class FName                                  LayerName;                                         // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bIsVisible : 1;                                    // Mask: 0x1, PropSize: 0x10x30(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_1AC : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_36F3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLayerActorStats>              ActorStats;                                        // 0x38(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Layer");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.LevelPartitionInterface
class ILevelPartitionInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelPartitionInterface");
		return Clss;
	}

};

// 0x50 (0x78 - 0x28)
// Class Engine.ActorContainer
class UActorContainer : public UObject
{
public:
	TMap<class FName, class AActor*>             Actors;                                            // 0x28(0x50)(UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorContainer");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.LevelActorContainer
class ULevelActorContainer : public UObject
{
public:
	TArray<class AActor*>                        Actors;                                            // 0x28(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelActorContainer");
		return Clss;
	}

};

// 0x10 (0x2A0 - 0x290)
// Class Engine.LevelBounds
class ALevelBounds : public AActor
{
public:
	class UBoxComponent*                         BoxComponent;                                      // 0x290(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAutoUpdateBounds;                                 // 0x298(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_36F4[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelBounds");
		return Clss;
	}

};

// 0x90 (0x320 - 0x290)
// Class Engine.LevelInstance
class ALevelInstance : public AActor
{
public:
	uint8                                        Pad_36F5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UWorld>                 CookedWorldAsset;                                  // 0x298(0x30)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                 LevelInstanceSpawnGuid;                            // 0x2C8(0x10)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_36F6[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelInstance");
		return Clss;
	}

	void OnRep_LevelInstanceSpawnGuid();
};

// 0x0 (0x2A0 - 0x2A0)
// Class Engine.LevelInstanceComponent
class ULevelInstanceComponent : public USceneComponent
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelInstanceComponent");
		return Clss;
	}

};

// 0x0 (0x290 - 0x290)
// Class Engine.LevelInstanceEditorInstanceActor
class ALevelInstanceEditorInstanceActor : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelInstanceEditorInstanceActor");
		return Clss;
	}

};

// 0x0 (0x1B0 - 0x1B0)
// Class Engine.LevelStreamingLevelInstanceEditor
class ULevelStreamingLevelInstanceEditor : public ULevelStreamingAlwaysLoaded
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreamingLevelInstanceEditor");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.LevelInstanceEditorObject
class ULevelInstanceEditorObject : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelInstanceEditorObject");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.LevelInstancePivot
class ALevelInstancePivot : public AActor
{
public:
	uint8                                        Pad_36F7[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelInstancePivot");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.LevelInstanceInterface
class ILevelInstanceInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelInstanceInterface");
		return Clss;
	}

};

// 0x20 (0x1D0 - 0x1B0)
// Class Engine.LevelStreamingLevelInstance
class ULevelStreamingLevelInstance : public ULevelStreamingDynamic
{
public:
	uint8                                        Pad_36F8[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreamingLevelInstance");
		return Clss;
	}

};

// 0x190 (0x1C0 - 0x30)
// Class Engine.LevelInstanceSubsystem
class ULevelInstanceSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_36F9[0x190];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelInstanceSubsystem");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.LevelScriptActor
class ALevelScriptActor : public AActor
{
public:
	uint8                                        bInputEnabled : 1;                                 // Mask: 0x1, PropSize: 0x10x290(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_36FC[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelScriptActor");
		return Clss;
	}

	void WorldOriginLocationChanged(const struct FIntVector& InOldOriginLocation, const struct FIntVector& InNewOriginLocation);
	void SetCinematicMode(bool InbCinematicMode, bool InbHidePlayer, bool InbAffectsHUD, bool InbAffectsMovement, bool InbAffectsTurning);
	bool RemoteEvent(class FName InEventName);
	void LevelReset();
};

// 0x0 (0xA8 - 0xA8)
// Class Engine.LevelScriptBlueprint
class ULevelScriptBlueprint : public UBlueprint
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelScriptBlueprint");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.LightmappedSurfaceCollection
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                SourceModel;                                       // 0x28(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                Surfaces;                                          // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmappedSurfaceCollection");
		return Clss;
	}

};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.LightmassCharacterIndirectDetailVolume
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmassCharacterIndirectDetailVolume");
		return Clss;
	}

};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.LightmassImportanceVolume
class ALightmassImportanceVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmassImportanceVolume");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.LightmassPrimitiveSettingsObject
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings           LightmassSettings;                                 // 0x28(0x18)(Edit, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmassPrimitiveSettingsObject");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.LightWeightInstanceBlueprintFunctionLibrary
class ULightWeightInstanceBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightWeightInstanceBlueprintFunctionLibrary");
		return Clss;
	}

	struct FActorInstanceHandle CreateNewLightWeightInstance(class UClass* InActorClass, const struct FTransform& InTransform, class UDataLayerInstance* InLayer, class UWorld* InWorld);
	struct FActorInstanceHandle ConvertActorToLightWeightInstance(class AActor* InActor);
};

// 0x20 (0x48 - 0x28)
// Class Engine.ActorInstanceHandleInterface
class UActorInstanceHandleInterface : public UObject
{
public:
	uint8                                        Pad_3701[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorInstanceHandleInterface");
		return Clss;
	}

};

// 0xA0 (0x330 - 0x290)
// Class Engine.LightWeightInstanceManager
class ALightWeightInstanceManager : public AActor
{
public:
	uint8                                        Pad_3702[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AActor>                    RepresentedClass;                                  // 0x2A0(0x8)(Edit, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                    AcceptedClass;                                     // 0x2A8(0x8)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                    InstanceTransforms;                                // 0x2B0(0x10)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_3703[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                FreeIndices;                                       // 0x310(0x10)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<bool>                                 ValidIndices;                                      // 0x320(0x10)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightWeightInstanceManager");
		return Clss;
	}

	void OnRep_Transforms();
};

// 0x70 (0x3A0 - 0x330)
// Class Engine.LightWeightInstanceStaticMeshManager
class ALightWeightInstanceStaticMeshManager : public ALightWeightInstanceManager
{
public:
	uint8                                        Pad_3704[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UStaticMesh>            StaticMesh;                                        // 0x338(0x30)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, RepNotify, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHierarchicalInstancedStaticMeshComponent* InstancedStaticMeshComponent;                      // 0x368(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, AdvancedDisplay, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                RenderingIndicesToDataIndices;                     // 0x370(0x10)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                DataIndicesToRenderingIndices;                     // 0x380(0x10)(Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_3706[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightWeightInstanceStaticMeshManager");
		return Clss;
	}

	void OnRep_StaticMesh();
};

// 0x10 (0x2D8 - 0x2C8)
// Class Engine.LocationVolume
class ALocationVolume : public AVolume
{
public:
	uint8                                        Pad_3707[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                DebugColor;                                        // 0x2D0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsRuntime : 1;                                    // Mask: 0x1, PropSize: 0x10x2D4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3708[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LocationVolume");
		return Clss;
	}

	void Unload();
	void Load();
	bool IsLoaded();
};

// 0x88 (0x318 - 0x290)
// Class Engine.LODActor
class ALODActor : public AActor
{
public:
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x290(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FHLODInstancingKey, class UInstancedStaticMeshComponent*> InstancedStaticMeshComponents;                     // 0x298(0x50)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UHLODProxy*                            Proxy;                                             // 0x2E8(0x8)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  Key;                                               // 0x2F0(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LODDrawDistance;                                   // 0x2F8(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        LODLevel;                                          // 0x2FC(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        SubActors;                                         // 0x300(0x10)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        CachedNumHLODLevels;                               // 0x310(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_370C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LODActor");
		return Clss;
	}

	void OnSubActorEndPlay(class AActor* InActor, enum class EEndPlayReason InReason);
};

// 0x10 (0x2A0 - 0x290)
// Class Engine.MaterialInstanceActor
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                        TargetActors;                                      // 0x290(0x10)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInstanceActor");
		return Clss;
	}

};

// 0xA0 (0xE0 - 0x40)
// Class Engine.MaterialInstanceEditorOnlyData
class UMaterialInstanceEditorOnlyData : public UMaterialInterfaceEditorOnlyData
{
public:
	struct FStaticParameterSetEditorOnlyData     StaticParameters;                                  // 0x40(0xA0)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInstanceEditorOnlyData");
		return Clss;
	}

};

// 0x50 (0x248 - 0x1F8)
// Class Engine.MaterialInstanceDynamic
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:
	uint8                                        Pad_3718[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInstanceDynamic");
		return Clss;
	}

	void SetVectorParameterValueByInfo(struct FMaterialParameterInfo& InParameterInfo, const struct FLinearColor& InValue);
	void SetVectorParameterValue(class FName InParameterName, const struct FLinearColor& InValue);
	void SetTextureParameterValueByInfo(struct FMaterialParameterInfo& InParameterInfo, class UTexture* InValue);
	void SetTextureParameterValue(class FName InParameterName, class UTexture* InValue);
	void SetScalarParameterValueByInfo(struct FMaterialParameterInfo& InParameterInfo, float InValue);
	void SetScalarParameterValue(class FName InParameterName, float InValue);
	bool SetScalarParameterByIndex(int32 InParameterIndex, float InValue);
	void SetRuntimeVirtualTextureParameterValueByInfo(struct FMaterialParameterInfo& InParameterInfo, class URuntimeVirtualTexture* InValue);
	void SetRuntimeVirtualTextureParameterValue(class FName InParameterName, class URuntimeVirtualTexture* InValue);
	void SetDoubleVectorParameterValue(class FName InParameterName, const struct FVector4& InValue);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* InSourceA, class UMaterialInstance* InSourceB, float InAlpha);
	struct FLinearColor K2_GetVectorParameterValueByInfo(struct FMaterialParameterInfo& InParameterInfo);
	struct FLinearColor K2_GetVectorParameterValue(class FName InParameterName);
	class UTexture* K2_GetTextureParameterValueByInfo(struct FMaterialParameterInfo& InParameterInfo);
	class UTexture* K2_GetTextureParameterValue(class FName InParameterName);
	float K2_GetScalarParameterValueByInfo(struct FMaterialParameterInfo& InParameterInfo);
	float K2_GetScalarParameterValue(class FName InParameterName);
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* InSource, bool InbQuickParametersOnly);
	bool InitializeScalarParameterAndGetIndex(class FName& InParameterName, float InValue, int32* InOutParameterIndex);
	void CopyParameterOverrides(class UMaterialInstance* InMaterialInstance);
	void CopyInterpParameters(class UMaterialInstance* InSource);
};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.MeshMergeCullingVolume
class AMeshMergeCullingVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshMergeCullingVolume");
		return Clss;
	}

};

// 0x10 (0x48 - 0x38)
// Class Engine.MeshSimplificationSettings
class UMeshSimplificationSettings : public UDeveloperSettings
{
public:
	class FName                                  MeshReductionModuleName;                           // 0x38(0x8)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMeshReductionBackwardCompatible;                  // 0x40(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_371A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshSimplificationSettings");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.MeshVertexPainterKismetLibrary
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshVertexPainterKismetLibrary");
		return Clss;
	}

	void RemovePaintedVertices(class UStaticMeshComponent* InStaticMeshComponent);
	void PaintVerticesSingleColor(class UStaticMeshComponent* InStaticMeshComponent, struct FLinearColor& InFillColor, bool InbConvertToSRGB);
	void PaintVerticesLerpAlongAxis(class UStaticMeshComponent* InStaticMeshComponent, struct FLinearColor& InStartColor, struct FLinearColor& InEndColor, enum class EVertexPaintAxis InAxis, bool InbConvertToSRGB);
};

// 0x248 (0x270 - 0x28)
// Class Engine.Model
class UModel : public UObject
{
public:
	uint8                                        Pad_3725[0x248];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Model");
		return Clss;
	}

};

// 0x28 (0x2B8 - 0x290)
// Class Engine.NavigationObjectBase
class ANavigationObjectBase : public AActor
{
public:
	uint8                                        Pad_3726[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCapsuleComponent*                     CapsuleComponent;                                  // 0x298(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                   GoodSprite;                                        // 0x2A0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                   BadSprite;                                         // 0x2A8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bIsPIEPlayerStart : 1;                             // Mask: 0x1, PropSize: 0x10x2B0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3727[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationObjectBase");
		return Clss;
	}

};

// 0x8 (0x3310 - 0x3308)
// Class Engine.SimulatedClientNetConnection
class USimulatedClientNetConnection : public UNetConnection
{
public:
	uint8                                        Pad_3729[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SimulatedClientNetConnection");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.NetworkSettings
class UNetworkSettings : public UDeveloperSettings
{
public:
	uint8                                        bVerifyPeer : 1;                                   // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMultiplayerWorldOriginRebasing : 1;         // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1AD : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_372C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles;                          // 0x40(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetworkSettings");
		return Clss;
	}

};

// 0x20 (0x2B0 - 0x290)
// Class Engine.BandwidthTestActor
class ABandwidthTestActor : public AActor
{
public:
	struct FBandwidthTestGenerator               BandwidthGenerator;                                // 0x290(0x20)(Net, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BandwidthTestActor");
		return Clss;
	}

};

// 0x0 (0x88 - 0x88)
// Class Engine.NetFaultConfig
class UNetFaultConfig : public UEscalationManagerConfig
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetFaultConfig");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NetPushModelHelpers
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetPushModelHelpers");
		return Clss;
	}

	void MarkPropertyDirtyFromRepIndex(class UObject* InObject, int32 InRepIndex, class FName InPropertyName);
	void MarkPropertyDirty(class UObject* InObject, class FName InPropertyName);
};

// 0x60 (0x88 - 0x28)
// Class Engine.RPCDoSDetectionConfig
class URPCDoSDetectionConfig : public UObject
{
public:
	bool                                         bRPCDoSDetection;                                  // 0x28(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRPCDoSAnalytics;                                  // 0x29(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3735[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        HitchTimeQuotaMS;                                  // 0x2C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        HitchSuspendDetectionTimeMS;                       // 0x30(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3737[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        DetectionSeverity;                                 // 0x38(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                        InitialConnectToleranceMS;                         // 0x48(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3738[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          RPCBlockWhitelist;                                 // 0x50(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                          RPCBlockAllowlist;                                 // 0x60(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FRPCAnalyticsThreshold>        RPCAnalyticsThresholds;                            // 0x70(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	double                                       RPCAnalyticsOverrideChance;                        // 0x80(0x8)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RPCDoSDetectionConfig");
		return Clss;
	}

};

// 0x50 (0x80 - 0x30)
// Class Engine.NetworkSubsystem
class UNetworkSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_3739[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetworkSubsystem");
		return Clss;
	}

};

// 0x0 (0x290 - 0x290)
// Class Engine.Note
class ANote : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Note");
		return Clss;
	}

};

// 0x80 (0xA8 - 0x28)
// Class Engine.ObjectLibrary
class UObjectLibrary : public UObject
{
public:
	TSubclassOf<class UObject>                   ObjectBaseClass;                                   // 0x28(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasBlueprintClasses;                              // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_373A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       Objects;                                           // 0x38(0x10)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UObject>>        WeakObjects;                                       // 0x48(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                         bUseWeakReferences;                                // 0x58(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsFullyLoaded;                                    // 0x59(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_373B[0x4E];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ObjectLibrary");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.ObjectReferencer
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                       ReferencedObjects;                                 // 0x28(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ObjectReferencer");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ObjectTraceWorldSubsystem
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_373C[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ObjectTraceWorldSubsystem");
		return Clss;
	}

};

// 0x328 (0x408 - 0xE0)
// Class Engine.PackageMapClient
class UPackageMapClient : public UPackageMap
{
public:
	uint8                                        Pad_373D[0x328];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PackageMapClient");
		return Clss;
	}

};

// 0x0 (0x320 - 0x320)
// Class Engine.PackedLevelActor
class APackedLevelActor : public ALevelInstance
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PackedLevelActor");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineHandlerComponentFactory
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineHandlerComponentFactory");
		return Clss;
	}

};

// 0x28 (0x300 - 0x2D8)
// Class Engine.PainCausingVolume
class APainCausingVolume : public APhysicsVolume
{
public:
	uint8                                        bPainCausing : 1;                                  // Mask: 0x1, PropSize: 0x10x2D8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1AE : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_373F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DamagePerSec;                                      // 0x2DC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               DamageType;                                        // 0x2E0(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PainInterval;                                      // 0x2E8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEntryPain : 1;                                    // Mask: 0x1, PropSize: 0x10x2EC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BACKUP_bPainCausing : 1;                           // Mask: 0x2, PropSize: 0x10x2EC(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1AF : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3740[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AController*                           DamageInstigator;                                  // 0x2F0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3741[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PainCausingVolume");
		return Clss;
	}

};

// 0x0 (0x290 - 0x290)
// Class Engine.ParticleEventManager
class AParticleEventManager : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleEventManager");
		return Clss;
	}

};

// 0x28 (0xC8 - 0xA0)
// Class Engine.AsyncPhysicsInputComponent
class UAsyncPhysicsInputComponent : public UActorComponent
{
public:
	TSubclassOf<class UAsyncPhysicsData>         DataClass;                                         // 0xA0(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAsyncPhysicsData*>             BufferedData;                                      // 0xA8(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UAsyncPhysicsData*                     DataToConsume;                                     // 0xB8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAsyncPhysicsData*                     DataToWrite;                                       // 0xC0(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AsyncPhysicsInputComponent");
		return Clss;
	}

	void ServerRPCBufferInput(class UAsyncPhysicsData* InAsyncPhysicsData);
	class UAsyncPhysicsData* GetDataToWrite();
	class UAsyncPhysicsData* GetDataToConsume();
};

// 0x2B8 (0x2F0 - 0x38)
// Class Engine.BodySetup
class UBodySetup : public UBodySetupCore
{
public:
	struct FKAggregateGeom                       AggGeom;                                           // 0x38(0x68)(Edit, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysFullAnimWeight : 1;                         // Mask: 0x1, PropSize: 0x10xA0(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bConsiderForBounds : 1;                            // Mask: 0x2, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMeshCollideAll : 1;                               // Mask: 0x4, PropSize: 0x10xA0(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDoubleSidedGeometry : 1;                          // Mask: 0x8, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateNonMirroredCollision : 1;                 // Mask: 0x10, PropSize: 0x10xA0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSharedCookedData : 1;                             // Mask: 0x20, PropSize: 0x10xA0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateMirroredCollision : 1;                    // Mask: 0x40, PropSize: 0x10xA0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportUVsAndFaceRemap : 1;                       // Mask: 0x80, PropSize: 0x10xA0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1B0 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNeverNeedsCookedCollisionData : 1;                // Mask: 0x8, PropSize: 0x10xA1(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1B1 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3743[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicalMaterial*                     PhysMaterial;                                      // 0xA8(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWalkableSlopeOverride                WalkableSlopeOverride;                             // 0xB0(0x10)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                        Pad_3744[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBodyInstance                         DefaultInstance;                                   // 0x130(0x190)(Edit, NativeAccessSpecifierPublic)
	uint8                                        Pad_3745[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               BuildScale3D;                                      // 0x2C8(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3746[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BodySetup");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ConstraintInstanceBlueprintLibrary
class UConstraintInstanceBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ConstraintInstanceBlueprintLibrary");
		return Clss;
	}

	void SetProjectionParams(struct FConstraintInstanceAccessor& InAccessor, bool InbEnableProjection, float InProjectionLinearAlpha, float InProjectionAngularAlpha);
	void SetParentDominates(struct FConstraintInstanceAccessor& InAccessor, bool InbParentDominates);
	void SetOrientationDriveTwistAndSwing(struct FConstraintInstanceAccessor& InAccessor, bool InbEnableTwistDrive, bool InbEnableSwingDrive);
	void SetOrientationDriveSLERP(struct FConstraintInstanceAccessor& InAccessor, bool InbEnableSLERP);
	void SetLinearVelocityTarget(struct FConstraintInstanceAccessor& InAccessor, struct FVector& InInVelTarget);
	void SetLinearVelocityDrive(struct FConstraintInstanceAccessor& InAccessor, bool InbEnableDriveX, bool InbEnableDriveY, bool InbEnableDriveZ);
	void SetLinearSoftLimitParams(struct FConstraintInstanceAccessor& InAccessor, bool InbSoftLinearLimit, float InLinearLimitStiffness, float InLinearLimitDamping, float InLinearLimitRestitution, float InLinearLimitContactDistance);
	void SetLinearPositionTarget(struct FConstraintInstanceAccessor& InAccessor, struct FVector& InInPosTarget);
	void SetLinearPositionDrive(struct FConstraintInstanceAccessor& InAccessor, bool InbEnableDriveX, bool InbEnableDriveY, bool InbEnableDriveZ);
	void SetLinearPlasticity(struct FConstraintInstanceAccessor& InAccessor, bool InbLinearPlasticity, float InLinearPlasticityThreshold, enum class EConstraintPlasticityType InPlasticityType);
	void SetLinearLimits(struct FConstraintInstanceAccessor& InAccessor, enum class ELinearConstraintMotion InXMotion, enum class ELinearConstraintMotion InYMotion, enum class ELinearConstraintMotion InZMotion, float InLimit);
	void SetLinearDriveParams(struct FConstraintInstanceAccessor& InAccessor, float InPositionStrength, float InVelocityStrength, float InInForceLimit);
	void SetLinearBreakable(struct FConstraintInstanceAccessor& InAccessor, bool InbLinearBreakable, float InLinearBreakThreshold);
	void SetDisableCollision(struct FConstraintInstanceAccessor& InAccessor, bool InbDisableCollision);
	void SetContactTransferScale(struct FConstraintInstanceAccessor& InAccessor, float InContactTransferScale);
	void SetAngularVelocityTarget(struct FConstraintInstanceAccessor& InAccessor, struct FVector& InInVelTarget);
	void SetAngularVelocityDriveTwistAndSwing(struct FConstraintInstanceAccessor& InAccessor, bool InbEnableTwistDrive, bool InbEnableSwingDrive);
	void SetAngularVelocityDriveSLERP(struct FConstraintInstanceAccessor& InAccessor, bool InbEnableSLERP);
	void SetAngularSoftTwistLimitParams(struct FConstraintInstanceAccessor& InAccessor, bool InbSoftTwistLimit, float InTwistLimitStiffness, float InTwistLimitDamping, float InTwistLimitRestitution, float InTwistLimitContactDistance);
	void SetAngularSoftSwingLimitParams(struct FConstraintInstanceAccessor& InAccessor, bool InbSoftSwingLimit, float InSwingLimitStiffness, float InSwingLimitDamping, float InSwingLimitRestitution, float InSwingLimitContactDistance);
	void SetAngularPlasticity(struct FConstraintInstanceAccessor& InAccessor, bool InbAngularPlasticity, float InAngularPlasticityThreshold);
	void SetAngularOrientationTarget(struct FConstraintInstanceAccessor& InAccessor, struct FRotator& InInPosTarget);
	void SetAngularLimits(struct FConstraintInstanceAccessor& InAccessor, enum class EAngularConstraintMotion InSwing1MotionType, float InSwing1LimitAngle, enum class EAngularConstraintMotion InSwing2MotionType, float InSwing2LimitAngle, enum class EAngularConstraintMotion InTwistMotionType, float InTwistLimitAngle);
	void SetAngularDriveParams(struct FConstraintInstanceAccessor& InAccessor, float InPositionStrength, float InVelocityStrength, float InInForceLimit);
	void SetAngularDriveMode(struct FConstraintInstanceAccessor& InAccessor, enum class EAngularDriveMode InDriveMode);
	void SetAngularBreakable(struct FConstraintInstanceAccessor& InAccessor, bool InbAngularBreakable, float InAngularBreakThreshold);
	void GetProjectionParams(struct FConstraintInstanceAccessor& InAccessor, bool* InbEnableProjection, float* InProjectionLinearAlpha, float* InProjectionAngularAlpha);
	bool GetParentDominates(struct FConstraintInstanceAccessor& InAccessor);
	void GetOrientationDriveTwistAndSwing(struct FConstraintInstanceAccessor& InAccessor, bool* InbOutEnableTwistDrive, bool* InbOutEnableSwingDrive);
	void GetOrientationDriveSLERP(struct FConstraintInstanceAccessor& InAccessor, bool* InbOutEnableSLERP);
	void GetLinearVelocityTarget(struct FConstraintInstanceAccessor& InAccessor, struct FVector* InOutVelTarget);
	void GetLinearVelocityDrive(struct FConstraintInstanceAccessor& InAccessor, bool* InbOutEnableDriveX, bool* InbOutEnableDriveY, bool* InbOutEnableDriveZ);
	void GetLinearSoftLimitParams(struct FConstraintInstanceAccessor& InAccessor, bool* InbSoftLinearLimit, float* InLinearLimitStiffness, float* InLinearLimitDamping, float* InLinearLimitRestitution, float* InLinearLimitContactDistance);
	void GetLinearPositionTarget(struct FConstraintInstanceAccessor& InAccessor, struct FVector* InOutPosTarget);
	void GetLinearPositionDrive(struct FConstraintInstanceAccessor& InAccessor, bool* InbOutEnableDriveX, bool* InbOutEnableDriveY, bool* InbOutEnableDriveZ);
	void GetLinearPlasticity(struct FConstraintInstanceAccessor& InAccessor, bool* InbLinearPlasticity, float* InLinearPlasticityThreshold, enum class EConstraintPlasticityType* InPlasticityType);
	void GetLinearLimits(struct FConstraintInstanceAccessor& InAccessor, enum class ELinearConstraintMotion* InXMotion, enum class ELinearConstraintMotion* InYMotion, enum class ELinearConstraintMotion* InZMotion, float* InLimit);
	void GetLinearDriveParams(struct FConstraintInstanceAccessor& InAccessor, float* InOutPositionStrength, float* InOutVelocityStrength, float* InOutForceLimit);
	void GetLinearBreakable(struct FConstraintInstanceAccessor& InAccessor, bool* InbLinearBreakable, float* InLinearBreakThreshold);
	bool GetDisableCollsion(struct FConstraintInstanceAccessor& InAccessor);
	void GetContactTransferScale(struct FConstraintInstanceAccessor& InAccessor, float* InContactTransferScale);
	void GetAttachedBodyNames(struct FConstraintInstanceAccessor& InAccessor, class FName* InParentBody, class FName* InChildBody);
	void GetAngularVelocityTarget(struct FConstraintInstanceAccessor& InAccessor, struct FVector* InOutVelTarget);
	void GetAngularVelocityDriveTwistAndSwing(struct FConstraintInstanceAccessor& InAccessor, bool* InbOutEnableTwistDrive, bool* InbOutEnableSwingDrive);
	void GetAngularVelocityDriveSLERP(struct FConstraintInstanceAccessor& InAccessor, bool* InbOutEnableSLERP);
	void GetAngularSoftTwistLimitParams(struct FConstraintInstanceAccessor& InAccessor, bool* InbSoftTwistLimit, float* InTwistLimitStiffness, float* InTwistLimitDamping, float* InTwistLimitRestitution, float* InTwistLimitContactDistance);
	void GetAngularSoftSwingLimitParams(struct FConstraintInstanceAccessor& InAccessor, bool* InbSoftSwingLimit, float* InSwingLimitStiffness, float* InSwingLimitDamping, float* InSwingLimitRestitution, float* InSwingLimitContactDistance);
	void GetAngularPlasticity(struct FConstraintInstanceAccessor& InAccessor, bool* InbAngularPlasticity, float* InAngularPlasticityThreshold);
	void GetAngularOrientationTarget(struct FConstraintInstanceAccessor& InAccessor, struct FRotator* InOutPosTarget);
	void GetAngularLimits(struct FConstraintInstanceAccessor& InAccessor, enum class EAngularConstraintMotion* InSwing1MotionType, float* InSwing1LimitAngle, enum class EAngularConstraintMotion* InSwing2MotionType, float* InSwing2LimitAngle, enum class EAngularConstraintMotion* InTwistMotionType, float* InTwistLimitAngle);
	void GetAngularDriveParams(struct FConstraintInstanceAccessor& InAccessor, float* InOutPositionStrength, float* InOutVelocityStrength, float* InOutForceLimit);
	void GetAngularDriveMode(struct FConstraintInstanceAccessor& InAccessor, enum class EAngularDriveMode* InOutDriveMode);
	void GetAngularBreakable(struct FConstraintInstanceAccessor& InAccessor, bool* InbAngularBreakable, float* InAngularBreakThreshold);
	void CopyParams(struct FConstraintInstanceAccessor& InAccessor, struct FConstraintInstanceAccessor& InSourceAccessor, bool InbKeepPosition, bool InbKeepRotation);
};

// 0x40 (0xE0 - 0xA0)
// Class Engine.PhysicalAnimationComponent
class UPhysicalAnimationComponent : public UActorComponent
{
public:
	float                                        StrengthMultiplyer;                                // 0xA0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37A5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                SkeletalMeshComponent;                             // 0xA8(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_37A6[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicalAnimationComponent");
		return Clss;
	}

	void SetStrengthMultiplyer(float InInStrengthMultiplyer);
	void SetSkeletalMeshComponent(class USkeletalMeshComponent* InInSkeletalMeshComponent);
	struct FTransform GetBodyTargetTransform(class FName InBodyName);
	void ApplyPhysicalAnimationSettingsBelow(class FName InBodyName, struct FPhysicalAnimationData& InPhysicalAnimationData, bool InbIncludeSelf);
	void ApplyPhysicalAnimationSettings(class FName InBodyName, struct FPhysicalAnimationData& InPhysicalAnimationData);
	void ApplyPhysicalAnimationProfileBelow(class FName InBodyName, class FName InProfileName, bool InbIncludeSelf, bool InbClearNotFound);
};

// 0x10 (0x38 - 0x28)
// Class Engine.PhysicalMaterialMask
class UPhysicalMaterialMask : public UObject
{
public:
	int32                                        UVChannelIndex;                                    // 0x28(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   AddressX;                                          // 0x2C(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   AddressY;                                          // 0x2D(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37A7[0xA];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicalMaterialMask");
		return Clss;
	}

};

// 0x128 (0x150 - 0x28)
// Class Engine.PhysicsAsset
class UPhysicsAsset : public UObject
{
public:
	uint8                                        Pad_37A8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                BoundsBodies;                                      // 0x30(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USkeletalBodySetup*>            SkeletalBodySetups;                                // 0x40(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UPhysicsConstraintTemplate*>    ConstraintSetup;                                   // 0x50(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FPhysicsAssetSolverSettings           SolverSettings;                                    // 0x60(0x1C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FSolverIterations                     SolverIterations;                                  // 0x7C(0x18)(Edit, Config, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	enum class EPhysicsAssetSolverType           SolverType;                                        // 0x94(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNotForDedicatedServer : 1;                        // Mask: 0x1, PropSize: 0x10x95(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1B2 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37A9[0xA2];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UThumbnailInfo*                        ThumbnailInfo;                                     // 0x138(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBodySetup*>                    BodySetup;                                         // 0x140(0x10)(ExportObject, ZeroConstructor, Deprecated, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsAsset");
		return Clss;
	}

};

// 0x18 (0x308 - 0x2F0)
// Class Engine.SkeletalBodySetup
class USkeletalBodySetup : public UBodySetup
{
public:
	bool                                         bSkipScaleFromAnimation;                           // 0x2F0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37AA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPhysicalAnimationProfile>     PhysicalAnimationData;                             // 0x2F8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalBodySetup");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.PhysicsCollisionHandler
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                        ImpactThreshold;                                   // 0x28(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ImpactReFireDelay;                                 // 0x2C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            DefaultImpactSound;                                // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastImpactSoundTime;                               // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37AB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsCollisionHandler");
		return Clss;
	}

};

// 0x20 (0x2B0 - 0x290)
// Class Engine.PhysicsConstraintActor
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*           ConstraintComp;                                    // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                ConstraintActor1;                                  // 0x298(0x8)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                ConstraintActor2;                                  // 0x2A0(0x8)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableCollision : 1;                             // Mask: 0x1, PropSize: 0x10x2A8(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37AD[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsConstraintActor");
		return Clss;
	}

};

// 0x2D0 (0x570 - 0x2A0)
// Class Engine.PhysicsConstraintComponent
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class AActor*                                ConstraintActor1;                                  // 0x2A0(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstrainComponentPropName           ComponentName1;                                    // 0x2A8(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                ConstraintActor2;                                  // 0x2B0(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstrainComponentPropName           ComponentName2;                                    // 0x2B8(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_37D2[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicsConstraintTemplate*            ConstraintSetup;                                   // 0x2D0(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnConstraintBroken;                                // 0x2D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnPlasticDeformation;                              // 0x2E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FConstraintInstance                   ConstraintInstance;                                // 0x2F8(0x278)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsConstraintComponent");
		return Clss;
	}

	void SetOrientationDriveTwistAndSwing(bool InbEnableTwistDrive, bool InbEnableSwingDrive);
	void SetOrientationDriveSLERP(bool InbEnableSLERP);
	void SetLinearZLimit(enum class ELinearConstraintMotion InConstraintType, float InLimitSize);
	void SetLinearYLimit(enum class ELinearConstraintMotion InConstraintType, float InLimitSize);
	void SetLinearXLimit(enum class ELinearConstraintMotion InConstraintType, float InLimitSize);
	void SetLinearVelocityTarget(struct FVector& InInVelTarget);
	void SetLinearVelocityDrive(bool InbEnableDriveX, bool InbEnableDriveY, bool InbEnableDriveZ);
	void SetLinearPositionTarget(struct FVector& InInPosTarget);
	void SetLinearPositionDrive(bool InbEnableDriveX, bool InbEnableDriveY, bool InbEnableDriveZ);
	void SetLinearPlasticity(bool InbLinearPlasticity, float InLinearPlasticityThreshold, enum class EConstraintPlasticityType InPlasticityType);
	void SetLinearDriveParams(float InPositionStrength, float InVelocityStrength, float InInForceLimit);
	void SetLinearBreakable(bool InbLinearBreakable, float InLinearBreakThreshold);
	void SetDisableCollision(bool InbDisableCollision);
	void SetContactTransferScale(float InContactTransferScale);
	void SetConstraintReferencePosition(enum class EConstraintFrame InFrame, struct FVector& InRefPosition);
	void SetConstraintReferenceOrientation(enum class EConstraintFrame InFrame, struct FVector& InPriAxis, struct FVector& InSecAxis);
	void SetConstraintReferenceFrame(enum class EConstraintFrame InFrame, struct FTransform& InRefFrame);
	void SetConstrainedComponents(class UPrimitiveComponent* InComponent1, class FName InBoneName1, class UPrimitiveComponent* InComponent2, class FName InBoneName2);
	void SetAngularVelocityTarget(struct FVector& InInVelTarget);
	void SetAngularVelocityDriveTwistAndSwing(bool InbEnableTwistDrive, bool InbEnableSwingDrive);
	void SetAngularVelocityDriveSLERP(bool InbEnableSLERP);
	void SetAngularVelocityDrive(bool InbEnableSwingDrive, bool InbEnableTwistDrive);
	void SetAngularTwistLimit(enum class EAngularConstraintMotion InConstraintType, float InTwistLimitAngle);
	void SetAngularSwing2Limit(enum class EAngularConstraintMotion InMotionType, float InSwing2LimitAngle);
	void SetAngularSwing1Limit(enum class EAngularConstraintMotion InMotionType, float InSwing1LimitAngle);
	void SetAngularPlasticity(bool InbAngularPlasticity, float InAngularPlasticityThreshold);
	void SetAngularOrientationTarget(struct FRotator& InInPosTarget);
	void SetAngularOrientationDrive(bool InbEnableSwingDrive, bool InbEnableTwistDrive);
	void SetAngularDriveParams(float InPositionStrength, float InVelocityStrength, float InInForceLimit);
	void SetAngularDriveMode(enum class EAngularDriveMode InDriveMode);
	void SetAngularBreakable(bool InbAngularBreakable, float InAngularBreakThreshold);
	bool IsBroken();
	float GetCurrentTwist();
	float GetCurrentSwing2();
	float GetCurrentSwing1();
	void GetConstraintForce(struct FVector* InOutLinearForce, struct FVector* InOutAngularForce);
	struct FConstraintInstanceAccessor GetConstraint();
	void GetConstrainedComponents(class UPrimitiveComponent** InOutComponent1, class FName* InOutBoneName1, class UPrimitiveComponent** InOutComponent2, class FName* InOutBoneName2);
	void BreakConstraint();
};

// 0x3E8 (0x410 - 0x28)
// Class Engine.PhysicsConstraintTemplate
class UPhysicsConstraintTemplate : public UObject
{
public:
	struct FConstraintInstance                   DefaultInstance;                                   // 0x28(0x278)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles;                                    // 0x2A0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FConstraintProfileProperties          DefaultProfile;                                    // 0x2B0(0x160)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsConstraintTemplate");
		return Clss;
	}

};

// 0x440 (0x4E0 - 0xA0)
// Class Engine.PhysicsHandleComponent
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                   GrabbedComponent;                                  // 0xA0(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37D5[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_1B3 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bSoftAngularConstraint : 1;                        // Mask: 0x2, PropSize: 0x10xB0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSoftLinearConstraint : 1;                         // Mask: 0x4, PropSize: 0x10xB0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInterpolateTarget : 1;                            // Mask: 0x8, PropSize: 0x10xB0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1B4 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37D6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LinearDamping;                                     // 0xB4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LinearStiffness;                                   // 0xB8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngularDamping;                                    // 0xBC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngularStiffness;                                  // 0xC0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37D7[0xCC];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InterpolationSpeed;                                // 0x190(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37D8[0x34C];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsHandleComponent");
		return Clss;
	}

	void SetTargetRotation(const struct FRotator& InNewRotation);
	void SetTargetLocationAndRotation(const struct FVector& InNewLocation, const struct FRotator& InNewRotation);
	void SetTargetLocation(const struct FVector& InNewLocation);
	void SetLinearStiffness(float InNewLinearStiffness);
	void SetLinearDamping(float InNewLinearDamping);
	void SetInterpolationSpeed(float InNewInterpolationSpeed);
	void SetAngularStiffness(float InNewAngularStiffness);
	void SetAngularDamping(float InNewAngularDamping);
	void ReleaseComponent();
	void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* InComponent, class FName InInBoneName, const struct FVector& InLocation, const struct FRotator& InRotation);
	void GrabComponentAtLocation(class UPrimitiveComponent* InComponent, class FName InInBoneName, const struct FVector& InGrabLocation);
	void GrabComponent(class UPrimitiveComponent* InComponent, class FName InInBoneName, const struct FVector& InGrabLocation, bool InbConstrainRotation);
	void GetTargetLocationAndRotation(struct FVector* InTargetLocation, struct FRotator* InTargetRotation);
	class UPrimitiveComponent* GetGrabbedComponent();
};

// 0x108 (0x1E8 - 0xE0)
// Class Engine.PhysicsSettings
class UPhysicsSettings : public UPhysicsSettingsCore
{
public:
	struct FRigidBodyErrorCorrection             PhysicErrorCorrection;                             // 0xE0(0x34)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	enum class ESettingsLockedAxis               LockedAxis;                                        // 0x114(0x1)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESettingsDOF                      DefaultDegreesOfFreedom;                           // 0x115(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSuppressFaceRemapTable;                           // 0x116(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSupportUVFromHitResults;                          // 0x117(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableActiveActors;                              // 0x118(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableKinematicStaticPairs;                      // 0x119(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableKinematicKinematicPairs;                   // 0x11A(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableCCD;                                       // 0x11B(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableEnhancedDeterminism;                        // 0x11C(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37D9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AnimPhysicsMinDeltaTime;                           // 0x120(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSimulateAnimPhysicsAfterReset;                    // 0x124(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37DA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinPhysicsDeltaTime;                               // 0x128(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxPhysicsDeltaTime;                               // 0x12C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSubstepping;                                      // 0x130(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSubsteppingAsync;                                 // 0x131(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTickPhysicsAsync;                                 // 0x132(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37DB[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AsyncFixedTimeStepSize;                            // 0x134(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSubstepDeltaTime;                               // 0x138(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxSubsteps;                                       // 0x13C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SyncSceneSmoothingFactor;                          // 0x140(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialAverageFrameRate;                           // 0x144(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PhysXTreeRebuildRate;                              // 0x148(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37DC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPhysicalSurfaceName>          PhysicalSurfaces;                                  // 0x150(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FBroadphaseSettings                   DefaultBroadphaseSettings;                         // 0x160(0x80)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                        MinDeltaVelocityForHitEvents;                      // 0x1E0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChaosPhysicsSettings                 ChaosSettings;                                     // 0x1E4(0x3)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_37DD[0x1];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsSettings");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.PhysicsThruster
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*             ThrusterComponent;                                 // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsThruster");
		return Clss;
	}

};

// 0x30 (0x2D0 - 0x2A0)
// Class Engine.RadialForceComponent
class URadialForceComponent : public USceneComponent
{
public:
	float                                        Radius;                                            // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERadialImpulseFalloff             Falloff;                                           // 0x2A4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37DE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ImpulseStrength;                                   // 0x2A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImpulseVelChange : 1;                             // Mask: 0x1, PropSize: 0x10x2AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreOwningActor : 1;                            // Mask: 0x2, PropSize: 0x10x2AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1B5 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37DF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForceStrength;                                     // 0x2B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DestructibleDamage;                                // 0x2B4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<enum class EObjectTypeQuery>          ObjectTypesToAffect;                               // 0x2B8(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_37E0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RadialForceComponent");
		return Clss;
	}

	void RemoveObjectTypeToAffect(enum class EObjectTypeQuery InObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(enum class EObjectTypeQuery InObjectType);
};

// 0xA0 (0x340 - 0x2A0)
// Class Engine.PhysicsFieldComponent
class UPhysicsFieldComponent : public USceneComponent
{
public:
	uint8                                        Pad_37E2[0xA0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsFieldComponent");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.PhysicsFieldStatics
class UPhysicsFieldStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsFieldStatics");
		return Clss;
	}

	struct FVector EvalPhysicsVectorField(class UObject* InWorldContextObject, struct FVector& InWorldPosition, enum class EFieldVectorType InVectorType);
	float EvalPhysicsScalarField(class UObject* InWorldContextObject, struct FVector& InWorldPosition, enum class EFieldScalarType InScalarType);
	int32 EvalPhysicsIntegerField(class UObject* InWorldContextObject, struct FVector& InWorldPosition, enum class EFieldIntegerType InIntegerType);
};

// 0x0 (0x28 - 0x28)
// Class Engine.PlatformInputDeviceMapperLibrary
class UPlatformInputDeviceMapperLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlatformInputDeviceMapperLibrary");
		return Clss;
	}

	struct FPlatformUserId PlatformUserId_None();
	bool NotEqual_PlatformUserId(const struct FPlatformUserId& InA, const struct FPlatformUserId& InB);
	bool NotEqual_InputDeviceId(const struct FInputDeviceId& InA, const struct FInputDeviceId& InB);
	bool IsValidPlatformId(const struct FPlatformUserId& InUserId);
	bool IsValidInputDevice(const struct FInputDeviceId& InDeviceID);
	bool IsUnpairedUserId(const struct FPlatformUserId& InPlatformId);
	bool IsInputDeviceMappedToUnpairedUser(const struct FInputDeviceId& InInputDevice);
	struct FInputDeviceId InputDeviceId_None();
	struct FPlatformUserId GetUserForUnpairedInputDevices();
	struct FPlatformUserId GetUserForInputDevice(const struct FInputDeviceId& InDeviceID);
	struct FInputDeviceId GetPrimaryInputDeviceForUser(const struct FPlatformUserId& InUserId);
	enum class EInputDeviceConnectionState GetInputDeviceConnectionState(const struct FInputDeviceId& InDeviceID);
	struct FInputDeviceId GetDefaultInputDevice();
	int32 GetAllInputDevicesForUser(const struct FPlatformUserId& InUserId, TArray<struct FInputDeviceId>* InOutInputDevices);
	int32 GetAllInputDevices(TArray<struct FInputDeviceId>* InOutInputDevices);
	int32 GetAllConnectedInputDevices(TArray<struct FInputDeviceId>* InOutInputDevices);
	int32 GetAllActiveUsers(TArray<struct FPlatformUserId>* InOutUsers);
	bool EqualEqual_PlatformUserId(const struct FPlatformUserId& InA, const struct FPlatformUserId& InB);
	bool EqualEqual_InputDeviceId(const struct FInputDeviceId& InA, const struct FInputDeviceId& InB);
};

// 0x8 (0x2C0 - 0x2B8)
// Class Engine.PlayerStart
class APlayerStart : public ANavigationObjectBase
{
public:
	class FName                                  PlayerStartTag;                                    // 0x2B8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerStart");
		return Clss;
	}

};

// 0x0 (0x2C0 - 0x2C0)
// Class Engine.PlayerStartPIE
class APlayerStartPIE : public APlayerStart
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerStartPIE");
		return Clss;
	}

};

// 0x6F8 (0x9C0 - 0x2C8)
// Class Engine.PostProcessVolume
class APostProcessVolume : public AVolume
{
public:
	uint8                                        Pad_37FA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  Settings;                                          // 0x2D0(0x6E0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                        Priority;                                          // 0x9B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendRadius;                                       // 0x9B4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendWeight;                                       // 0x9B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x9BC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUnbound : 1;                                      // Mask: 0x2, PropSize: 0x10x9BC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37FB[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PostProcessVolume");
		return Clss;
	}

	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InInBlendableObject, float InInWeight);
};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.PrecomputedVisibilityVolume
class APrecomputedVisibilityVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PrecomputedVisibilityVolume");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.PrimaryAssetLabel
class UPrimaryAssetLabel : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetRules                    Rules;                                             // 0x30(0xC)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bLabelAssetsInMyDirectory : 1;                     // Mask: 0x1, PropSize: 0x10x3C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsRuntimeLabel : 1;                               // Mask: 0x2, PropSize: 0x10x3C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1B6 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_37FC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftObjectPtr<class UObject>>        ExplicitAssets;                                    // 0x40(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UObject>>         ExplicitBlueprints;                                // 0x50(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FCollectionReference                  AssetCollection;                                   // 0x60(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PrimaryAssetLabel");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.HealthSnapshotBlueprintLibrary
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HealthSnapshotBlueprintLibrary");
		return Clss;
	}

	void StopPerformanceSnapshots();
	void StartPerformanceSnapshots();
	void LogPerformanceSnapshot(const class FString& InSnapshotTitle, bool InbResetStats);
};

// 0x8 (0x40 - 0x38)
// Class Engine.ProxyLODMeshSimplificationSettings
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{
public:
	class FName                                  ProxyLODMeshReductionModuleName;                   // 0x38(0x8)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ProxyLODMeshSimplificationSettings");
		return Clss;
	}

};

// 0x8 (0x2A8 - 0x2A0)
// Class Engine.RectLight
class ARectLight : public ALight
{
public:
	class URectLightComponent*                   RectLightComponent;                                // 0x2A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RectLight");
		return Clss;
	}

};

// 0x1A0 (0x1D8 - 0x38)
// Class Engine.RendererSettings
class URendererSettings : public UDeveloperSettings
{
public:
	enum class EMobileShadingPath                MobileShadingPath;                                 // 0x38(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_37FF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bMobileSupportGPUScene : 1;                        // Mask: 0x1, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1B7 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3800[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EMobileAntiAliasingMethod         MobileAntiAliasing;                                // 0x40(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMobileFloatPrecisionMode         MobileFloatPrecisionMode;                          // 0x41(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3801[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bMobileAllowDitheredLODTransition : 1;             // Mask: 0x1, PropSize: 0x10x44(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileVirtualTextures : 1;                        // Mask: 0x2, PropSize: 0x10x44(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDiscardUnusedQualityLevels : 1;                   // Mask: 0x4, PropSize: 0x10x44(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1B8 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3802[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EShaderCompressionFormat          ShaderCompressionFormat;                           // 0x48(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3803[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOcclusionCulling : 1;                             // Mask: 0x1, PropSize: 0x10x4C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1B9 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3804[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinScreenRadiusForLights;                          // 0x50(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinScreenRadiusForEarlyZPass;                      // 0x54(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinScreenRadiusForCSMdepth;                        // 0x58(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPrecomputedVisibilityWarning : 1;                 // Mask: 0x1, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTextureStreaming : 1;                             // Mask: 0x2, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseDXT5NormalMaps : 1;                            // Mask: 0x4, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVirtualTextures : 1;                              // Mask: 0x8, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVirtualTextureEnableAutoImport : 1;               // Mask: 0x10, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVirtualTexturedLightmaps : 1;                     // Mask: 0x20, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVirtualTextureAnisotropicFiltering : 1;           // Mask: 0x40, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableVirtualTextureOpacityMask : 1;              // Mask: 0x80, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3805[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       VirtualTextureTileSize;                            // 0x60(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       VirtualTextureTileBorderSize;                      // 0x64(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       VirtualTextureFeedbackFactor;                      // 0x68(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EWorkingColorSpace                WorkingColorSpaceChoice;                           // 0x6C(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3807[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             RedChromaticityCoordinate;                         // 0x70(0x10)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             GreenChromaticityCoordinate;                       // 0x80(0x10)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             BlueChromaticityCoordinate;                        // 0x90(0x10)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             WhiteChromaticityCoordinate;                       // 0xA0(0x10)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClearCoatEnableSecondNormal : 1;                  // Mask: 0x1, PropSize: 0x10xB0(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1BA : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3808[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDynamicGlobalIlluminationMethod  DynamicGlobalIllumination;                         // 0xB4(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EReflectionMethod                 Reflections;                                       // 0xB5(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3809[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ReflectionCaptureResolution;                       // 0xB8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // Mask: 0x1, PropSize: 0x10xBC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseHardwareRayTracingForLumen : 1;                // Mask: 0x2, PropSize: 0x10xBC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1BB : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_380A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ELumenRayLightingMode             LumenRayLightingMode;                              // 0xC0(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_380C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        LumenFrontLayerTranslucencyReflections : 1;        // Mask: 0x1, PropSize: 0x10xC4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1BC : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_380D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ELumenSoftwareTracingMode         LumenSoftwareTracingMode;                          // 0xC8(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EShadowMapMethod                  ShadowMapMethod;                                   // 0xC9(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_380E[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnableRayTracing : 1;                             // Mask: 0x1, PropSize: 0x10xCC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableRayTracingShadows : 1;                      // Mask: 0x2, PropSize: 0x10xCC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableRayTracingSkylight : 1;                     // Mask: 0x4, PropSize: 0x10xCC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableRayTracingTextureLOD : 1;                   // Mask: 0x8, PropSize: 0x10xCC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnablePathTracing : 1;                            // Mask: 0x10, PropSize: 0x10xCC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateMeshDistanceFields : 1;                   // Mask: 0x20, PropSize: 0x10xCC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1BD : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_380F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DistanceFieldVoxelDensity;                         // 0xD0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNanite : 1;                                       // Mask: 0x1, PropSize: 0x10xD4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowStaticLighting : 1;                          // Mask: 0x2, PropSize: 0x10xD4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseNormalMapsForStaticLighting : 1;               // Mask: 0x4, PropSize: 0x10xD4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForwardShading : 1;                               // Mask: 0x8, PropSize: 0x10xD4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVertexFoggingForOpaque : 1;                       // Mask: 0x10, PropSize: 0x10xD4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSeparateTranslucency : 1;                         // Mask: 0x20, PropSize: 0x10xD4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1BE : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3810[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETranslucentSortPolicy            TranslucentSortPolicy;                             // 0xD8(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3811[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TranslucentSortAxis;                               // 0xE0(0x18)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFixedFoveationLevels             HMDFixedFoveationLevel;                            // 0xF8(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3812[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bHMDFixedFoveationDynamic : 1;                     // Mask: 0x1, PropSize: 0x10xFC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1BF : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3813[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ECustomDepthStencil               CustomDepthStencil;                                // 0x100(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3814[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bCustomDepthTaaJitter : 1;                         // Mask: 0x1, PropSize: 0x10x104(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1C0 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3816[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAlphaChannelMode                 bEnableAlphaChannelInPostProcessing;               // 0x108(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3817[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDefaultFeatureBloom : 1;                          // Mask: 0x1, PropSize: 0x10x10C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultFeatureAmbientOcclusion : 1;               // Mask: 0x2, PropSize: 0x10x10C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultFeatureAmbientOcclusionStaticFraction : 1; // Mask: 0x4, PropSize: 0x10x10C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultFeatureAutoExposure : 1;                   // Mask: 0x8, PropSize: 0x10x10C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1C1 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3818[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAutoExposureMethodUI             DefaultFeatureAutoExposure;                        // 0x110(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3819[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultFeatureAutoExposureBias;                    // 0x114(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // Mask: 0x1, PropSize: 0x10x118(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultFeatureMotionBlur : 1;                     // Mask: 0x2, PropSize: 0x10x118(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultFeatureLensFlare : 1;                      // Mask: 0x4, PropSize: 0x10x118(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTemporalUpsampling : 1;                           // Mask: 0x8, PropSize: 0x10x118(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1C2 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_381A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAntiAliasingMethod               DefaultFeatureAntiAliasing;                        // 0x11C(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECompositingSampleCount           MSAASampleCount;                                   // 0x11D(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ELightUnits                       DefaultLightUnits;                                 // 0x11E(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDefaultBackBufferPixelFormat     DefaultBackBufferPixelFormat;                      // 0x11F(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderUnbuiltPreviewShadowsInGame : 1;            // Mask: 0x1, PropSize: 0x10x120(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStencilForLODDither : 1;                          // Mask: 0x2, PropSize: 0x10x120(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1C3 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_381B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EEarlyZPass                       EarlyZPass;                                        // 0x124(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_381C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEarlyZPassOnlyMaterialMasking : 1;                // Mask: 0x1, PropSize: 0x10x128(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableCSMCaching : 1;                             // Mask: 0x2, PropSize: 0x10x128(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDBuffer : 1;                                      // Mask: 0x4, PropSize: 0x10x128(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1C4 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_381D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EClearSceneOptions                ClearSceneMethod;                                  // 0x12C(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVelocityOutputPass               VelocityPass;                                      // 0x12D(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVertexDeformationOutputsVelocity VertexDeformationOutputsVelocity;                  // 0x12E(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_381E[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bSelectiveBasePassOutputs : 1;                     // Mask: 0x1, PropSize: 0x10x130(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultParticleCutouts : 1;                       // Mask: 0x2, PropSize: 0x10x130(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1C5 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_381F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        GPUSimulationTextureSizeX;                         // 0x134(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        GPUSimulationTextureSizeY;                         // 0x138(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGlobalClipPlane : 1;                              // Mask: 0x1, PropSize: 0x10x13C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1C6 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3820[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EGBufferFormat                    GBufferFormat;                                     // 0x140(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3821[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseGPUMorphTargets : 1;                           // Mask: 0x1, PropSize: 0x10x144(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNvidiaAftermathEnabled : 1;                       // Mask: 0x2, PropSize: 0x10x144(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMultiView : 1;                                    // Mask: 0x4, PropSize: 0x10x144(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobilePostProcessing : 1;                         // Mask: 0x8, PropSize: 0x10x144(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileMultiView : 1;                              // Mask: 0x10, PropSize: 0x10x144(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileUseHWsRGBEncoding : 1;                      // Mask: 0x20, PropSize: 0x10x144(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRoundRobinOcclusion : 1;                          // Mask: 0x40, PropSize: 0x10x144(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMeshStreaming : 1;                                // Mask: 0x80, PropSize: 0x10x144(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableHeterogeneousVolumes : 1;                   // Mask: 0x1, PropSize: 0x10x145(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1C7 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3823[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WireframeCullThreshold;                            // 0x148(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportStationarySkylight : 1;                    // Mask: 0x1, PropSize: 0x10x14C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportLowQualityLightmaps : 1;                   // Mask: 0x2, PropSize: 0x10x14C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportPointLightWholeSceneShadows : 1;           // Mask: 0x4, PropSize: 0x10x14C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportSkyAtmosphere : 1;                         // Mask: 0x8, PropSize: 0x10x14C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportSkyAtmosphereAffectsHeightFog : 1;         // Mask: 0x10, PropSize: 0x10x14C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportCloudShadowOnForwardLitTranslucent : 1;    // Mask: 0x20, PropSize: 0x10x14C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportTranslucentPerObjectShadow : 1;            // Mask: 0x40, PropSize: 0x10x14C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportCloudShadowOnSingleLayerWater : 1;         // Mask: 0x80, PropSize: 0x10x14C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableStrata : 1;                                 // Mask: 0x1, PropSize: 0x10x14D(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1C8 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3824[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       StrataBytePerPixel;                                // 0x150(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        StrataOpaqueMaterialRoughRefraction : 1;           // Mask: 0x1, PropSize: 0x10x154(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        StrataDebugAdvancedVisualizationShaders : 1;       // Mask: 0x2, PropSize: 0x10x154(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMaterialRoughDiffuse : 1;                         // Mask: 0x4, PropSize: 0x10x154(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMaterialEnergyConservation : 1;                   // Mask: 0x8, PropSize: 0x10x154(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrderedIndependentTransparencyEnable : 1;         // Mask: 0x10, PropSize: 0x10x154(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportSkinCacheShaders : 1;                      // Mask: 0x20, PropSize: 0x10x154(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSkipCompilingGPUSkinVF : 1;                       // Mask: 0x40, PropSize: 0x10x154(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1C9 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3825[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ESkinCacheDefaultBehavior         DefaultSkinCacheBehavior;                          // 0x158(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3827[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SkinCacheSceneMemoryLimitInMB;                     // 0x15C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileEnableStaticAndCSMShadowReceivers : 1;      // Mask: 0x1, PropSize: 0x10x160(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileEnableMovableLightCSMShaderCulling : 1;     // Mask: 0x2, PropSize: 0x10x160(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileForwardEnableLocalLights : 1;               // Mask: 0x4, PropSize: 0x10x160(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileForwardEnableClusteredReflections : 1;      // Mask: 0x8, PropSize: 0x10x160(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileEnableNoPrecomputedLightingCSMShader : 1;   // Mask: 0x10, PropSize: 0x10x160(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileAllowDistanceFieldShadows : 1;              // Mask: 0x20, PropSize: 0x10x160(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileAllowMovableDirectionalLights : 1;          // Mask: 0x40, PropSize: 0x10x160(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileAllowMovableSpotlightShadows : 1;           // Mask: 0x80, PropSize: 0x10x160(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupport16BitBoneIndex : 1;                        // Mask: 0x1, PropSize: 0x10x161(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGPUSkinLimit2BoneInfluences : 1;                  // Mask: 0x2, PropSize: 0x10x161(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportDepthOnlyIndexBuffers : 1;                 // Mask: 0x4, PropSize: 0x10x161(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportReversedIndexBuffers : 1;                  // Mask: 0x8, PropSize: 0x10x161(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileAmbientOcclusion : 1;                       // Mask: 0x10, PropSize: 0x10x161(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseUnlimitedBoneInfluences : 1;                   // Mask: 0x20, PropSize: 0x10x161(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1CA : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3829[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        UnlimitedBonInfluencesThreshold;                   // 0x164(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerPlatformInt                       MaxSkinBones;                                      // 0x168(0x4)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	enum class EMobilePlanarReflectionMode       MobilePlanarReflectionMode;                        // 0x16C(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_382A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bMobileSupportsGen4TAA : 1;                        // Mask: 0x1, PropSize: 0x10x170(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1CB : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_382B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerPlatformBool                      bStreamSkeletalMeshLODs;                           // 0x174(0x1)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformBool                      bDiscardSkeletalMeshOptionalLODs;                  // 0x175(0x1)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_382C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoftObjectPath                       VisualizeCalibrationColorMaterialPath;             // 0x178(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       VisualizeCalibrationCustomMaterialPath;            // 0x198(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       VisualizeCalibrationGrayscaleMaterialPath;         // 0x1B8(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RendererSettings");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.RendererOverrideSettings
class URendererOverrideSettings : public UDeveloperSettings
{
public:
	uint8                                        bSupportAllShaderPermutations : 1;                 // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_382D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RendererOverrideSettings");
		return Clss;
	}

};

// 0xA0 (0xC8 - 0x28)
// Class Engine.SubsurfaceProfile
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct              Settings;                                          // 0x28(0x9C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_382E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SubsurfaceProfile");
		return Clss;
	}

};

// 0xA78 (0x3D80 - 0x3308)
// Class Engine.ReplayNetConnection
class UReplayNetConnection : public UNetConnection
{
public:
	uint8                                        Pad_382F[0xA78];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReplayNetConnection");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ReplaySubsystem
class UReplaySubsystem : public UGameInstanceSubsystem
{
public:
	bool                                         bLoadDefaultMapOnStop;                             // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3831[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReplaySubsystem");
		return Clss;
	}

	void RequestCheckpoint();
	bool IsRecording();
	bool IsPlaying();
	float GetReplayCurrentTime();
	class FString GetActiveReplayName();
};

// 0x38 (0x60 - 0x28)
// Class Engine.ReverbEffect
class UReverbEffect : public UObject
{
public:
	bool                                         bBypassEarlyReflections;                           // 0x28(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3832[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReflectionsDelay;                                  // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GainHF;                                            // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReflectionsGain;                                   // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bBypassLateReflections;                            // 0x38(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3833[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LateDelay;                                         // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DecayTime;                                         // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Density;                                           // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Diffusion;                                         // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AirAbsorptionGainHF;                               // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DecayHFRatio;                                      // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LateGain;                                          // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Gain;                                              // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RoomRolloffFactor;                                 // 0x5C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReverbEffect");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.RuntimeOptionsBase
class URuntimeOptionsBase : public UObject
{
public:
	uint8                                        Pad_3834[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RuntimeOptionsBase");
		return Clss;
	}

};

// 0xB0 (0xD8 - 0x28)
// Class Engine.SCS_Node
class USCS_Node : public UObject
{
public:
	TSubclassOf<class UObject>                   ComponentClass;                                    // 0x28(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                       ComponentTemplate;                                 // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData;                     // 0x38(0x48)(NativeAccessSpecifierPublic)
	class FName                                  AttachToName;                                      // 0x80(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ParentComponentOrVariableName;                     // 0x88(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ParentComponentOwnerClassName;                     // 0x90(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsParentComponentNative;                          // 0x98(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3835[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USCS_Node*>                     ChildNodes;                                        // 0xA0(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FBPVariableMetaDataEntry>      MetaDataArray;                                     // 0xB0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                 VariableGuid;                                      // 0xC0(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  InternalVariableName;                              // 0xD0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SCS_Node");
		return Clss;
	}

};

// 0x78 (0xA0 - 0x28)
// Class Engine.SimpleConstructionScript
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                     RootNodes;                                         // 0x28(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class USCS_Node*>                     AllNodes;                                          // 0x38(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class USCS_Node*                             DefaultSceneRootNode;                              // 0x48(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3836[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SimpleConstructionScript");
		return Clss;
	}

};

// 0x408 (0x4E0 - 0xD8)
// Class Engine.SkeletalMesh
class USkeletalMesh : public USkinnedAsset
{
public:
	uint8                                        Pad_3843[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0xF8(0x8)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                      ImportedBounds;                                    // 0x100(0x38)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBoxSphereBounds                      ExtendedBounds;                                    // 0x138(0x38)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                               PositiveBoundsExtension;                           // 0x170(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               NegativeBoundsExtension;                           // 0x188(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSkeletalMaterial>             Materials;                                         // 0x1A0(0x10)(Edit, BlueprintVisible, ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<struct FBoneMirrorInfo>               SkelMirrorTable;                                   // 0x1B0(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSkeletalMeshLODInfo>          LODInfo;                                           // 0x1C0(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3844[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerQualityLevelInt                   MinQualityLevelLOD;                                // 0x220(0x68)(Edit, NativeAccessSpecifierPublic)
	struct FPerPlatformInt                       MinLOD;                                            // 0x288(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformBool                      DisableBelowMinLodStripping;                       // 0x28C(0x1)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	enum class EAxis                             SkelMirrorAxis;                                    // 0x28D(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAxis                             SkelMirrorFlipAxis;                                // 0x28E(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFullPrecisionUVs : 1;                          // Mask: 0x1, PropSize: 0x10x28F(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseHighPrecisionTangentBasis : 1;                 // Mask: 0x2, PropSize: 0x10x28F(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasBeenSimplified : 1;                            // Mask: 0x4, PropSize: 0x10x28F(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasVertexColors : 1;                              // Mask: 0x8, PropSize: 0x10x28F(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1CC : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bEnablePerPolyCollision : 1;                       // Mask: 0x20, PropSize: 0x10x28F(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1CD : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	class UBodySetup*                            BodySetup;                                         // 0x290(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                         PhysicsAsset;                                      // 0x298(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                         ShadowPhysicsAsset;                                // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNodeMappingContainer*>         NodeMappingData;                                   // 0x2A8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        bSupportRayTracing : 1;                            // Mask: 0x1, PropSize: 0x10x2B8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1CE : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3845[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RayTracingMinLOD;                                  // 0x2BC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EClothLODBiasMode                 ClothLODBiasMode;                                  // 0x2C0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3846[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMorphTarget*>                  MorphTargets;                                      // 0x2C8(0x10)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                        Pad_3847[0x178];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UAnimInstance>             PostProcessAnimBlueprint;                          // 0x450(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClothingAssetBase*>            MeshClothingAssets;                                // 0x458(0x10)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FSkeletalMeshSamplingInfo             SamplingInfo;                                      // 0x468(0x30)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x498(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class USkeletalMeshSocket*>           Sockets;                                           // 0x4A8(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                        Pad_384B[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSkinWeightProfileInfo>        SkinWeightProfiles;                                // 0x4C8(0x10)(Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMeshDeformer*                         DefaultMeshDeformer;                               // 0x4D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMesh");
		return Clss;
	}

	void SetSkeleton(class USkeleton* InInSkeleton);
	void SetMorphTargets(TArray<class UMorphTarget*>& InInMorphTargets);
	void SetMinLODForQualityLevels(TMap<enum class EPerQualityLevels, int32>& InQualityLevelMinimumLODs, int32 InDefault);
	void SetMeshClothingAssets(TArray<class UClothingAssetBase*>& InInMeshClothingAssets);
	void SetMaterials(TArray<struct FSkeletalMaterial>& InInMaterials);
	void SetLODSettings(class USkeletalMeshLODSettings* InInLODSettings);
	void SetDefaultAnimatingRig(TSoftObjectPtr<class UObject> InInAnimatingRig);
	int32 NumSockets();
	TArray<class FString> K2_GetAllMorphTargetNames();
	bool IsSectionUsingCloth(int32 InInSectionIndex, bool InbCheckCorrespondingSections);
	class USkeletalMeshSocket* GetSocketByIndex(int32 InIndex);
	class USkeleton* GetSkeleton();
	class UPhysicsAsset* GetShadowPhysicsAsset();
	class UPhysicsAsset* GetPhysicsAsset();
	TArray<class UNodeMappingContainer*> GetNodeMappingData();
	class UNodeMappingContainer* GetNodeMappingContainer(class UBlueprint* InSourceAsset);
	TArray<class UMorphTarget*> GetMorphTargetsPtrConv();
	void GetMinLODForQualityLevels(TMap<enum class EPerQualityLevels, int32>* InQualityLevelMinimumLODs, int32* InDefault);
	TArray<class UClothingAssetBase*> GetMeshClothingAssets();
	TArray<struct FSkeletalMaterial> GetMaterials();
	class USkeletalMeshLODSettings* GetLODSettings();
	struct FBoxSphereBounds GetImportedBounds();
	TSoftObjectPtr<class UObject> GetDefaultAnimatingRig();
	struct FBoxSphereBounds GetBounds();
	class USkeletalMeshSocket* FindSocketAndIndex(class FName InInSocketName, int32* InOutIndex);
};

// 0x0 (0x28 - 0x28)
// Class Engine.SkeletalMeshEditorData
class USkeletalMeshEditorData : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMeshEditorData");
		return Clss;
	}

};

// 0x88 (0xB8 - 0x30)
// Class Engine.SkeletalMeshLODSettings
class USkeletalMeshLODSettings : public UDataAsset
{
public:
	struct FPerQualityLevelInt                   MinQualityLevelLOD;                                // 0x30(0x68)(Edit, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformInt                       MinLOD;                                            // 0x98(0x4)(Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformBool                      DisableBelowMinLodStripping;                       // 0x9C(0x1)(Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bOverrideLODStreamingSettings;                     // 0x9D(0x1)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPerPlatformBool                      bSupportLODStreaming;                              // 0x9E(0x1)(Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_384D[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPerPlatformInt                       MaxNumStreamedLODs;                                // 0xA0(0x4)(Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformInt                       MaxNumOptionalLODs;                                // 0xA4(0x4)(Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSkeletalMeshLODGroupSettings> LODGroups;                                         // 0xA8(0x10)(Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMeshLODSettings");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.SkeletalMeshSimplificationSettings
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{
public:
	class FName                                  SkeletalMeshReductionModuleName;                   // 0x38(0x8)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMeshSimplificationSettings");
		return Clss;
	}

};

// 0x3F8 (0x420 - 0x28)
// Class Engine.ButtonStyleAsset
class UButtonStyleAsset : public UObject
{
public:
	uint8                                        Pad_384E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FButtonStyle                          ButtonStyle;                                       // 0x30(0x3F0)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ButtonStyleAsset");
		return Clss;
	}

};

// 0xAD8 (0xB00 - 0x28)
// Class Engine.CheckBoxStyleAsset
class UCheckBoxStyleAsset : public UObject
{
public:
	uint8                                        Pad_384F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCheckBoxStyle                        CheckBoxStyle;                                     // 0x30(0xAD0)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CheckBoxStyleAsset");
		return Clss;
	}

};

// 0xD8 (0x100 - 0x28)
// Class Engine.SlateBrushAsset
class USlateBrushAsset : public UObject
{
public:
	uint8                                        Pad_3850[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSlateBrush                           Brush;                                             // 0x30(0xD0)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SlateBrushAsset");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.SlateTextureAtlasInterface
class ISlateTextureAtlasInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SlateTextureAtlasInterface");
		return Clss;
	}

};

// 0x1E0 (0x208 - 0x28)
// Class Engine.SoundClass
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                 Properties;                                        // 0x28(0x1B8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class USoundClass*>                   ChildClasses;                                      // 0x1E0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FPassiveSoundMixModifier>      PassiveSoundMixModifiers;                          // 0x1F0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundClass*                           ParentClass;                                       // 0x200(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundClass");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.SoundConcurrency
class USoundConcurrency : public UObject
{
public:
	struct FSoundConcurrencySettings             Concurrency;                                       // 0x28(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundConcurrency");
		return Clss;
	}

};

// 0x3F0 (0x558 - 0x168)
// Class Engine.SoundCue
class USoundCue : public USoundBase
{
public:
	class USoundNode*                            FirstNode;                                         // 0x168(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMultiplier;                                  // 0x170(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchMultiplier;                                   // 0x174(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings             AttenuationOverrides;                              // 0x178(0x3C8)(Edit, NativeAccessSpecifierPublic)
	float                                        SubtitlePriority;                                  // 0x540(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3851[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bPrimeOnLoad : 1;                                  // Mask: 0x1, PropSize: 0x10x548(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x2, PropSize: 0x10x548(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bExcludeFromRandomNodeBranchCulling : 1;           // Mask: 0x4, PropSize: 0x10x548(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasPlayWhenSilent : 1;                            // Mask: 0x8, PropSize: 0x10x548(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_1CF : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3852[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CookedQualityIndex;                                // 0x54C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3853[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundCue");
		return Clss;
	}

};

// 0x68 (0x90 - 0x28)
// Class Engine.SoundMix
class USoundMix : public UObject
{
public:
	uint8                                        bApplyEQ : 1;                                      // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1D0 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3855[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        EQPriority;                                        // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioEQEffect                        EQSettings;                                        // 0x30(0x40)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FSoundClassAdjuster>           SoundClassEffects;                                 // 0x70(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        InitialDelay;                                      // 0x80(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeInTime;                                        // 0x84(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Duration;                                          // 0x88(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeOutTime;                                       // 0x8C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundMix");
		return Clss;
	}

};

// 0x0 (0x48 - 0x48)
// Class Engine.SoundNodeAssetReferencer
class USoundNodeAssetReferencer : public USoundNode
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeAssetReferencer");
		return Clss;
	}

};

// 0x3D8 (0x420 - 0x48)
// Class Engine.SoundNodeAttenuation
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                     AttenuationSettings;                               // 0x48(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings             AttenuationOverrides;                              // 0x50(0x3C8)(Edit, NativeAccessSpecifierPublic)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x1, PropSize: 0x10x418(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3857[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeAttenuation");
		return Clss;
	}

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeBranch
class USoundNodeBranch : public USoundNode
{
public:
	class FName                                  BoolParameterName;                                 // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeBranch");
		return Clss;
	}

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeConcatenator
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                InputVolume;                                       // 0x48(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeConcatenator");
		return Clss;
	}

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeDelay
class USoundNodeDelay : public USoundNode
{
public:
	float                                        DelayMin;                                          // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DelayMax;                                          // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeDelay");
		return Clss;
	}

};

// 0x28 (0x70 - 0x48)
// Class Engine.SoundNodeDialoguePlayer
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                DialogueWaveParameter;                             // 0x48(0x20)(Edit, NativeAccessSpecifierPublic)
	uint8                                        bLooping : 1;                                      // Mask: 0x1, PropSize: 0x10x68(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3859[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeDialoguePlayer");
		return Clss;
	}

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeDistanceCrossFade
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                CrossFadeInput;                                    // 0x48(0x10)(Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeDistanceCrossFade");
		return Clss;
	}

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeDoppler
class USoundNodeDoppler : public USoundNode
{
public:
	float                                        DopplerIntensity;                                  // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseSmoothing;                                     // 0x4C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_385B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SmoothingInterpSpeed;                              // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_385C[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeDoppler");
		return Clss;
	}

};

// 0x148 (0x190 - 0x48)
// Class Engine.SoundNodeEnveloper
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                        LoopStart;                                         // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LoopEnd;                                           // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DurationAfterLoop;                                 // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LoopCount;                                         // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLoopIndefinitely : 1;                             // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLoop : 1;                                         // Mask: 0x2, PropSize: 0x10x58(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1D1 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_385D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDistributionFloatConstantCurve*       VolumeInterpCurve;                                 // 0x60(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDistributionFloatConstantCurve*       PitchInterpCurve;                                  // 0x68(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                    VolumeCurve;                                       // 0x70(0x88)(Edit, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                    PitchCurve;                                        // 0xF8(0x88)(Edit, NativeAccessSpecifierPublic)
	float                                        PitchMin;                                          // 0x180(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchMax;                                          // 0x184(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMin;                                         // 0x188(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMax;                                         // 0x18C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeEnveloper");
		return Clss;
	}

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeGroupControl
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int32>                                GroupSizes;                                        // 0x48(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeGroupControl");
		return Clss;
	}

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeLooping
class USoundNodeLooping : public USoundNode
{
public:
	int32                                        LoopCount;                                         // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLoopIndefinitely : 1;                             // Mask: 0x1, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_385E[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeLooping");
		return Clss;
	}

};

// 0x0 (0x48 - 0x48)
// Class Engine.SoundNodeMature
class USoundNodeMature : public USoundNode
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeMature");
		return Clss;
	}

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeMixer
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                InputVolume;                                       // 0x48(0x10)(Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeMixer");
		return Clss;
	}

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeModulator
class USoundNodeModulator : public USoundNode
{
public:
	float                                        PitchMin;                                          // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchMax;                                          // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMin;                                         // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMax;                                         // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeModulator");
		return Clss;
	}

};

// 0x28 (0x70 - 0x48)
// Class Engine.SoundNodeOscillator
class USoundNodeOscillator : public USoundNode
{
public:
	uint8                                        bModulateVolume : 1;                               // Mask: 0x1, PropSize: 0x10x48(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bModulatePitch : 1;                                // Mask: 0x2, PropSize: 0x10x48(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1D2 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3864[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AmplitudeMin;                                      // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AmplitudeMax;                                      // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrequencyMin;                                      // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrequencyMax;                                      // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OffsetMin;                                         // 0x5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OffsetMax;                                         // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CenterMin;                                         // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CenterMax;                                         // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3866[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeOscillator");
		return Clss;
	}

};

// 0x8 (0x60 - 0x58)
// Class Engine.SoundNodeParamCrossFade
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	class FName                                  ParamName;                                         // 0x58(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeParamCrossFade");
		return Clss;
	}

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeQualityLevel
class USoundNodeQualityLevel : public USoundNode
{
public:
	int32                                        CookedQualityLevelIndex;                           // 0x48(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3868[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeQualityLevel");
		return Clss;
	}

};

// 0x30 (0x78 - 0x48)
// Class Engine.SoundNodeRandom
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                Weights;                                           // 0x48(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                 HasBeenUsed;                                       // 0x58(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                        NumRandomUsed;                                     // 0x68(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PreselectAtLevelLoad;                              // 0x6C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldExcludeFromBranchCulling : 1;               // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSoundCueExcludedFromBranchCulling : 1;            // Mask: 0x2, PropSize: 0x10x70(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRandomizeWithoutReplacement : 1;                  // Mask: 0x4, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_386A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeRandom");
		return Clss;
	}

};

// 0x10 (0x58 - 0x48)
// Class Engine.SoundNodeSoundClass
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                           SoundClassOverride;                                // 0x48(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_386B[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeSoundClass");
		return Clss;
	}

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeSwitch
class USoundNodeSwitch : public USoundNode
{
public:
	class FName                                  IntParameterName;                                  // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeSwitch");
		return Clss;
	}

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeWaveParam
class USoundNodeWaveParam : public USoundNode
{
public:
	class FName                                  WaveParameterName;                                 // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeWaveParam");
		return Clss;
	}

};

// 0x40 (0x88 - 0x48)
// Class Engine.SoundNodeWavePlayer
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	TSoftObjectPtr<class USoundWave>             SoundWaveAssetPtr;                                 // 0x48(0x30)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundWave*                            SoundWave;                                         // 0x78(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_1D3 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bLooping : 1;                                      // Mask: 0x2, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_386F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeWavePlayer");
		return Clss;
	}

};

// 0x18 (0x468 - 0x450)
// Class Engine.SoundSourceBus
class USoundSourceBus : public USoundWave
{
public:
	enum class ESourceBusChannels                SourceBusChannels;                                 // 0x450(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3870[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SourceBusDuration;                                 // 0x454(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioBus*                             AudioBus;                                          // 0x458(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoDeactivateWhenSilent : 1;                     // Mask: 0x1, PropSize: 0x10x460(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3871[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundSourceBus");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.SoundSubmixBase
class USoundSubmixBase : public UObject
{
public:
	bool                                         bAutoDisable;                                      // 0x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3872[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AutoDisableTime;                                   // 0x2C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundSubmixBase*>              ChildSubmixes;                                     // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundSubmixBase");
		return Clss;
	}

};

// 0x8 (0x48 - 0x40)
// Class Engine.SoundSubmixWithParentBase
class USoundSubmixWithParentBase : public USoundSubmixBase
{
public:
	class USoundSubmixBase*                      ParentSubmix;                                      // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundSubmixWithParentBase");
		return Clss;
	}

};

// 0x180 (0x1C8 - 0x48)
// Class Engine.SoundSubmix
class USoundSubmix : public USoundSubmixWithParentBase
{
public:
	uint8                                        bMuteWhenBackgrounded : 1;                         // Mask: 0x1, PropSize: 0x10x48(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1D4 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3887[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USoundEffectSubmixPreset*>      SubmixEffectChain;                                 // 0x50(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*       AmbisonicsPluginSettings;                          // 0x60(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EnvelopeFollowerAttackTime;                        // 0x68(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EnvelopeFollowerReleaseTime;                       // 0x6C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutputVolume;                                      // 0x70(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WetLevel;                                          // 0x74(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DryLevel;                                          // 0x78(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3888[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoundModulationDestinationSettings   OutputVolumeModulation;                            // 0x80(0x60)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoundModulationDestinationSettings   WetLevelModulation;                                // 0xE0(0x60)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSoundModulationDestinationSettings   DryLevelModulation;                                // 0x140(0x60)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                        bSendToAudioLink : 1;                              // Mask: 0x1, PropSize: 0x10x1A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1D5 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3889[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAudioLinkSettingsAbstract*            AudioLinkSettings;                                 // 0x1A8(0x8)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_            OnSubmixRecordedFileDone;                          // 0x1B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_388A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundSubmix");
		return Clss;
	}

	void StopSpectralAnalysis(class UObject* InWorldContextObject);
	void StopRecordingOutput(class UObject* InWorldContextObject, enum class EAudioRecordingExportType InExportType, const class FString& InName, const class FString& InPath, class USoundWave* InExistingSoundWaveToOverwrite);
	void StopEnvelopeFollowing(class UObject* InWorldContextObject);
	void StartSpectralAnalysis(class UObject* InWorldContextObject, enum class EFFTSize InFFTSize, enum class EFFTPeakInterpolationMethod InInterpolationMethod, enum class EFFTWindowType InWindowType, float InHopSize, enum class EAudioSpectrumType InSpectrumType);
	void StartRecordingOutput(class UObject* InWorldContextObject, float InExpectedDuration);
	void StartEnvelopeFollowing(class UObject* InWorldContextObject);
	void SetSubmixWetLevel(class UObject* InWorldContextObject, float InInWetLevel);
	void SetSubmixOutputVolume(class UObject* InWorldContextObject, float InInOutputVolume);
	void SetSubmixDryLevel(class UObject* InWorldContextObject, float InInDryLevel);
	void RemoveSpectralAnalysisDelegate(class UObject* InWorldContextObject, FDelegateProperty_& InOnSubmixSpectralAnalysisBP);
	void AddSpectralAnalysisDelegate(class UObject* InWorldContextObject, TArray<struct FSoundSubmixSpectralAnalysisBandSettings>& InInBandSettings, FDelegateProperty_& InOnSubmixSpectralAnalysisBP, float InUpdateRate, float InDecibelNoiseFloor, bool InbDoNormalize, bool InbDoAutoRange, float InAutoRangeAttackTime, float InAutoRangeReleaseTime);
	void AddEnvelopeFollowerDelegate(class UObject* InWorldContextObject, FDelegateProperty_& InOnSubmixEnvelopeBP);
};

// 0x28 (0x70 - 0x48)
// Class Engine.SoundfieldSubmix
class USoundfieldSubmix : public USoundSubmixWithParentBase
{
public:
	class FName                                  SoundfieldEncodingFormat;                          // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*       EncodingSettings;                                  // 0x50(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundfieldEffectBase*>         SoundfieldEffectChain;                             // 0x58(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class USoundfieldEncodingSettingsBase> EncodingSettingsClass;                             // 0x68(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundfieldSubmix");
		return Clss;
	}

};

// 0x18 (0x58 - 0x40)
// Class Engine.EndpointSubmix
class UEndpointSubmix : public USoundSubmixBase
{
public:
	class FName                                  EndpointType;                                      // 0x40(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAudioEndpointSettingsBase> EndpointSettingsClass;                             // 0x48(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioEndpointSettingsBase*            EndpointSettings;                                  // 0x50(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EndpointSubmix");
		return Clss;
	}

};

// 0x38 (0x78 - 0x40)
// Class Engine.SoundfieldEndpointSubmix
class USoundfieldEndpointSubmix : public USoundSubmixBase
{
public:
	class FName                                  SoundfieldEndpointType;                            // 0x40(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAudioEndpointSettingsBase> EndpointSettingsClass;                             // 0x48(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEndpointSettingsBase*       EndpointSettings;                                  // 0x50(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USoundfieldEncodingSettingsBase> EncodingSettingsClass;                             // 0x58(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundfieldEncodingSettingsBase*       EncodingSettings;                                  // 0x60(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundfieldEffectBase*>         SoundfieldEffectChain;                             // 0x68(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundfieldEndpointSubmix");
		return Clss;
	}

};

// 0x0 (0x340 - 0x340)
// Class Engine.SpectatorPawn
class ASpectatorPawn : public ADefaultPawn
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpectatorPawn");
		return Clss;
	}

};

// 0x8 (0x178 - 0x170)
// Class Engine.SpectatorPawnMovement
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x1, PropSize: 0x10x170(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_388D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpectatorPawnMovement");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.SplineMeshActor
class ASplineMeshActor : public AActor
{
public:
	class USplineMeshComponent*                  SplineMeshComponent;                               // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SplineMeshActor");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.StaticMeshDescriptionBulkData
class UStaticMeshDescriptionBulkData : public UMeshDescriptionBaseBulkData
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StaticMeshDescriptionBulkData");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.StereoLayerFunctionLibrary
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StereoLayerFunctionLibrary");
		return Clss;
	}

	void ShowSplashScreen();
	void SetSplashScreen(class UTexture* InTexture, const struct FVector2D& InScale, const struct FVector& InOffset, bool InbShowLoadingMovie, bool InbShowOnSet);
	void HideSplashScreen();
	void EnableAutoLoadingSplashScreen(bool InInAutoShowEnabled);
};

// 0x0 (0xA0 - 0xA0)
// Class Engine.ActorTextureStreamingBuildDataComponent
class UActorTextureStreamingBuildDataComponent : public UActorComponent
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorTextureStreamingBuildDataComponent");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.TextureMipDataProviderFactory
class UTextureMipDataProviderFactory : public UAssetUserData
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureMipDataProviderFactory");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.AudioSubsystemCollectionRoot
class UAudioSubsystemCollectionRoot : public UObject
{
public:
	uint8                                        Pad_3891[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioSubsystemCollectionRoot");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.AudioEngineSubsystem
class UAudioEngineSubsystem : public UDynamicSubsystem
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioEngineSubsystem");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.SubsystemBlueprintLibrary
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SubsystemBlueprintLibrary");
		return Clss;
	}

	class UWorldSubsystem* GetWorldSubsystem(class UObject* InContextObject, TSubclassOf<class UWorldSubsystem> InClass);
	class ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(class APlayerController* InPlayerController, TSubclassOf<class ULocalPlayerSubsystem> InClass);
	class ULocalPlayerSubsystem* GetLocalPlayerSubsystem(class UObject* InContextObject, TSubclassOf<class ULocalPlayerSubsystem> InClass);
	class UGameInstanceSubsystem* GetGameInstanceSubsystem(class UObject* InContextObject, TSubclassOf<class UGameInstanceSubsystem> InClass);
	class UEngineSubsystem* GetEngineSubsystem(TSubclassOf<class UEngineSubsystem> InClass);
	class UAudioEngineSubsystem* GetAudioEngineSubsystem(class UObject* InContextObject, TSubclassOf<class UAudioEngineSubsystem> InClass);
};

// 0x330 (0x358 - 0x28)
// Class Engine.AutomationTestSettings
class UAutomationTestSettings : public UObject
{
public:
	TArray<class FString>                        EngineTestModules;                                 // 0x28(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        EditorTestModules;                                 // 0x38(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                       AutomationTestmap;                                 // 0x48(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                         // 0x68(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        AssetsToOpen;                                      // 0x78(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        MapsToPIETest;                                     // 0x88(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                         bUseAllProjectMapsToPlayInPIE;                     // 0x98(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3899[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBuildPromotionTestSettings           BuildPromotionTest;                                // 0xA0(0x1F0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FMaterialEditorPromotionSettings      MaterialEditorPromotionTest;                       // 0x290(0x30)(Edit, Config, NativeAccessSpecifierPublic)
	struct FParticleEditorPromotionSettings      ParticleEditorPromotionTest;                       // 0x2C0(0x10)(Edit, Config, NativeAccessSpecifierPublic)
	struct FBlueprintEditorPromotionSettings     BlueprintEditorPromotionTest;                      // 0x2D0(0x30)(Edit, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        TestLevelFolders;                                  // 0x300(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FExternalToolDefinition>       ExternalTools;                                     // 0x310(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions;                       // 0x320(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FLaunchOnTestSettings>         LaunchOnSettings;                                  // 0x330(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FIntPoint                             DefaultScreenshotResolution;                       // 0x340(0x8)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PIETestDuration;                                   // 0x348(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultInteractiveFramerate;                       // 0x34C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultInteractiveFramerateWaitTime;               // 0x350(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultInteractiveFramerateDuration;               // 0x354(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AutomationTestSettings");
		return Clss;
	}

};

// 0x78 (0xA0 - 0x28)
// Class Engine.TransactionDiffingTestObject
class UTransactionDiffingTestObject : public UObject
{
public:
	TArray<class FName>                          NamesArray;                                        // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                  AdditionalName;                                    // 0x38(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                       ObjectsArray;                                      // 0x40(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UObject*                               AdditionalObject;                                  // 0x50(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>        SoftObjectsArray;                                  // 0x58(0x10)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                AdditionalSoftObject;                              // 0x68(0x30)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PropertyData;                                      // 0x98(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_389B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TransactionDiffingTestObject");
		return Clss;
	}

};

// 0x20 (0x210 - 0x1F0)
// Class Engine.Texture2DDynamic
class UTexture2DDynamic : public UTexture
{
public:
	uint8                                        Pad_389D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EPixelFormat                      Format;                                            // 0x1F8(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_389E[0x17];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Texture2DDynamic");
		return Clss;
	}

};

// 0xA0 (0x290 - 0x1F0)
// Class Engine.TextureCubeArray
class UTextureCubeArray : public UTexture
{
public:
	uint8                                        Pad_389F[0xA0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureCubeArray");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.TextureEncodingProjectSettings
class UTextureEncodingProjectSettings : public UDeveloperSettings
{
public:
	uint8                                        bFinalUsesRDO : 1;                                 // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1D6 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_38A0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int8                                         FinalRDOLambda;                                    // 0x3C(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureEncodeEffort              FinalEffortLevel;                                  // 0x3D(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureUniversalTiling           FinalUniversalTiling;                              // 0x3E(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38A1[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bFastUsesRDO : 1;                                  // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1D7 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_38A2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int8                                         FastRDOLambda;                                     // 0x44(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureEncodeEffort              FastEffortLevel;                                   // 0x45(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureUniversalTiling           FastUniversalTiling;                               // 0x46(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureEncodeSpeed               CookUsesSpeed;                                     // 0x47(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureEncodeSpeed               EditorUsesSpeed;                                   // 0x48(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38A3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureEncodingProjectSettings");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.TextureEncodingUserSettings
class UTextureEncodingUserSettings : public UDeveloperSettings
{
public:
	enum class ETextureEncodeSpeedOverride       ForceEncodeSpeed;                                  // 0x38(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38A4[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureEncodingUserSettings");
		return Clss;
	}

};

// 0x8 (0x2B0 - 0x2A8)
// Class Engine.TextureLightProfile
class UTextureLightProfile : public UTexture2D
{
public:
	float                                        Brightness;                                        // 0x2A8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TextureMultiplier;                                 // 0x2AC(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureLightProfile");
		return Clss;
	}

};

// 0x28 (0x220 - 0x1F8)
// Class Engine.TextureRenderTarget2DArray
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{
public:
	int32                                        SizeX;                                             // 0x1F8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeY;                                             // 0x1FC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Slices;                                            // 0x200(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          ClearColor;                                        // 0x204(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPixelFormat                      OverrideFormat;                                    // 0x214(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHDR : 1;                                          // Mask: 0x1, PropSize: 0x10x215(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceLinearGamma : 1;                             // Mask: 0x2, PropSize: 0x10x215(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38A5[0xA];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureRenderTarget2DArray");
		return Clss;
	}

};

// 0x18 (0x210 - 0x1F8)
// Class Engine.TextureRenderTargetCube
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int32                                        SizeX;                                             // 0x1F8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          ClearColor;                                        // 0x1FC(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPixelFormat                      OverrideFormat;                                    // 0x20C(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHDR : 1;                                          // Mask: 0x1, PropSize: 0x10x20D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceLinearGamma : 1;                             // Mask: 0x2, PropSize: 0x10x20D(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38A6[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureRenderTargetCube");
		return Clss;
	}

};

// 0x28 (0x220 - 0x1F8)
// Class Engine.TextureRenderTargetVolume
class UTextureRenderTargetVolume : public UTextureRenderTarget
{
public:
	int32                                        SizeX;                                             // 0x1F8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeY;                                             // 0x1FC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeZ;                                             // 0x200(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          ClearColor;                                        // 0x204(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPixelFormat                      OverrideFormat;                                    // 0x214(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHDR : 1;                                          // Mask: 0x1, PropSize: 0x10x215(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceLinearGamma : 1;                             // Mask: 0x2, PropSize: 0x10x215(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38A7[0xA];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureRenderTargetVolume");
		return Clss;
	}

};

// 0x90 (0xB8 - 0x28)
// Class Engine.TimelineTemplate
class UTimelineTemplate : public UObject
{
public:
	float                                        TimelineLength;                                    // 0x28(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETimelineLengthMode               LengthMode;                                        // 0x2C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoPlay : 1;                                     // Mask: 0x1, PropSize: 0x10x2D(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLoop : 1;                                         // Mask: 0x2, PropSize: 0x10x2D(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReplicated : 1;                                   // Mask: 0x4, PropSize: 0x10x2D(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x8, PropSize: 0x10x2D(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1D8 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_38A9[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTTEventTrack>                 EventTracks;                                       // 0x30(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTFloatTrack>                 FloatTracks;                                       // 0x40(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTVectorTrack>                VectorTracks;                                      // 0x50(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTLinearColorTrack>           LinearColorTracks;                                 // 0x60(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBPVariableMetaDataEntry>      MetaDataArray;                                     // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                 TimelineGuid;                                      // 0x80(0x10)(ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETickingGroup                     TimelineTickGroup;                                 // 0x90(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38AA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  VariableName;                                      // 0x94(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  DirectionPropertyName;                             // 0x9C(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  UpdateFunctionName;                                // 0xA4(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  FinishedFunctionName;                              // 0xAC(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_38AB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TimelineTemplate");
		return Clss;
	}

};

// 0x50 (0xB8 - 0x68)
// Class Engine.UserDefinedEnum
class UUserDefinedEnum : public UEnum
{
public:
	TMap<class FName, class FText>               DisplayNameMap;                                    // 0x68(0x50)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("UserDefinedEnum");
		return Clss;
	}

};

// 0x278 (0x2B0 - 0x38)
// Class Engine.UserInterfaceSettings
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	enum class ERenderFocusRule                  RenderFocusRule;                                   // 0x38(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38AC[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<enum class EMouseCursor, struct FHardwareCursorReference> HardwareCursors;                                   // 0x40(0x50)(Edit, Config, NativeAccessSpecifierPublic)
	TMap<enum class EMouseCursor, struct FSoftClassPath> SoftwareCursors;                                   // 0x90(0x50)(Edit, Config, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        DefaultCursor;                                     // 0xE0(0x20)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        TextEditBeamCursor;                                // 0x100(0x20)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        CrosshairsCursor;                                  // 0x120(0x20)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        HandCursor;                                        // 0x140(0x20)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        GrabHandCursor;                                    // 0x160(0x20)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        GrabHandClosedCursor;                              // 0x180(0x20)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                        SlashedCircleCursor;                               // 0x1A0(0x20)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ApplicationScale;                                  // 0x1C0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EUIScalingRule                    UIScaleRule;                                       // 0x1C4(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38AD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSoftClassPath                        CustomScalingRuleClass;                            // 0x1C8(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                    UIScaleCurve;                                      // 0x1E8(0x88)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                         bAllowHighDPIInGameMode;                           // 0x270(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38AE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FIntPoint                             DesignScreenSize;                                  // 0x274(0x8)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLoadWidgetsOnDedicatedServer;                     // 0x27C(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38AF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       CursorClasses;                                     // 0x280(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSubclassOf<class UObject>                   CustomScalingRuleClassInstance;                    // 0x290(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDPICustomScalingRule*                 CustomScalingRule;                                 // 0x298(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_38B1[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("UserInterfaceSettings");
		return Clss;
	}

};

// 0x368 (0x390 - 0x28)
// Class Engine.Canvas
class UCanvas : public UObject
{
public:
	float                                        OrgX;                                              // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OrgY;                                              // 0x2C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClipX;                                             // 0x30(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClipY;                                             // 0x34(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                DrawColor;                                         // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCenterX : 1;                                      // Mask: 0x1, PropSize: 0x10x3C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCenterY : 1;                                      // Mask: 0x2, PropSize: 0x10x3C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoSmooth : 1;                                     // Mask: 0x4, PropSize: 0x10x3C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1D9 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_38E0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SizeX;                                             // 0x40(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeY;                                             // 0x44(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38E1[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPlane                                ColorModulate;                                     // 0x50(0x20)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultTexture;                                    // 0x70(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            GradientTexture0;                                  // 0x78(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReporterGraph*                        ReporterGraph;                                     // 0x80(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38E2[0x308];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Canvas");
		return Clss;
	}

	struct FVector2D K2_TextSize(class UFont* InRenderFont, const class FString& InRenderText, const struct FVector2D& InScale);
	struct FVector2D K2_StrLen(class UFont* InRenderFont, const class FString& InRenderText);
	struct FVector K2_Project(const struct FVector& InWorldLocation);
	void K2_DrawTriangle(class UTexture* InRenderTexture, const TArray<struct FCanvasUVTri>& InTriangles);
	void K2_DrawTexture(class UTexture* InRenderTexture, const struct FVector2D& InScreenPosition, const struct FVector2D& InScreenSize, const struct FVector2D& InCoordinatePosition, const struct FVector2D& InCoordinateSize, const struct FLinearColor& InRenderColor, enum class EBlendMode InBlendMode, float InRotation, const struct FVector2D& InPivotPoint);
	void K2_DrawText(class UFont* InRenderFont, const class FString& InRenderText, const struct FVector2D& InScreenPosition, const struct FVector2D& InScale, const struct FLinearColor& InRenderColor, float InKerning, const struct FLinearColor& InShadowColor, const struct FVector2D& InShadowOffset, bool InbCentreX, bool InbCentreY, bool InbOutlined, const struct FLinearColor& InOutlineColor);
	void K2_DrawPolygon(class UTexture* InRenderTexture, const struct FVector2D& InScreenPosition, const struct FVector2D& InRadius, int32 InNumberOfSides, const struct FLinearColor& InRenderColor);
	void K2_DrawMaterialTriangle(class UMaterialInterface* InRenderMaterial, const TArray<struct FCanvasUVTri>& InTriangles);
	void K2_DrawMaterial(class UMaterialInterface* InRenderMaterial, const struct FVector2D& InScreenPosition, const struct FVector2D& InScreenSize, const struct FVector2D& InCoordinatePosition, const struct FVector2D& InCoordinateSize, float InRotation, const struct FVector2D& InPivotPoint);
	void K2_DrawLine(const struct FVector2D& InScreenPositionA, const struct FVector2D& InScreenPositionB, float InThickness, const struct FLinearColor& InRenderColor);
	void K2_DrawBox(const struct FVector2D& InScreenPosition, const struct FVector2D& InScreenSize, float InThickness, const struct FLinearColor& InRenderColor);
	void K2_DrawBorder(class UTexture* InBorderTexture, class UTexture* InBackgroundTexture, class UTexture* InLeftBorderTexture, class UTexture* InRightBorderTexture, class UTexture* InTopBorderTexture, class UTexture* InBottomBorderTexture, const struct FVector2D& InScreenPosition, const struct FVector2D& InScreenSize, const struct FVector2D& InCoordinatePosition, const struct FVector2D& InCoordinateSize, const struct FLinearColor& InRenderColor, const struct FVector2D& InBorderScale, const struct FVector2D& InBackgroundScale, float InRotation, const struct FVector2D& InPivotPoint, const struct FVector2D& InCornerSize);
	void K2_Deproject(const struct FVector2D& InScreenPosition, struct FVector* InWorldOrigin, struct FVector* InWorldDirection);
};

// 0x108 (0x130 - 0x28)
// Class Engine.Console
class UConsole : public UObject
{
public:
	uint8                                        Pad_38E3[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class ULocalPlayer*                          ConsoleTargetPlayer;                               // 0x38(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultTexture_Black;                              // 0x40(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultTexture_White;                              // 0x48(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38E5[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        HistoryBuffer;                                     // 0x68(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        Pad_38E6[0xB8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Console");
		return Clss;
	}

};

// 0x118 (0x140 - 0x28)
// Class Engine.InputSettings
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>         AxisConfig;                                        // 0x28(0x10)(Edit, EditFixedSize, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                        bAltEnterTogglesFullscreen : 1;                    // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bF11TogglesFullscreen : 1;                         // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseMouseForTouch : 1;                             // Mask: 0x4, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMouseSmoothing : 1;                         // Mask: 0x8, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableFOVScaling : 1;                             // Mask: 0x10, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCaptureMouseOnLaunch : 1;                         // Mask: 0x20, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableLegacyInputScales : 1;                      // Mask: 0x40, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMotionControls : 1;                         // Mask: 0x80, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFilterInputByPlatformUser : 1;                    // Mask: 0x1, PropSize: 0x10x39(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldFlushPressedKeysOnViewportFocusLost : 1;    // Mask: 0x2, PropSize: 0x10x39(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableDynamicComponentInputBinding : 1;           // Mask: 0x4, PropSize: 0x10x39(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysShowTouchInterface : 1;                     // Mask: 0x8, PropSize: 0x10x39(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowConsoleOnFourFingerTap : 1;                   // Mask: 0x10, PropSize: 0x10x39(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableGestureRecognizer : 1;                      // Mask: 0x20, PropSize: 0x10x39(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseAutocorrect : 1;                               // Mask: 0x40, PropSize: 0x10x39(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_1DA : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_38F1[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        ExcludedAutocorrectOS;                             // 0x40(0x10)(Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class FString>                        ExcludedAutocorrectCultures;                       // 0x50(0x10)(Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class FString>                        ExcludedAutocorrectDeviceModels;                   // 0x60(0x10)(Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	enum class EMouseCaptureMode                 DefaultViewportMouseCaptureMode;                   // 0x70(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMouseLockMode                    DefaultViewportMouseLockMode;                      // 0x71(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38F2[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FOVScale;                                          // 0x74(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DoubleClickTime;                                   // 0x78(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38F3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInputActionKeyMapping>        ActionMappings;                                    // 0x80(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<struct FInputAxisKeyMapping>          AxisMappings;                                      // 0x90(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<struct FInputActionSpeechMapping>     SpeechMappings;                                    // 0xA0(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UPlayerInput>            DefaultPlayerInputClass;                           // 0xB0(0x30)(Edit, Config, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UInputComponent>         DefaultInputComponentClass;                        // 0xE0(0x30)(Edit, Config, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                       DefaultTouchInterface;                             // 0x110(0x20)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                          ConsoleKeys;                                       // 0x130(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputSettings");
		return Clss;
	}

	void SaveKeyMappings();
	void RemoveAxisMapping(struct FInputAxisKeyMapping& InKeyMapping, bool InbForceRebuildKeymaps);
	void RemoveActionMapping(struct FInputActionKeyMapping& InKeyMapping, bool InbForceRebuildKeymaps);
	class UInputSettings* GetInputSettings();
	void GetAxisNames(TArray<class FName>* InAxisNames);
	void GetAxisMappingByName(class FName InInAxisName, TArray<struct FInputAxisKeyMapping>* InOutMappings);
	void GetActionNames(TArray<class FName>* InActionNames);
	void GetActionMappingByName(class FName InInActionName, TArray<struct FInputActionKeyMapping>* InOutMappings);
	void ForceRebuildKeymaps();
	void AddAxisMapping(struct FInputAxisKeyMapping& InKeyMapping, bool InbForceRebuildKeymaps);
	void AddActionMapping(struct FInputActionKeyMapping& InKeyMapping, bool InbForceRebuildKeymaps);
};

// 0x8 (0x298 - 0x290)
// Class Engine.VectorFieldVolume
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                 VectorFieldComponent;                              // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VectorFieldVolume");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.TireType
class UTireType : public UDataAsset
{
public:
	float                                        FrictionScale;                                     // 0x30(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_38F4[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TireType");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.VisualLoggerAutomationTests
class UVisualLoggerAutomationTests : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VisualLoggerAutomationTests");
		return Clss;
	}

};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.VisualLoggerFilterVolume
class AVisualLoggerFilterVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VisualLoggerFilterVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.VisualLoggerKismetLibrary
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VisualLoggerKismetLibrary");
		return Clss;
	}

	void RedirectVislog(class UObject* InSourceOwner, class UObject* InDestinationOwner);
	void LogText(class UObject* InWorldContextObject, const class FString& InText, class FName InLogCategory, bool InbAddToMessageLog);
	void LogSegment(class UObject* InWorldContextObject, const struct FVector& InSegmentStart, const struct FVector& InSegmentEnd, const class FString& InText, const struct FLinearColor& InObjectColor, float InThickness, class FName InCategoryName, bool InbAddToMessageLog);
	void LogLocation(class UObject* InWorldContextObject, const struct FVector& InLocation, const class FString& InText, const struct FLinearColor& InObjectColor, float InRadius, class FName InLogCategory, bool InbAddToMessageLog);
	void LogBox(class UObject* InWorldContextObject, const struct FBox& InBoxShape, const class FString& InText, const struct FLinearColor& InObjectColor, class FName InLogCategory, bool InbAddToMessageLog);
	void EnableRecording(bool InbEnabled);
};

// 0x10 (0x78 - 0x68)
// Class Engine.VoiceChannel
class UVoiceChannel : public UChannel
{
public:
	uint8                                        Pad_38FF[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VoiceChannel");
		return Clss;
	}

};

// 0x40 (0xE0 - 0xA0)
// Class Engine.VOIPTalker
class UVOIPTalker : public UActorComponent
{
public:
	struct FVoiceSettings                        Settings;                                          // 0xA0(0x18)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_3901[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VOIPTalker");
		return Clss;
	}

	void RegisterWithPlayerState(class APlayerState* InOwningState);
	float GetVoiceLevel();
	class UVOIPTalker* CreateTalkerForPlayer(class APlayerState* InOwningState);
	void BPOnTalkingEnd();
	void BPOnTalkingBegin(class UAudioComponent* InAudioComponent);
};

// 0x0 (0x28 - 0x28)
// Class Engine.VOIPStatics
class UVOIPStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VOIPStatics");
		return Clss;
	}

	void SetMicThreshold(float InInThreshold);
};

// 0xB0 (0x2A0 - 0x1F0)
// Class Engine.VolumeTexture
class UVolumeTexture : public UTexture
{
public:
	uint8                                        Pad_3903[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETextureAddress                   AddressMode;                                       // 0x290(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3904[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VolumeTexture");
		return Clss;
	}

};

// 0x8 (0x2D0 - 0x2C8)
// Class Engine.VolumetricLightmapDensityVolume
class AVolumetricLightmapDensityVolume : public AVolume
{
public:
	struct FInt32Interval                        AllowedMipLevelRange;                              // 0x2C8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VolumetricLightmapDensityVolume");
		return Clss;
	}

};

// 0x18 (0x2C0 - 0x2A8)
// Class Engine.LightMapVirtualTexture2D
class ULightMapVirtualTexture2D : public UTexture2D
{
public:
	TArray<int8>                                 TypeToLayer;                                       // 0x2A8(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_3905[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightMapVirtualTexture2D");
		return Clss;
	}

};

// 0xB8 (0xE0 - 0x28)
// Class Engine.RuntimeVirtualTexture
class URuntimeVirtualTexture : public UObject
{
public:
	int32                                        TileCount;                                         // 0x28(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        TileSize;                                          // 0x2C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        TileBorderSize;                                    // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ERuntimeVirtualTextureMaterialType MaterialType;                                      // 0x34(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bCompressTextures;                                 // 0x35(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseLowQualityCompression;                         // 0x36(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bClearTextures;                                    // 0x37(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bSinglePhysicalSpace;                              // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bPrivateSpace;                                     // 0x39(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bAdaptive;                                         // 0x3A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bContinuousUpdate;                                 // 0x3B(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        RemoveLowMips;                                     // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ETextureGroup                     LODGroup;                                          // 0x40(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_3909[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Size;                                              // 0x44(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URuntimeVirtualTextureStreamingProxy*  StreamingTexture;                                  // 0x48(0x8)(ZeroConstructor, Deprecated, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_390A[0x90];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RuntimeVirtualTexture");
		return Clss;
	}

	int32 GetTileSize();
	int32 GetTileCount();
	int32 GetTileBorderSize();
	int32 GetSize();
	int32 GetPageTableSize();
};

// 0x8 (0x298 - 0x290)
// Class Engine.RuntimeVirtualTextureVolume
class ARuntimeVirtualTextureVolume : public AActor
{
public:
	class URuntimeVirtualTextureComponent*       VirtualTextureComponent;                           // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RuntimeVirtualTextureVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.VirtualTexture
class UVirtualTexture : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VirtualTexture");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.LightMapVirtualTexture
class ULightMapVirtualTexture : public UVirtualTexture
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightMapVirtualTexture");
		return Clss;
	}

};

// 0x8 (0x2B0 - 0x2A8)
// Class Engine.RuntimeVirtualTextureStreamingProxy
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{
public:
	uint8                                        Pad_390C[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RuntimeVirtualTextureStreamingProxy");
		return Clss;
	}

};

// 0x18 (0x2C0 - 0x2A8)
// Class Engine.VirtualTexture2D
class UVirtualTexture2D : public UTexture2D
{
public:
	struct FVirtualTextureBuildSettings          Settings;                                          // 0x2A8(0x8)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bContinuousUpdate;                                 // 0x2B0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSinglePhysicalSpace;                              // 0x2B1(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_390D[0xE];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VirtualTexture2D");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.VirtualTextureBuilder
class UVirtualTextureBuilder : public UObject
{
public:
	class UVirtualTexture2D*                     Texture;                                           // 0x28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                       BuildHash;                                         // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VirtualTextureBuilder");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.VirtualTexturePoolConfig
class UVirtualTexturePoolConfig : public UObject
{
public:
	int32                                        DefaultSizeInMegabyte;                             // 0x28(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_390E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVirtualTextureSpacePoolConfig> Pools;                                             // 0x30(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VirtualTexturePoolConfig");
		return Clss;
	}

};

// 0x8 (0x298 - 0x290)
// Class Engine.WindDirectionalSource
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*       Component;                                         // 0x290(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WindDirectionalSource");
		return Clss;
	}

};

// 0x40 (0x68 - 0x28)
// Class Engine.WorldComposition
class UWorldComposition : public UObject
{
public:
	uint8                                        Pad_3911[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ULevelStreaming*>               TilesStreaming;                                    // 0x48(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	double                                       TilesStreamingTimeThreshold;                       // 0x58(0x8)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLoadAllTilesDuringCinematic;                      // 0x60(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRebaseOriginIn3DSpace;                            // 0x61(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3912[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RebaseOriginDistance;                              // 0x64(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldComposition");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionBlueprintLibrary
class UWorldPartitionBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionBlueprintLibrary");
		return Clss;
	}

	void UnloadActors(TArray<struct FGuid>& InInActorsToLoad);
	void LoadActors(TArray<struct FGuid>& InInActorsToLoad);
	struct FBox GetRuntimeWorldBounds();
	bool GetIntersectingActorDescs(struct FBox& InInbox, TArray<struct FActorDesc>* InOutActorDescs);
	struct FBox GetEditorWorldBounds();
	bool GetActorDescs(TArray<struct FActorDesc>* InOutActorDescs);
};

// 0x8 (0x30 - 0x28)
// Class Engine.ActorDescContainer
class UActorDescContainer : public UObject
{
public:
	class UWorld*                                World;                                             // 0x28(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorDescContainer");
		return Clss;
	}

};

// 0x30 (0x58 - 0x28)
// Class Engine.ContentBundleDescriptor
class UContentBundleDescriptor : public UObject
{
public:
	class FString                                DisplayName;                                       // 0x28(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                 Guid;                                              // 0x38(0x10)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                PackageRoot;                                       // 0x48(0x10)(Edit, ZeroConstructor, EditConst, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ContentBundleDescriptor");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ContentBundleUnsavedActorMonitor
class UContentBundleUnsavedActorMonitor : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ContentBundleUnsavedActorMonitor");
		return Clss;
	}

};

// 0x70 (0xA0 - 0x30)
// Class Engine.ContentBundleEngineSubsystem
class UContentBundleEngineSubsystem : public UEngineSubsystem
{
public:
	uint8                                        Pad_3919[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ContentBundleEngineSubsystem");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.ContentBundleManager
class UContentBundleManager : public UObject
{
public:
	uint8                                        Pad_391A[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ContentBundleManager");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ContentBundleDuplicateForPIEHelper
class UContentBundleDuplicateForPIEHelper : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ContentBundleDuplicateForPIEHelper");
		return Clss;
	}

};

// 0x328 (0x5B8 - 0x290)
// Class Engine.WorldDataLayers
class AWorldDataLayers : public AInfo
{
public:
	uint8                                        Pad_391E[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TSet<class UDataLayerInstance*>              DataLayerInstances;                                // 0x330(0x50)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FName, TWeakObjectPtr<class UDataLayerInstance>> DeprecatedDataLayerNameToDataLayerInstance;        // 0x380(0x50)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<class UDataLayer*>                      WorldDataLayers;                                   // 0x3D0(0x50)(Deprecated, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class FName>                          RepActiveDataLayerNames;                           // 0x420(0x10)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<class FName>                          RepLoadedDataLayerNames;                           // 0x430(0x10)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_391F[0xA0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          RepEffectiveActiveDataLayerNames;                  // 0x4E0(0x10)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<class FName>                          RepEffectiveLoadedDataLayerNames;                  // 0x4F0(0x10)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3920[0xB8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldDataLayers");
		return Clss;
	}

	void OnRep_LoadedDataLayerNames();
	void OnRep_EffectiveLoadedDataLayerNames();
	void OnRep_EffectiveActiveDataLayerNames();
	void OnRep_ActiveDataLayerNames();
	void OnDataLayerRuntimeStateChanged(class UDataLayerInstance* InInDataLayer, enum class EDataLayerRuntimeState InInState);
};

// 0x30 (0x58 - 0x28)
// Class Engine.DataLayer
class UDataLayer : public UObject
{
public:
	class FName                                  DataLayerLabel;                                    // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bIsRuntime : 1;                                    // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_1DB : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_3926[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDataLayerRuntimeState            InitialRuntimeState;                               // 0x34(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3927[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                DebugColor;                                        // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3928[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataLayer*                            Parent;                                            // 0x40(0x8)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UDataLayer*>                    Children;                                          // 0x48(0x10)(ZeroConstructor, Transient, Deprecated, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataLayer");
		return Clss;
	}

	bool IsVisible();
	bool IsRuntime();
	bool IsInitiallyVisible();
	bool IsInitiallyActive();
	bool IsEffectiveVisible();
	bool IsDynamicallyLoaded();
	enum class EDataLayerState GetInitialState();
	enum class EDataLayerRuntimeState GetInitialRuntimeState();
	struct FColor GetDebugColor();
	class FName GetDataLayerLabel();
	bool Equals(struct FActorDataLayer& InActorDataLayer);
};

// 0x8 (0x30 - 0x28)
// Class Engine.DataLayerAsset
class UDataLayerAsset : public UObject
{
public:
	enum class EDataLayerType                    DataLayerType;                                     // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_392C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                DebugColor;                                        // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataLayerAsset");
		return Clss;
	}

	bool IsRuntime();
	enum class EDataLayerType GetType();
	struct FColor GetDebugColor();
};

// 0x20 (0x48 - 0x28)
// Class Engine.DataLayerInstance
class UDataLayerInstance : public UObject
{
public:
	enum class EDataLayerRuntimeState            InitialRuntimeState;                               // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_392E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDataLayerInstance*                    Parent;                                            // 0x30(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UDataLayerInstance*>            Children;                                          // 0x38(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataLayerInstance");
		return Clss;
	}

	bool IsVisible();
	bool IsRuntime();
	bool IsInitiallyVisible();
	bool IsEffectiveVisible();
	enum class EDataLayerType GetType();
	enum class EDataLayerRuntimeState GetInitialRuntimeState();
	struct FColor GetDebugColor();
};

// 0x8 (0x50 - 0x48)
// Class Engine.DataLayerInstanceWithAsset
class UDataLayerInstanceWithAsset : public UDataLayerInstance
{
public:
	class UDataLayerAsset*                       DataLayerAsset;                                    // 0x48(0x8)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataLayerInstanceWithAsset");
		return Clss;
	}

};

// 0x70 (0xA0 - 0x30)
// Class Engine.DataLayerSubsystem
class UDataLayerSubsystem : public UWorldSubsystem
{
public:
	FMulticastInlineDelegateProperty_            OnDataLayerRuntimeStateChanged;                    // 0x30(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_3948[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataLayerSubsystem");
		return Clss;
	}

	void SetDataLayerStateByLabel(class FName& InInDataLayerLabel, enum class EDataLayerState InInState);
	void SetDataLayerState(struct FActorDataLayer& InInDataLayer, enum class EDataLayerState InInState);
	void SetDataLayerRuntimeStateByLabel(class FName& InInDataLayerLabel, enum class EDataLayerRuntimeState InInState, bool InbInIsRecursive);
	void SetDataLayerRuntimeState(struct FActorDataLayer& InInDataLayer, enum class EDataLayerRuntimeState InInState, bool InbInIsRecursive);
	void SetDataLayerInstanceRuntimeState(class UDataLayerAsset* InInDataLayerAsset, enum class EDataLayerRuntimeState InInState, bool InbInIsRecursive);
	TSet<class FName> GetLoadedDataLayerNames();
	enum class EDataLayerState GetDataLayerStateByLabel(class FName& InInDataLayerLabel);
	enum class EDataLayerState GetDataLayerState(struct FActorDataLayer& InInDataLayer);
	enum class EDataLayerRuntimeState GetDataLayerRuntimeStateByLabel(class FName& InInDataLayerLabel);
	enum class EDataLayerRuntimeState GetDataLayerRuntimeState(struct FActorDataLayer& InInDataLayer);
	enum class EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(class UDataLayerAsset* InInDataLayerAsset);
	class UDataLayerInstance* GetDataLayerInstanceFromAsset(class UDataLayerAsset* InInDataLayerAsset);
	enum class EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(class UDataLayerAsset* InInDataLayerAsset);
	class UDataLayerInstance* GetDataLayerFromName(class FName InInDataLayerName);
	class UDataLayerInstance* GetDataLayerFromLabel(class FName InInDataLayerLabel);
	enum class EDataLayerRuntimeState GetDataLayerEffectiveRuntimeStateByLabel(class FName& InInDataLayerLabel);
	enum class EDataLayerRuntimeState GetDataLayerEffectiveRuntimeState(struct FActorDataLayer& InInDataLayer);
	class UDataLayerInstance* GetDataLayer(struct FActorDataLayer& InInDataLayer);
	TSet<class FName> GetActiveDataLayerNames();
};

// 0x18 (0x60 - 0x48)
// Class Engine.DeprecatedDataLayerInstance
class UDeprecatedDataLayerInstance : public UDataLayerInstance
{
public:
	class FName                                  Label;                                             // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  DeprecatedDataLayerFName;                          // 0x50(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EDataLayerType                    DataLayerType;                                     // 0x58(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3949[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                DebugColor;                                        // 0x5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DeprecatedDataLayerInstance");
		return Clss;
	}

};

// 0x40 (0x2D0 - 0x290)
// Class Engine.WorldPartitionHLOD
class AWorldPartitionHLOD : public AActor
{
public:
	uint32                                       LODLevel;                                          // 0x290(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bRequireWarmup;                                    // 0x294(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_394A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UWorldPartitionRuntimeCell> SourceCell;                                        // 0x298(0x30)(Deprecated, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  SourceCellName;                                    // 0x2C8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionHLOD");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.HLODBuilderSettings
class UHLODBuilderSettings : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HLODBuilderSettings");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NullHLODBuilder
class UNullHLODBuilder : public UHLODBuilder
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NullHLODBuilder");
		return Clss;
	}

};

// 0x58 (0x80 - 0x28)
// Class Engine.HLODLayer
class UHLODLayer : public UObject
{
public:
	enum class EHLODLayerType                    LayerType;                                         // 0x28(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_394B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UHLODBuilder>              HLODBuilderClass;                                  // 0x30(0x8)(Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHLODBuilderSettings*                  HLODBuilderSettings;                               // 0x38(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bIsSpatiallyLoaded : 1;                            // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_1DC : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_394C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CellSize;                                          // 0x44(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	double                                       LoadingRange;                                      // 0x48(0x8)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UHLODLayer>             ParentLayer;                                       // 0x50(0x30)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HLODLayer");
		return Clss;
	}

};

// 0x60 (0x90 - 0x30)
// Class Engine.HLODSubsystem
class UHLODSubsystem : public UWorldSubsystem
{
public:
	uint8                                        Pad_394D[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HLODSubsystem");
		return Clss;
	}

};

// 0x48 (0x2D8 - 0x290)
// Class Engine.NavigationDataChunkActor
class ANavigationDataChunkActor : public APartitionActor
{
public:
	TArray<class UNavigationDataChunk*>          NavDataChunks;                                     // 0x290(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FBox                                  DataChunkActorBounds;                              // 0x2A0(0x38)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationDataChunkActor");
		return Clss;
	}

};

// 0xE8 (0x110 - 0x28)
// Class Engine.WorldPartition
class UWorldPartition : public UObject
{
public:
	uint8                                        Pad_394E[0x38];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UActorDescContainer*                   ActorDescContainer;                                // 0x60(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorldPartitionRuntimeHash*            RuntimeHash;                                       // 0x68(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                World;                                             // 0x70(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableStreaming;                                  // 0x78(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_394F[0x7F];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorldPartitionStreamingPolicy*        StreamingPolicy;                                   // 0xF8(0x8)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3950[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartition");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionActorLoaderInterface
class IWorldPartitionActorLoaderInterface : public IInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionActorLoaderInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionEditorHash
class UWorldPartitionEditorHash : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionEditorHash");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionEditorPerProjectUserSettings
class UWorldPartitionEditorPerProjectUserSettings : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionEditorPerProjectUserSettings");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.WorldPartitionEditorSpatialHash
class UWorldPartitionEditorSpatialHash : public UWorldPartitionEditorHash
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionEditorSpatialHash");
		return Clss;
	}

};

// 0x20 (0x1D0 - 0x1B0)
// Class Engine.WorldPartitionLevelStreamingDynamic
class UWorldPartitionLevelStreamingDynamic : public ULevelStreamingDynamic
{
public:
	bool                                         bShouldBeAlwaysLoaded;                             // 0x1B0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3951[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TWeakObjectPtr<class UWorldPartitionRuntimeLevelStreamingCell> StreamingCell;                                     // 0x1B4(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UWorldPartition>        OuterWorldPartition;                               // 0x1BC(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3952[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionLevelStreamingDynamic");
		return Clss;
	}

};

// 0x1D0 (0x1F8 - 0x28)
// Class Engine.WorldPartitionStreamingPolicy
class UWorldPartitionStreamingPolicy : public UObject
{
public:
	uint8                                        Pad_3953[0x1D0];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionStreamingPolicy");
		return Clss;
	}

};

// 0x50 (0x248 - 0x1F8)
// Class Engine.WorldPartitionLevelStreamingPolicy
class UWorldPartitionLevelStreamingPolicy : public UWorldPartitionStreamingPolicy
{
public:
	TMap<class FName, class FName>               SubObjectsToCellRemapping;                         // 0x1F8(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionLevelStreamingPolicy");
		return Clss;
	}

};

// 0xD0 (0x360 - 0x290)
// Class Engine.WorldPartitionMiniMap
class AWorldPartitionMiniMap : public AInfo
{
public:
	struct FBox                                  MiniMapWorldBounds;                                // 0x290(0x38)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FBox2D                                UVOffset;                                          // 0x2C8(0x28)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UTexture2D*                            MiniMapTexture;                                    // 0x2F0(0x8)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FActorDataLayer>                 ExcludedDataLayers;                                // 0x2F8(0x50)(Edit, NativeAccessSpecifierPublic)
	int32                                        WorldUnitsPerPixel;                                // 0x348(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BuilderCellSize;                                   // 0x34C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESceneCaptureSource               CaptureSource;                                     // 0x350(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3955[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       CaptureWarmupFrames;                               // 0x354(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MiniMapTileSize;                                   // 0x358(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3956[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionMiniMap");
		return Clss;
	}

};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.WorldPartitionMiniMapVolume
class AWorldPartitionMiniMapVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionMiniMapVolume");
		return Clss;
	}

};

// 0x20 (0x2B0 - 0x290)
// Class Engine.WorldPartitionReplay
class AWorldPartitionReplay : public AActor
{
public:
	TArray<class FName>                          StreamingSourceNames;                              // 0x290(0x10)(Net, ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3958[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionReplay");
		return Clss;
	}

};

// 0xC0 (0xE8 - 0x28)
// Class Engine.WorldPartitionRuntimeCell
class UWorldPartitionRuntimeCell : public UObject
{
public:
	uint8                                        Pad_3959[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsAlwaysLoaded;                                   // 0x30(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_395A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          DataLayers;                                        // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FBox                                  ContentBounds;                                     // 0x48(0x38)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FWorldPartitionRuntimeCellDebugInfo   DebugInfo;                                         // 0x80(0x30)(NativeAccessSpecifierPrivate)
	int32                                        Priority;                                          // 0xB0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bClientOnlyVisible;                                // 0xB4(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsHLOD;                                           // 0xB5(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bBlockOnSlowLoading;                               // 0xB6(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_395B[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 ContentBundleID;                                   // 0xB8(0x10)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_395C[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionRuntimeCell");
		return Clss;
	}

};

// 0x68 (0x90 - 0x28)
// Class Engine.RuntimeHashExternalStreamingObjectBase
class URuntimeHashExternalStreamingObjectBase : public UObject
{
public:
	uint8                                        Pad_395D[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSoftObjectPtr<class UWorld>                 OwningWorld;                                       // 0x30(0x30)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UWorld>                 OuterWorld;                                        // 0x60(0x30)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RuntimeHashExternalStreamingObjectBase");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.WorldPartitionRuntimeHash
class UWorldPartitionRuntimeHash : public UObject
{
public:
	uint8                                        Pad_395E[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionRuntimeHash");
		return Clss;
	}

};

// 0x50 (0x138 - 0xE8)
// Class Engine.WorldPartitionRuntimeSpatialHashCell
class UWorldPartitionRuntimeSpatialHashCell : public UWorldPartitionRuntimeCell
{
public:
	struct FVector                               Position;                                          // 0xE8(0x18)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Extent;                                            // 0x100(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Level;                                             // 0x104(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_3960[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionRuntimeSpatialHashCell");
		return Clss;
	}

};

// 0x8 (0x140 - 0x138)
// Class Engine.WorldPartitionRuntimeLevelStreamingCell
class UWorldPartitionRuntimeLevelStreamingCell : public UWorldPartitionRuntimeSpatialHashCell
{
public:
	class UWorldPartitionLevelStreamingDynamic*  LevelStreaming;                                    // 0x138(0x8)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionRuntimeLevelStreamingCell");
		return Clss;
	}

	void OnLevelShown();
	void OnLevelHidden();
};

// 0x8 (0x298 - 0x290)
// Class Engine.SpatialHashRuntimeGridInfo
class ASpatialHashRuntimeGridInfo : public AInfo
{
public:
	struct FSpatialHashRuntimeGrid               GridSettings;                                      // 0x290(0x1)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_3961[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpatialHashRuntimeGridInfo");
		return Clss;
	}

};

// 0x60 (0xF0 - 0x90)
// Class Engine.RuntimeSpatialHashExternalStreamingObject
class URuntimeSpatialHashExternalStreamingObject : public URuntimeHashExternalStreamingObjectBase
{
public:
	TArray<struct FSpatialHashStreamingGrid>     StreamingGrids;                                    // 0x90(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>               CellToLevelStreamingPackage;                       // 0xA0(0x50)(NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RuntimeSpatialHashExternalStreamingObject");
		return Clss;
	}

};

// 0x80 (0xB0 - 0x30)
// Class Engine.WorldPartitionRuntimeSpatialHash
class UWorldPartitionRuntimeSpatialHash : public UWorldPartitionRuntimeHash
{
public:
	bool                                         bEnableZCulling;                                   // 0x30(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3962[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSpatialHashStreamingGrid>     StreamingGrids;                                    // 0x38(0x10)(ZeroConstructor, NonPIEDuplicateTransient, NativeAccessSpecifierPrivate)
	uint8                                        Pad_3963[0x58];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TWeakObjectPtr<class URuntimeSpatialHashExternalStreamingObject>> ExternalStreamingObjects;                          // 0xA0(0x10)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionRuntimeSpatialHash");
		return Clss;
	}

};

// 0x70 (0xB0 - 0x40)
// Class Engine.WorldPartitionSubsystem
class UWorldPartitionSubsystem : public UTickableWorldSubsystem
{
public:
	uint8                                        Pad_3967[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionSubsystem");
		return Clss;
	}

	bool IsStreamingCompleted(enum class EWorldPartitionRuntimeCellState InQueryState, TArray<struct FWorldPartitionStreamingQuerySource>& InQuerySources, bool InbExactState);
	bool IsAllStreamingCompleted();
};

// 0x0 (0x2C8 - 0x2C8)
// Class Engine.WorldPartitionVolume
class AWorldPartitionVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldPartitionVolume");
		return Clss;
	}

};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
