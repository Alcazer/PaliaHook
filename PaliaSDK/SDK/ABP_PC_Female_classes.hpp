#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PC_Female

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Palia_structs.hpp"
#include "Palia_classes.hpp"
#include "ABP_PC_Female_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_PC_Female.ABP_PC_Female_C
// 0x6240 (0x6D50 - 0x0B10)
class UABP_PC_Female_C final  : public UVAL_ValeriaPCAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_PC_Female::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0B18(0x0010)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0B28(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0B30(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x0B38(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x0B58(0x00C8)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_11;                       // 0x0C20(0x0128)()
	uint8                                         Pad_27A2[0x8];                                     // 0x0D48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_3;                         // 0x0D50(0x0270)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_2;                         // 0x0FC0(0x0270)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x1230(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_10;                       // 0x1250(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_9;                        // 0x1378(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_8;                        // 0x14A0(0x0128)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x15C8(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_7;                        // 0x15E8(0x0128)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x1710(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x1758(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_10;                    // 0x1860(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_9;                     // 0x1888(0x0028)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x18B0(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_66;                 // 0x18D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_65;                 // 0x18F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_64;                 // 0x1920(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_63;                 // 0x1948(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_62;                 // 0x1970(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_61;                 // 0x1998(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_60;                 // 0x19C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_59;                 // 0x19E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_58;                 // 0x1A10(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_57;                 // 0x1A38(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_56;                 // 0x1A60(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_55;                 // 0x1A88(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_54;                 // 0x1AB0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_53;                 // 0x1AD8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_52;                 // 0x1B00(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_51;                 // 0x1B28(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_50;                 // 0x1B50(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_49;                 // 0x1B78(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_48;                 // 0x1BA0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_47;                 // 0x1BC8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_46;                 // 0x1BF0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_45;                 // 0x1C18(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_44;                 // 0x1C40(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_43;                 // 0x1C68(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_42;                 // 0x1C90(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_41;                 // 0x1CB8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_40;                 // 0x1CE0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_39;                 // 0x1D08(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_38;                 // 0x1D30(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_37;                 // 0x1D58(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_36;                 // 0x1D80(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_35;                 // 0x1DA8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_34;                 // 0x1DD0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_33;                 // 0x1DF8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_32;                 // 0x1E20(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_31;                 // 0x1E48(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_30;                 // 0x1E70(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_29;                 // 0x1E98(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_28;                 // 0x1EC0(0x0028)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping_8;           // 0x1EE8(0x00B8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_31;                      // 0x1FA0(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_17;            // 0x1FC0(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_30;                      // 0x2080(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_16;            // 0x20A0(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_29;                      // 0x2160(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_15;            // 0x2180(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_28;                      // 0x2240(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_14;            // 0x2260(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_27;                      // 0x2320(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_13;            // 0x2340(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_26;                      // 0x2400(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_12;            // 0x2420(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_25;                      // 0x24E0(0x0020)()
	struct FAnimNode_ModifyCurve                  AnimGraphNode_ModifyCurve_2;                       // 0x2500(0x0100)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_11;            // 0x2600(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_24;                      // 0x26C0(0x0020)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping_7;           // 0x26E0(0x00B8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_23;                      // 0x2798(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_10;            // 0x27B8(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_22;                      // 0x2878(0x0020)()
	struct FAnimNode_ModifyCurve                  AnimGraphNode_ModifyCurve_1;                       // 0x2898(0x0100)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_9;             // 0x2998(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_21;                      // 0x2A58(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_8;             // 0x2A78(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_20;                      // 0x2B38(0x0020)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping_6;           // 0x2B58(0x00B8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_19;                      // 0x2C10(0x0020)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping_5;           // 0x2C30(0x00B8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_18;                      // 0x2CE8(0x0020)()
	struct FAnimNode_ModifyCurve                  AnimGraphNode_ModifyCurve;                         // 0x2D08(0x0100)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x2E08(0x0048)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_5;                     // 0x2E50(0x00C8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x2F18(0x0048)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping_4;           // 0x2F60(0x00B8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x3018(0x0048)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_4;                     // 0x3060(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x3128(0x0048)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_3;                     // 0x3170(0x00C8)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping_3;           // 0x3238(0x00B8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_17;                      // 0x32F0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_3;                      // 0x3310(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x33D8(0x0108)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x34E0(0x0108)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_9;                              // 0x35E8(0x0048)()
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization;                     // 0x3630(0x0100)()
	struct FAnimNode_LookAtBlendSpaceByMapping    AnimGraphNode_LookAtBlendSpaceByMapping;           // 0x3730(0x0140)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_8;                              // 0x3870(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_4;                  // 0x38B8(0x00E0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_8;                     // 0x3998(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x39C0(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_7;                     // 0x3A08(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_27;                 // 0x3A30(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_26;                 // 0x3A58(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_25;                 // 0x3A80(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_24;                 // 0x3AA8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_23;                 // 0x3AD0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_22;                 // 0x3AF8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_21;                 // 0x3B20(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_20;                 // 0x3B48(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_19;                 // 0x3B70(0x0028)()
	struct FAnimNode_EvalSequenceByMapping        AnimGraphNode_EvalSequenceByMapping_2;             // 0x3B98(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_16;                      // 0x3C28(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x3C48(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_15;                      // 0x3C70(0x0020)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping_2;           // 0x3C90(0x00B8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_14;                      // 0x3D48(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_7;             // 0x3D68(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_13;                      // 0x3E28(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x3E48(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_7;                              // 0x3E70(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_6;                              // 0x3EB8(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_3;                  // 0x3F00(0x00E0)()
	struct FAnimNode_EvalSequenceByMapping        AnimGraphNode_EvalSequenceByMapping_1;             // 0x3FE0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_12;                      // 0x4070(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_18;                 // 0x4090(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_17;                 // 0x40B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_16;                 // 0x40E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_15;                 // 0x4108(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x4130(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x4158(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x4180(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x41A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x41D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x41F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x4220(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x4248(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x4270(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x4298(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x42C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x42E8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x4310(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x4338(0x0028)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_6;             // 0x4360(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_11;                      // 0x4420(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_5;             // 0x4440(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x4500(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_4;             // 0x4520(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x45E0(0x0020)()
	struct FAnimNode_RandomSequenceByMapping      AnimGraphNode_RandomSequenceByMapping;             // 0x4600(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x4690(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x46B0(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x4778(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_3;             // 0x4798(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x4858(0x0020)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping_1;           // 0x4878(0x00B8)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping;             // 0x4930(0x00B8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x49E8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x4A30(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_2;             // 0x4A50(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x4B10(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x4B30(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_5;                              // 0x4B58(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x4BA0(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_2;                  // 0x4BE8(0x00E0)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_1;             // 0x4CC8(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x4D88(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x4DA8(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x4DD0(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x4E18(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x4E60(0x00E0)()
	struct FAnimNode_EvalSequenceByMapping        AnimGraphNode_EvalSequenceByMapping;               // 0x4F40(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x4FD0(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x4FF0(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x5018(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x5060(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x50A8(0x00E0)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping;               // 0x5188(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x5248(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x5268(0x0028)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x5290(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x5358(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x5378(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x5440(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x5548(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x5570(0x0028)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_2;                     // 0x5598(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x5660(0x0048)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x56A8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x56C8(0x0020)()
	uint8                                         Pad_27A3[0x8];                                     // 0x56E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_Fabrik                       AnimGraphNode_Fabrik_1;                            // 0x56F0(0x01F0)()
	struct FAnimNode_Fabrik                       AnimGraphNode_Fabrik;                              // 0x58E0(0x01F0)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x5AD0(0x00C8)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer;                     // 0x5B98(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x5C60(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x5CA8(0x0048)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x5CF0(0x00C8)()
	uint8                                         Pad_27A4[0x8];                                     // 0x5DB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_1;                         // 0x5DC0(0x0270)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x6030(0x0270)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_6;                        // 0x62A0(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_5;                        // 0x63C8(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_4;                        // 0x64F0(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x6618(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x6740(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x6868(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x6990(0x0128)()
	class FString                                 CVar_ClimbingIKEnable;                             // 0x6AB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                HandSocketLocation_Left;                           // 0x6AC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HandSocketLocation_Right;                          // 0x6AE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IKHandEffector_Left;                               // 0x6AF8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                IKHandEffector_Right;                              // 0x6B10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHandHittingWall_Left;                            // 0x6B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHandHittingWall_Right;                           // 0x6B29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27A5[0x2];                                     // 0x6B2A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IKHandHitLocationMultiplier;                       // 0x6B2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        LeftHandIKAlpha;                                   // 0x6B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RightHandIKAlpha;                                  // 0x6B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftHandIKLock;                                    // 0x6B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightHandIKLock;                                   // 0x6B41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27A6[0x6];                                     // 0x6B42(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lock_Interp_Speed;                                 // 0x6B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Unlock_Interp_Speed;                               // 0x6B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LeanRotator;                                       // 0x6B58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FBoxSphereBounds                       LeftHandSphere;                                    // 0x6B70(0x0038)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FBoxSphereBounds                       RightHandSphere;                                   // 0x6BA8(0x0038)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLeftHandHigher;                                  // 0x6BE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIkEnabledThreaded;                               // 0x6BE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27A7[0x6];                                     // 0x6BE2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RightHandRot;                                      // 0x6BE8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LeftHandRot;                                       // 0x6C00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Trace_Out_Normal_Left;                             // 0x6C18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Trace_Out_Normal_Right;                            // 0x6C30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x6C48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27A8[0x4];                                     // 0x6C4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Foot_IK_L_Offset;                                  // 0x6C50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Foot_IK_R_Offset;                                  // 0x6C68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Foot_IK_L_Rotation_Offset;                         // 0x6C80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Foot_IK_R_Rotation_Offset;                         // 0x6C98(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Foot_IK_Pelvis_Offset;                             // 0x6CB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Foot_IK_Pelvis_Offset_Alpha;                       // 0x6CC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27A9[0x4];                                     // 0x6CCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Foot_Ik_R_Target;                                  // 0x6CD0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Foot_Ik_L_Target;                                  // 0x6CE8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FootIKStartTraceDistance;                          // 0x6D00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FootIKEndTraceDistance;                            // 0x6D18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IKFootHeight;                                      // 0x6D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CVar_FootIKEnable;                                 // 0x6D38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FootIKEnabled;                                     // 0x6D48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_AbilityLockIn();
	void AnimNotify_EnterCatchOnWall();
	void AnimNotify_EnterFallLoop();
	void AnimNotify_EnterJumpLand();
	void AnimNotify_EnterJumpLoop();
	void AnimNotify_EnterJumpPedal();
	void AnimNotify_EnterJumpStart();
	void AnimNotify_FishingDone();
	void AnimNotify_Hide_Fish();
	void AnimNotify_InspirationEnd();
	void AnimNotify_LeftHandClimb();
	void AnimNotify_LeftHandClimbingIK();
	void AnimNotify_LeftHandIKLock();
	void AnimNotify_LeftHandIKUnLock();
	void AnimNotify_NotifyShowArrow();
	void AnimNotify_RightHandClimb();
	void AnimNotify_RightHandClimbingIK();
	void AnimNotify_RightHandIKLock();
	void AnimNotify_RightHandIKUnLock();
	void BlueprintThreadSafeUpdateAnimation(float Param_DeltaTime, bool CallFunc_EqualEqual_VectorVector_ReturnValue, bool CallFunc_EqualEqual_VectorVector_ReturnValue_1, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue_1, bool CallFunc_EqualEqual_NameName_ReturnValue_2, bool CallFunc_EqualEqual_NameName_ReturnValue_3, bool CallFunc_EqualEqual_NameName_ReturnValue_4, bool CallFunc_EqualEqual_NameName_ReturnValue_5, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue_6, bool CallFunc_BooleanOR_ReturnValue_1, bool CallFunc_EqualEqual_NameName_ReturnValue_7, bool CallFunc_BooleanOR_ReturnValue_2, bool CallFunc_BooleanOR_ReturnValue_3, bool CallFunc_BooleanOR_ReturnValue_4, bool CallFunc_BooleanOR_ReturnValue_5, bool CallFunc_BooleanOR_ReturnValue_6, bool CallFunc_BooleanOR_ReturnValue_7, bool CallFunc_BooleanOR_ReturnValue_8, double CallFunc_MapRangeClamped_ReturnValue, double CallFunc_Multiply_DoubleDouble_ReturnValue, const struct FRotator& CallFunc_MakeRotator_ReturnValue, double CallFunc_FInterpTo_ReturnValue, double CallFunc_FInterpTo_ReturnValue_1, double CallFunc_FInterpTo_ReturnValue_2, double CallFunc_FInterpTo_ReturnValue_3, double CallFunc_FInterpTo_DeltaTime_ImplicitCast, double CallFunc_FInterpTo_DeltaTime_ImplicitCast_1, double CallFunc_FInterpTo_DeltaTime_ImplicitCast_2, double CallFunc_FInterpTo_DeltaTime_ImplicitCast_3, float CallFunc_MakeRotator_Yaw_ImplicitCast);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_ApplyAdditive_459F2DB14B4C4EAF953DBC8B6188B013();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_EvalSequenceByMapping_E19E478F412ED4C799E0DD8937814374();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_LookAtBlendSpaceByMapping_6CA322094B6661498F545CA366BFAC43();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_PlayBlendSpaceByMapping_3EBA52254FE2766ADE3A18AD02BDBFD9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_PlayBlendSpaceByMapping_D041C5C34F5506E5A4FA8A97CB81BB68();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_PlaySequenceByMapping_991E166E4643B20858767D886571F3EB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_063CF582497BB94F30862C96126D2625();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_06C0DE6D4302A2BCBB93368142F007AD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_0FBFEF644ACE13015D78AAA298B87878();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_103CCD064209174FA537FF98B92612BD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_1E80BFE548C6A923231613993BCC0645();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_3045FD9C48A5E68524C76DAAE8EB69BD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_3E0ED5E843CA6CC1A7590998534C077A();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_4636F12C4E9F73FDEA7F408ED7CEF95C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_48FA21F048637D33399A369FFA9692AC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_4BAEBF1949A44C6A3FFCCC8F98D4C0F9();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_4E3C67F04390D52BCEBBDD921BFC08AA();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_5967469F42A1C56BD6098597E036B0FE();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_5FC0212E4207D8A88ED2F9BD2CF14430();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_620923C346AAA000C2318F8B5D2B5030();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_631209DE477FB0F5A65F349105FC20B6();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_6A5B9DFD42B6347D8EFD5482D42C661F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_8E7757F14CFEDC837E649FB157F1935B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_8E874EB14015EFCBD98DB8AE7D9732B5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_A7D5C539454863265501D48AF417C122();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_A91194694B85A6B36F9C4A8FDD9E3A28();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_B50C0E9E4E1EEBE6AEA25B97B486B74F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_B758270847115EB065C1E08A08A496F2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_C37140D041BCA51766A7E986CEBFCE8D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_C6A6CB5A4357D4C5776A3FAF65AD51B6();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_CF3EC19448698902EEA714B77264C7AC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_D049DC384D59BE714BBF86A5730E905D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_D28DD7124D27D357DC12F8A27A3EF734();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_E3EA67124B3E6F8ABD9C5A8C0B80E596();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_E9AE41E4467D814A3E30CCA26781F320();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_EB77F96A461C30BA6FDA1D95A5ACC188();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_EF94AC9F40FB7900D04FFAACC1F94026();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TransitionResult_FC737ACE4379E0B3A5BFFAA4EB8F6F09();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TwoBoneIK_0D95563540A92CF3CBC462B4F0204997();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Female_AnimGraphNode_TwoBoneIK_B753FB83445CCC7D0C2934B47DC74535();
	void ExecuteUbergraph_ABP_PC_Female(int32 EntryPoint, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_GameplayTag_ReturnValue, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_1, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_2, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_3, bool CallFunc_BooleanOR_ReturnValue, const struct FVector& CallFunc_GetHandIKLocation_Hit_Location, bool CallFunc_GetHandIKLocation_HasHitWall, const struct FVector& CallFunc_GetHandIKLocation_TraceOutNormal1, double CallFunc_Lerp_ReturnValue, const struct FVector& CallFunc_GetHandIKLocation_Hit_Location_1, bool CallFunc_GetHandIKLocation_HasHitWall_1, const struct FVector& CallFunc_GetHandIKLocation_TraceOutNormal1_1, bool CallFunc_NotEqual_GameplayTag_ReturnValue, bool CallFunc_NotEqual_GameplayTag_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue_1, bool CallFunc_NotEqual_GameplayTag_ReturnValue_2, bool CallFunc_NotEqual_GameplayTag_ReturnValue_3, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_NotEqual_GameplayTag_ReturnValue_4, bool CallFunc_NotEqual_GameplayTag_ReturnValue_5, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_4, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_5, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_6, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_7, bool CallFunc_BooleanOR_ReturnValue_2, bool CallFunc_IsGameplayTagValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_1, bool CallFunc_NotEqual_GameplayTag_ReturnValue_6, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_8, bool CallFunc_BooleanOR_ReturnValue_3, bool CallFunc_IsGameplayTagValid_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_9, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_10, bool CallFunc_BooleanOR_ReturnValue_4, bool CallFunc_EqualEqual_ByteByte_ReturnValue_1, bool CallFunc_Less_DoubleDouble_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_1, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_11, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue_3, class FName Temp_name_Variable, bool CallFunc_Less_DoubleDouble_ReturnValue_1, class FName Temp_name_Variable_1, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool Temp_bool_Variable_1, bool CallFunc_NotEqual_ByteByte_ReturnValue_1, bool CallFunc_GreaterEqual_DoubleDouble_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue_2, double CallFunc_SelectFloat_ReturnValue, bool Temp_bool_Variable_2, class FName Temp_name_Variable_2, bool Temp_bool_Variable_3, class FName K2Node_Select_Default, float CallFunc_Conv_BoolToFloat_ReturnValue, bool Temp_bool_Variable_4, bool CallFunc_Greater_DoubleDouble_ReturnValue, class FName Temp_name_Variable_3, bool CallFunc_NotEqual_ByteByte_ReturnValue_3, class FName K2Node_Select_Default_1, double CallFunc_GetClimbDirectionAxisValues_OutX, double CallFunc_GetClimbDirectionAxisValues_OutY, const struct FVector& CallFunc_VEase_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_5, bool CallFunc_Not_PreBool_ReturnValue_4, const struct FVector& CallFunc_VEase_ReturnValue_1, bool CallFunc_Not_PreBool_ReturnValue_5, bool Temp_bool_Variable_5, class UValeriaGASComponent* CallFunc_GetGAS_ReturnValue, class UEquipmentComponent* CallFunc_GetEquipment_ReturnValue, const struct FEquipmentItem& CallFunc_GetEquippedItem_ReturnValue, class APawn* CallFunc_TryGetPawnOwner_ReturnValue, class AEquipViewActor* CallFunc_Array_Get_Item, EValeriaFuncResult CallFunc_GetValeriaCharacter_OutResult, class AValeriaCharacter* CallFunc_GetValeriaCharacter_ReturnValue, class ABP_Bow_EquipView_C* K2Node_DynamicCast_AsBP_Bow_Equip_View, bool K2Node_DynamicCast_bSuccess, class UFishingComponent* CallFunc_GetFishing_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, class FName Temp_name_Variable_4, class FName Temp_name_Variable_5, bool CallFunc_IsIKEnabled_IsEnabled, bool CallFunc_IsIKEnabled_IsEnabled_1, class FName K2Node_Select_Default_2, const struct FVector& CallFunc_GetSocketLocation_ReturnValue, const struct FVector& CallFunc_GetSocketLocation_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue_6, bool CallFunc_BooleanOR_ReturnValue_7, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_DoubleDouble_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_2, bool CallFunc_Not_PreBool_ReturnValue_6, bool CallFunc_BooleanAND_ReturnValue_3, bool CallFunc_BooleanAND_ReturnValue_4, bool CallFunc_Not_PreBool_ReturnValue_7, const struct FRotator& CallFunc_GetSocketRotation_ReturnValue, const struct FRotator& CallFunc_GetSocketRotation_ReturnValue_1, const struct FVector& CallFunc_GetRightVector_ReturnValue, const struct FVector& CallFunc_GetRightVector_ReturnValue_1, float CallFunc_AngleBetween_ReturnValue, const struct FVector& CallFunc_Multiply_VectorVector_ReturnValue, const struct FVector& CallFunc_Cross_VectorVector_ReturnValue, const struct FRotator& CallFunc_RotatorFromAxisAndAngle_ReturnValue, const struct FVector& CallFunc_Cross_VectorVector_ReturnValue_1, float CallFunc_AngleBetween_ReturnValue_1, const struct FRotator& CallFunc_RotatorFromAxisAndAngle_ReturnValue_1, bool CallFunc_EqualEqual_ByteByte_ReturnValue_3, bool CallFunc_EqualEqual_ByteByte_ReturnValue_4, bool CallFunc_BooleanAND_ReturnValue_5, bool CallFunc_BooleanAND_ReturnValue_6, bool CallFunc_BooleanAND_ReturnValue_7, bool CallFunc_BooleanAND_ReturnValue_8, float K2Node_StructMemberSet_ExplicitTime_ImplicitCast, float K2Node_StructMemberSet_Alpha_ImplicitCast, float K2Node_StructMemberSet___FloatProperty_2_ImplicitCast, float K2Node_StructMemberSet___FloatProperty_1_ImplicitCast, float K2Node_StructMemberSet_X_ImplicitCast, float K2Node_StructMemberSet_Y_ImplicitCast, double CallFunc_LessEqual_DoubleDouble_A_ImplicitCast, float K2Node_StructMemberSet_X_ImplicitCast_1, float K2Node_StructMemberSet_Y_ImplicitCast_1);
	void FootIK(const struct FPoseLink& InPose, struct FPoseLink* Param_FootIK);
	void GetHandIKLocation(const struct FVector& SocketLocation, double Distance, bool IsLeftHand, struct FVector* Hit_Location, bool* HasHitWall, struct FVector* TraceOutNormal1, bool SphereTraceResult, bool IsInSphere, const struct FVector& ClosestPointonSphere, const struct FVector& ForwardVectorDistanceMultiplied, const struct FVector& ForwardVectorDistance, const struct FVector& ForwardVectorNormalized, const struct FVector& TraceOutNormal, const struct FVector& TraceOutLocation, TArray<class AActor*>& Temp_object_Variable, TArray<class AActor*>& Temp_object_Variable_1, const struct FVector& CallFunc_Conv_FloatToVector_ReturnValue, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue, const struct FVector& CallFunc_Multiply_VectorVector_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, const struct FHitResult& CallFunc_SphereTraceSingle_OutHit, bool CallFunc_SphereTraceSingle_ReturnValue, const struct FVector& CallFunc_Conv_FloatToVector_ReturnValue_1, const struct FVector& CallFunc_Multiply_VectorVector_ReturnValue_1, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, const struct FVector& CallFunc_BreakHitResult_Location, const struct FVector& CallFunc_BreakHitResult_ImpactPoint, const struct FVector& CallFunc_BreakHitResult_Normal, const struct FVector& CallFunc_BreakHitResult_ImpactNormal, class UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, class AActor* CallFunc_BreakHitResult_HitActor, class UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, class FName CallFunc_BreakHitResult_HitBoneName, class FName CallFunc_BreakHitResult_BoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_ElementIndex, int32 CallFunc_BreakHitResult_FaceIndex, const struct FVector& CallFunc_BreakHitResult_TraceStart, const struct FVector& CallFunc_BreakHitResult_TraceEnd, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_1, const struct FVector& CallFunc_GetSocketLocation_ReturnValue, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, const struct FVector& CallFunc_GetSocketLocation_ReturnValue_1, double CallFunc_BreakVector_X_1, double CallFunc_BreakVector_Y_1, double CallFunc_BreakVector_Z_1, double CallFunc_BreakVector_X_2, double CallFunc_BreakVector_Y_2, double CallFunc_BreakVector_Z_2, const struct FVector& CallFunc_MakeVector_ReturnValue, double CallFunc_BreakVector_X_3, double CallFunc_BreakVector_Y_3, double CallFunc_BreakVector_Z_3, const struct FVector& CallFunc_MakeVector_ReturnValue_1, const struct FVector& CallFunc_SelectVector_ReturnValue, class USceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, const struct FVector& CallFunc_GetForwardVector_ReturnValue, const struct FVector& CallFunc_Normal_ReturnValue, const struct FVector& CallFunc_Conv_DoubleToVector_ReturnValue, const struct FVector& CallFunc_Multiply_VectorVector_ReturnValue_2, const struct FVector& CallFunc_Conv_FloatToVector_ReturnValue_2, const struct FVector& CallFunc_Multiply_VectorVector_ReturnValue_3, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue_1, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_2, const struct FHitResult& CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit_1, bool CallFunc_BreakHitResult_bInitialOverlap_1, float CallFunc_BreakHitResult_Time_1, float CallFunc_BreakHitResult_Distance_1, const struct FVector& CallFunc_BreakHitResult_Location_1, const struct FVector& CallFunc_BreakHitResult_ImpactPoint_1, const struct FVector& CallFunc_BreakHitResult_Normal_1, const struct FVector& CallFunc_BreakHitResult_ImpactNormal_1, class UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat_1, class AActor* CallFunc_BreakHitResult_HitActor_1, class UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent_1, class FName CallFunc_BreakHitResult_HitBoneName_1, class FName CallFunc_BreakHitResult_BoneName_1, int32 CallFunc_BreakHitResult_HitItem_1, int32 CallFunc_BreakHitResult_ElementIndex_1, int32 CallFunc_BreakHitResult_FaceIndex_1, const struct FVector& CallFunc_BreakHitResult_TraceStart_1, const struct FVector& CallFunc_BreakHitResult_TraceEnd_1, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue_2, float CallFunc_SphereTraceSingle_Radius_ImplicitCast);
	void HandleAnimNotify_FishingDone(class UEquipmentComponent* PlayerEquipment, class AActor* ActorRod, const struct FEquipmentItem& CallFunc_GetEquippedItem_ReturnValue, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, class UFishingComponent* CallFunc_GetFishing_ReturnValue, class UEquipmentComponent* CallFunc_GetEquipment_ReturnValue, class UFishingViewComponent* CallFunc_GetCachedFishingViewComponent_ReturnValue, class AActor* CallFunc_GetActorRod_ReturnValue);
	void IsIKEnabled(bool* IsEnabled, bool CallFunc_GetConsoleVariableBoolValue_ReturnValue);
	void ResetIK(const struct FVector& CallFunc_VInterpTo_ReturnValue, const struct FVector& CallFunc_VInterpTo_ReturnValue_1, const struct FRotator& CallFunc_RInterpTo_ReturnValue, const struct FRotator& CallFunc_RInterpTo_ReturnValue_1);
	void SetFootIK(class FName AnimCurveName, class FName FootIkBone, class FName RootBone, struct FVector& FootIKOffset, struct FVector& FootIKTarget, struct FRotator& FootIkRotation, const struct FRotator& Foot_Rotation_Target, const struct FVector& ImpactNormal, const struct FVector& ImpactPoint, const struct FVector& ExpectedFloorLocation, float CallFunc_GetCurveValue_ReturnValue, bool CallFunc_Greater_DoubleDouble_ReturnValue, TArray<class AActor*>& Temp_object_Variable, const struct FVector& CallFunc_VInterpTo_ReturnValue, const struct FVector& CallFunc_VInterpTo_ReturnValue_1, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, double CallFunc_BreakVector_X_1, double CallFunc_BreakVector_Y_1, double CallFunc_BreakVector_Z_1, bool CallFunc_Greater_DoubleDouble_ReturnValue_1, double CallFunc_BreakVector_X_2, double CallFunc_BreakVector_Y_2, double CallFunc_BreakVector_Z_2, double CallFunc_DegAtan2_ReturnValue, double CallFunc_DegAtan2_ReturnValue_1, double CallFunc_Multiply_DoubleDouble_ReturnValue, const struct FRotator& CallFunc_MakeRotator_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue_1, const struct FVector& CallFunc_Multiply_VectorVector_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_1, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue, const struct FRotator& CallFunc_RInterpTo_ReturnValue, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue_1, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_2, class USkeletalMeshComponent* CallFunc_GetOwningComponent_ReturnValue, const struct FHitResult& CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, const struct FVector& CallFunc_BreakHitResult_Location, const struct FVector& CallFunc_BreakHitResult_ImpactPoint, const struct FVector& CallFunc_BreakHitResult_Normal, const struct FVector& CallFunc_BreakHitResult_ImpactNormal, class UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, class AActor* CallFunc_BreakHitResult_HitActor, class UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, class FName CallFunc_BreakHitResult_HitBoneName, class FName CallFunc_BreakHitResult_BoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_ElementIndex, int32 CallFunc_BreakHitResult_FaceIndex, const struct FVector& CallFunc_BreakHitResult_TraceStart, const struct FVector& CallFunc_BreakHitResult_TraceEnd, const struct FVector& CallFunc_GetSocketLocation_ReturnValue, double CallFunc_BreakVector_X_3, double CallFunc_BreakVector_Y_3, double CallFunc_BreakVector_Z_3, bool CallFunc_IsWalkable_ReturnValue, const struct FVector& CallFunc_GetSocketLocation_ReturnValue_1, double CallFunc_BreakVector_X_4, double CallFunc_BreakVector_Y_4, double CallFunc_BreakVector_Z_4, const struct FVector& CallFunc_MakeVector_ReturnValue_2, double CallFunc_Greater_DoubleDouble_A_ImplicitCast, float CallFunc_MakeRotator_Roll_ImplicitCast, float CallFunc_MakeRotator_Pitch_ImplicitCast);
	void SetPelvisIK(const struct FVector& FootIkTarget_L, const struct FVector& FootIKTarget_R, const struct FVector& PelvisTarget, bool CallFunc_Greater_DoubleDouble_ReturnValue, const struct FVector& CallFunc_VInterpTo_ReturnValue, const struct FVector& CallFunc_VInterpTo_ReturnValue_1, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, double CallFunc_BreakVector_X_1, double CallFunc_BreakVector_Y_1, double CallFunc_BreakVector_Z_1, bool CallFunc_Less_DoubleDouble_ReturnValue, double CallFunc_BreakVector_X_2, double CallFunc_BreakVector_Y_2, double CallFunc_BreakVector_Z_2, double CallFunc_BreakVector_X_3, double CallFunc_BreakVector_Y_3, double CallFunc_BreakVector_Z_3, float CallFunc_GetCurveValue_ReturnValue, bool CallFunc_Less_DoubleDouble_ReturnValue_1, float CallFunc_GetCurveValue_ReturnValue_1, double CallFunc_Add_DoubleDouble_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue, double CallFunc_Greater_DoubleDouble_A_ImplicitCast, double CallFunc_Add_DoubleDouble_B_ImplicitCast, double CallFunc_Add_DoubleDouble_A_ImplicitCast, float K2Node_VariableSet_Foot_IK_Pelvis_Offset_Alpha_ImplicitCast);
	void UpdateFootIK(bool CallFunc_GetConsoleVariableBoolValue_ReturnValue, bool CallFunc_IsFalling_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_PC_Female_C">();
	}
	static class UABP_PC_Female_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_PC_Female_C>();
	}
};
static_assert(alignof(UABP_PC_Female_C) == 0x000010, "Wrong alignment on UABP_PC_Female_C");
static_assert(sizeof(UABP_PC_Female_C) == 0x006D50, "Wrong size on UABP_PC_Female_C");
static_assert(offsetof(UABP_PC_Female_C, UberGraphFrame) == 0x000B10, "Member 'UABP_PC_Female_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, __AnimBlueprintMutables) == 0x000B18, "Member 'UABP_PC_Female_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimBlueprintExtension_PropertyAccess) == 0x000B28, "Member 'UABP_PC_Female_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimBlueprintExtension_Base) == 0x000B30, "Member 'UABP_PC_Female_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Root_1) == 0x000B38, "Member 'UABP_PC_Female_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_LinkedInputPose) == 0x000B58, "Member 'UABP_PC_Female_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_11) == 0x000C20, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_11' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TwoBoneIK_3) == 0x000D50, "Member 'UABP_PC_Female_C::AnimGraphNode_TwoBoneIK_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TwoBoneIK_2) == 0x000FC0, "Member 'UABP_PC_Female_C::AnimGraphNode_TwoBoneIK_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_LocalToComponentSpace_1) == 0x001230, "Member 'UABP_PC_Female_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_10) == 0x001250, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_10' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_9) == 0x001378, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_9' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_8) == 0x0014A0, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_8' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x0015C8, "Member 'UABP_PC_Female_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_7) == 0x0015E8, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_7' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_BlendListByBool_3) == 0x001710, "Member 'UABP_PC_Female_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_SaveCachedPose_3) == 0x001758, "Member 'UABP_PC_Female_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose_10) == 0x001860, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose_10' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose_9) == 0x001888, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose_9' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Root) == 0x0018B0, "Member 'UABP_PC_Female_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_66) == 0x0018D0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_66' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_65) == 0x0018F8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_65' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_64) == 0x001920, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_64' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_63) == 0x001948, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_63' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_62) == 0x001970, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_62' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_61) == 0x001998, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_61' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_60) == 0x0019C0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_60' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_59) == 0x0019E8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_59' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_58) == 0x001A10, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_58' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_57) == 0x001A38, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_57' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_56) == 0x001A60, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_56' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_55) == 0x001A88, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_55' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_54) == 0x001AB0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_54' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_53) == 0x001AD8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_53' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_52) == 0x001B00, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_52' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_51) == 0x001B28, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_51' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_50) == 0x001B50, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_50' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_49) == 0x001B78, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_49' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_48) == 0x001BA0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_48' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_47) == 0x001BC8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_47' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_46) == 0x001BF0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_46' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_45) == 0x001C18, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_45' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_44) == 0x001C40, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_44' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_43) == 0x001C68, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_43' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_42) == 0x001C90, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_42' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_41) == 0x001CB8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_41' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_40) == 0x001CE0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_40' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_39) == 0x001D08, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_39' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_38) == 0x001D30, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_38' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_37) == 0x001D58, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_37' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_36) == 0x001D80, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_36' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_35) == 0x001DA8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_35' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_34) == 0x001DD0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_34' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_33) == 0x001DF8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_33' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_32) == 0x001E20, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_32' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_31) == 0x001E48, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_31' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_30) == 0x001E70, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_30' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_29) == 0x001E98, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_29' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_28) == 0x001EC0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_28' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlayBlendSpaceByMapping_8) == 0x001EE8, "Member 'UABP_PC_Female_C::AnimGraphNode_PlayBlendSpaceByMapping_8' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_31) == 0x001FA0, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_31' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_17) == 0x001FC0, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_17' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_30) == 0x002080, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_30' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_16) == 0x0020A0, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_16' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_29) == 0x002160, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_29' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_15) == 0x002180, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_15' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_28) == 0x002240, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_28' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_14) == 0x002260, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_14' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_27) == 0x002320, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_27' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_13) == 0x002340, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_13' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_26) == 0x002400, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_26' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_12) == 0x002420, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_12' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_25) == 0x0024E0, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_25' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyCurve_2) == 0x002500, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyCurve_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_11) == 0x002600, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_11' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_24) == 0x0026C0, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_24' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlayBlendSpaceByMapping_7) == 0x0026E0, "Member 'UABP_PC_Female_C::AnimGraphNode_PlayBlendSpaceByMapping_7' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_23) == 0x002798, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_23' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_10) == 0x0027B8, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_10' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_22) == 0x002878, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_22' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyCurve_1) == 0x002898, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyCurve_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_9) == 0x002998, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_9' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_21) == 0x002A58, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_21' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_8) == 0x002A78, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_8' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_20) == 0x002B38, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_20' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlayBlendSpaceByMapping_6) == 0x002B58, "Member 'UABP_PC_Female_C::AnimGraphNode_PlayBlendSpaceByMapping_6' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_19) == 0x002C10, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_19' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlayBlendSpaceByMapping_5) == 0x002C30, "Member 'UABP_PC_Female_C::AnimGraphNode_PlayBlendSpaceByMapping_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_18) == 0x002CE8, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_18' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyCurve) == 0x002D08, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyCurve' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_SequencePlayer_5) == 0x002E08, "Member 'UABP_PC_Female_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ApplyAdditive_5) == 0x002E50, "Member 'UABP_PC_Female_C::AnimGraphNode_ApplyAdditive_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_BlendListByBool_2) == 0x002F18, "Member 'UABP_PC_Female_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlayBlendSpaceByMapping_4) == 0x002F60, "Member 'UABP_PC_Female_C::AnimGraphNode_PlayBlendSpaceByMapping_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_SequencePlayer_4) == 0x003018, "Member 'UABP_PC_Female_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ApplyAdditive_4) == 0x003060, "Member 'UABP_PC_Female_C::AnimGraphNode_ApplyAdditive_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_SequencePlayer_3) == 0x003128, "Member 'UABP_PC_Female_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ApplyAdditive_3) == 0x003170, "Member 'UABP_PC_Female_C::AnimGraphNode_ApplyAdditive_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlayBlendSpaceByMapping_3) == 0x003238, "Member 'UABP_PC_Female_C::AnimGraphNode_PlayBlendSpaceByMapping_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_17) == 0x0032F0, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_17' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateMachine_3) == 0x003310, "Member 'UABP_PC_Female_C::AnimGraphNode_StateMachine_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_SaveCachedPose_2) == 0x0033D8, "Member 'UABP_PC_Female_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_SaveCachedPose_1) == 0x0034E0, "Member 'UABP_PC_Female_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Slot_9) == 0x0035E8, "Member 'UABP_PC_Female_C::AnimGraphNode_Slot_9' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Inertialization) == 0x003630, "Member 'UABP_PC_Female_C::AnimGraphNode_Inertialization' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_LookAtBlendSpaceByMapping) == 0x003730, "Member 'UABP_PC_Female_C::AnimGraphNode_LookAtBlendSpaceByMapping' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Slot_8) == 0x003870, "Member 'UABP_PC_Female_C::AnimGraphNode_Slot_8' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_LayeredBoneBlend_4) == 0x0038B8, "Member 'UABP_PC_Female_C::AnimGraphNode_LayeredBoneBlend_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose_8) == 0x003998, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose_8' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_BlendListByBool_1) == 0x0039C0, "Member 'UABP_PC_Female_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose_7) == 0x003A08, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose_7' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_27) == 0x003A30, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_27' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_26) == 0x003A58, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_26' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_25) == 0x003A80, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_25' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_24) == 0x003AA8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_24' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_23) == 0x003AD0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_23' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_22) == 0x003AF8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_22' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_21) == 0x003B20, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_21' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_20) == 0x003B48, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_20' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_19) == 0x003B70, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_19' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_EvalSequenceByMapping_2) == 0x003B98, "Member 'UABP_PC_Female_C::AnimGraphNode_EvalSequenceByMapping_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_16) == 0x003C28, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_16' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose_6) == 0x003C48, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_15) == 0x003C70, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_15' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlayBlendSpaceByMapping_2) == 0x003C90, "Member 'UABP_PC_Female_C::AnimGraphNode_PlayBlendSpaceByMapping_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_14) == 0x003D48, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_14' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_7) == 0x003D68, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_7' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_13) == 0x003E28, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_13' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose_5) == 0x003E48, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Slot_7) == 0x003E70, "Member 'UABP_PC_Female_C::AnimGraphNode_Slot_7' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Slot_6) == 0x003EB8, "Member 'UABP_PC_Female_C::AnimGraphNode_Slot_6' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_LayeredBoneBlend_3) == 0x003F00, "Member 'UABP_PC_Female_C::AnimGraphNode_LayeredBoneBlend_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_EvalSequenceByMapping_1) == 0x003FE0, "Member 'UABP_PC_Female_C::AnimGraphNode_EvalSequenceByMapping_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_12) == 0x004070, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_12' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_18) == 0x004090, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_18' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_17) == 0x0040B8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_17' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_16) == 0x0040E0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_16' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_15) == 0x004108, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_15' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_14) == 0x004130, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_13) == 0x004158, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_12) == 0x004180, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_11) == 0x0041A8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_10) == 0x0041D0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_9) == 0x0041F8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_8) == 0x004220, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_7) == 0x004248, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_6) == 0x004270, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_5) == 0x004298, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_4) == 0x0042C0, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_3) == 0x0042E8, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_2) == 0x004310, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult_1) == 0x004338, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_6) == 0x004360, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_6' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_11) == 0x004420, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_11' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_5) == 0x004440, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_10) == 0x004500, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_4) == 0x004520, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_9) == 0x0045E0, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_RandomSequenceByMapping) == 0x004600, "Member 'UABP_PC_Female_C::AnimGraphNode_RandomSequenceByMapping' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_8) == 0x004690, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateMachine_2) == 0x0046B0, "Member 'UABP_PC_Female_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_7) == 0x004778, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_3) == 0x004798, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_6) == 0x004858, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlayBlendSpaceByMapping_1) == 0x004878, "Member 'UABP_PC_Female_C::AnimGraphNode_PlayBlendSpaceByMapping_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlayBlendSpaceByMapping) == 0x004930, "Member 'UABP_PC_Female_C::AnimGraphNode_PlayBlendSpaceByMapping' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_BlendListByBool) == 0x0049E8, "Member 'UABP_PC_Female_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_5) == 0x004A30, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_2) == 0x004A50, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_4) == 0x004B10, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose_4) == 0x004B30, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Slot_5) == 0x004B58, "Member 'UABP_PC_Female_C::AnimGraphNode_Slot_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Slot_4) == 0x004BA0, "Member 'UABP_PC_Female_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_LayeredBoneBlend_2) == 0x004BE8, "Member 'UABP_PC_Female_C::AnimGraphNode_LayeredBoneBlend_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping_1) == 0x004CC8, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_3) == 0x004D88, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose_3) == 0x004DA8, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Slot_3) == 0x004DD0, "Member 'UABP_PC_Female_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Slot_2) == 0x004E18, "Member 'UABP_PC_Female_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_LayeredBoneBlend_1) == 0x004E60, "Member 'UABP_PC_Female_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_EvalSequenceByMapping) == 0x004F40, "Member 'UABP_PC_Female_C::AnimGraphNode_EvalSequenceByMapping' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_2) == 0x004FD0, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose_2) == 0x004FF0, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Slot_1) == 0x005018, "Member 'UABP_PC_Female_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Slot) == 0x005060, "Member 'UABP_PC_Female_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_LayeredBoneBlend) == 0x0050A8, "Member 'UABP_PC_Female_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_PlaySequenceByMapping) == 0x005188, "Member 'UABP_PC_Female_C::AnimGraphNode_PlaySequenceByMapping' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult_1) == 0x005248, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TransitionResult) == 0x005268, "Member 'UABP_PC_Female_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateMachine_1) == 0x005290, "Member 'UABP_PC_Female_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateResult) == 0x005358, "Member 'UABP_PC_Female_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_StateMachine) == 0x005378, "Member 'UABP_PC_Female_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_SaveCachedPose) == 0x005440, "Member 'UABP_PC_Female_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose_1) == 0x005548, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_UseCachedPose) == 0x005570, "Member 'UABP_PC_Female_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ApplyAdditive_2) == 0x005598, "Member 'UABP_PC_Female_C::AnimGraphNode_ApplyAdditive_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_SequencePlayer_2) == 0x005660, "Member 'UABP_PC_Female_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_LocalToComponentSpace) == 0x0056A8, "Member 'UABP_PC_Female_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ComponentToLocalSpace) == 0x0056C8, "Member 'UABP_PC_Female_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Fabrik_1) == 0x0056F0, "Member 'UABP_PC_Female_C::AnimGraphNode_Fabrik_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_Fabrik) == 0x0058E0, "Member 'UABP_PC_Female_C::AnimGraphNode_Fabrik' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ApplyAdditive_1) == 0x005AD0, "Member 'UABP_PC_Female_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_LinkedAnimLayer) == 0x005B98, "Member 'UABP_PC_Female_C::AnimGraphNode_LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_SequencePlayer_1) == 0x005C60, "Member 'UABP_PC_Female_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_SequencePlayer) == 0x005CA8, "Member 'UABP_PC_Female_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ApplyAdditive) == 0x005CF0, "Member 'UABP_PC_Female_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TwoBoneIK_1) == 0x005DC0, "Member 'UABP_PC_Female_C::AnimGraphNode_TwoBoneIK_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_TwoBoneIK) == 0x006030, "Member 'UABP_PC_Female_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_6) == 0x0062A0, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_6' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_5) == 0x0063C8, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_4) == 0x0064F0, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_3) == 0x006618, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_2) == 0x006740, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone_1) == 0x006868, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, AnimGraphNode_ModifyBone) == 0x006990, "Member 'UABP_PC_Female_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, CVar_ClimbingIKEnable) == 0x006AB8, "Member 'UABP_PC_Female_C::CVar_ClimbingIKEnable' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, HandSocketLocation_Left) == 0x006AC8, "Member 'UABP_PC_Female_C::HandSocketLocation_Left' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, HandSocketLocation_Right) == 0x006AE0, "Member 'UABP_PC_Female_C::HandSocketLocation_Right' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, IKHandEffector_Left) == 0x006AF8, "Member 'UABP_PC_Female_C::IKHandEffector_Left' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, IKHandEffector_Right) == 0x006B10, "Member 'UABP_PC_Female_C::IKHandEffector_Right' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, IsHandHittingWall_Left) == 0x006B28, "Member 'UABP_PC_Female_C::IsHandHittingWall_Left' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, IsHandHittingWall_Right) == 0x006B29, "Member 'UABP_PC_Female_C::IsHandHittingWall_Right' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, IKHandHitLocationMultiplier) == 0x006B2C, "Member 'UABP_PC_Female_C::IKHandHitLocationMultiplier' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, LeftHandIKAlpha) == 0x006B30, "Member 'UABP_PC_Female_C::LeftHandIKAlpha' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, RightHandIKAlpha) == 0x006B38, "Member 'UABP_PC_Female_C::RightHandIKAlpha' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, LeftHandIKLock) == 0x006B40, "Member 'UABP_PC_Female_C::LeftHandIKLock' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, RightHandIKLock) == 0x006B41, "Member 'UABP_PC_Female_C::RightHandIKLock' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Lock_Interp_Speed) == 0x006B48, "Member 'UABP_PC_Female_C::Lock_Interp_Speed' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Unlock_Interp_Speed) == 0x006B50, "Member 'UABP_PC_Female_C::Unlock_Interp_Speed' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, LeanRotator) == 0x006B58, "Member 'UABP_PC_Female_C::LeanRotator' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, LeftHandSphere) == 0x006B70, "Member 'UABP_PC_Female_C::LeftHandSphere' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, RightHandSphere) == 0x006BA8, "Member 'UABP_PC_Female_C::RightHandSphere' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, IsLeftHandHigher) == 0x006BE0, "Member 'UABP_PC_Female_C::IsLeftHandHigher' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, IsIkEnabledThreaded) == 0x006BE1, "Member 'UABP_PC_Female_C::IsIkEnabledThreaded' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, RightHandRot) == 0x006BE8, "Member 'UABP_PC_Female_C::RightHandRot' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, LeftHandRot) == 0x006C00, "Member 'UABP_PC_Female_C::LeftHandRot' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Trace_Out_Normal_Left) == 0x006C18, "Member 'UABP_PC_Female_C::Trace_Out_Normal_Left' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Trace_Out_Normal_Right) == 0x006C30, "Member 'UABP_PC_Female_C::Trace_Out_Normal_Right' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, DeltaTime) == 0x006C48, "Member 'UABP_PC_Female_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Foot_IK_L_Offset) == 0x006C50, "Member 'UABP_PC_Female_C::Foot_IK_L_Offset' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Foot_IK_R_Offset) == 0x006C68, "Member 'UABP_PC_Female_C::Foot_IK_R_Offset' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Foot_IK_L_Rotation_Offset) == 0x006C80, "Member 'UABP_PC_Female_C::Foot_IK_L_Rotation_Offset' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Foot_IK_R_Rotation_Offset) == 0x006C98, "Member 'UABP_PC_Female_C::Foot_IK_R_Rotation_Offset' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Foot_IK_Pelvis_Offset) == 0x006CB0, "Member 'UABP_PC_Female_C::Foot_IK_Pelvis_Offset' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Foot_IK_Pelvis_Offset_Alpha) == 0x006CC8, "Member 'UABP_PC_Female_C::Foot_IK_Pelvis_Offset_Alpha' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Foot_Ik_R_Target) == 0x006CD0, "Member 'UABP_PC_Female_C::Foot_Ik_R_Target' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, Foot_Ik_L_Target) == 0x006CE8, "Member 'UABP_PC_Female_C::Foot_Ik_L_Target' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, FootIKStartTraceDistance) == 0x006D00, "Member 'UABP_PC_Female_C::FootIKStartTraceDistance' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, FootIKEndTraceDistance) == 0x006D18, "Member 'UABP_PC_Female_C::FootIKEndTraceDistance' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, IKFootHeight) == 0x006D30, "Member 'UABP_PC_Female_C::IKFootHeight' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, CVar_FootIKEnable) == 0x006D38, "Member 'UABP_PC_Female_C::CVar_FootIKEnable' has a wrong offset!");
static_assert(offsetof(UABP_PC_Female_C, FootIKEnabled) == 0x006D48, "Member 'UABP_PC_Female_C::FootIKEnabled' has a wrong offset!");

}

